{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/token/ERC721/IERC721.sol",
    "10": "contracts/ERC721.sol",
    "2": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/token/ERC721/IERC721Receiver.sol",
    "3": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/token/ERC721/extensions/IERC721Metadata.sol",
    "4": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/Address.sol",
    "5": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/Context.sol",
    "6": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/Strings.sol",
    "8": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/introspection/ERC165.sol",
    "9": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/introspection/IERC165.sol"
  },
  "ast": {
    "absolutePath": "contracts/ERC721.sol",
    "exportedSymbols": {
      "Address": [
        2097
      ],
      "Context": [
        2119
      ],
      "ERC165": [
        2346
      ],
      "ERC721": [
        830
      ],
      "IERC165": [
        3579
      ],
      "IERC721": [
        1755
      ],
      "IERC721Metadata": [
        1800
      ],
      "IERC721Receiver": [
        1773
      ],
      "Strings": [
        2322
      ]
    },
    "id": 831,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "92:23:10"
      },
      {
        "absolutePath": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 831,
        "sourceUnit": 1756,
        "src": "117:58:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/token/ERC721/IERC721Receiver.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 831,
        "sourceUnit": 1774,
        "src": "176:66:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 831,
        "sourceUnit": 1801,
        "src": "243:77:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/Address.sol",
        "file": "@openzeppelin/contracts/utils/Address.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 831,
        "sourceUnit": 2098,
        "src": "321:51:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/Context.sol",
        "file": "@openzeppelin/contracts/utils/Context.sol",
        "id": 6,
        "nodeType": "ImportDirective",
        "scope": 831,
        "sourceUnit": 2120,
        "src": "373:51:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/Strings.sol",
        "file": "@openzeppelin/contracts/utils/Strings.sol",
        "id": 7,
        "nodeType": "ImportDirective",
        "scope": 831,
        "sourceUnit": 2323,
        "src": "425:51:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/anush/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/introspection/ERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
        "id": 8,
        "nodeType": "ImportDirective",
        "scope": 831,
        "sourceUnit": 2347,
        "src": "477:64:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 10,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2119,
              "src": "809:7:10"
            },
            "id": 11,
            "nodeType": "InheritanceSpecifier",
            "src": "809:7:10"
          },
          {
            "baseName": {
              "id": 12,
              "name": "ERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2346,
              "src": "818:6:10"
            },
            "id": 13,
            "nodeType": "InheritanceSpecifier",
            "src": "818:6:10"
          },
          {
            "baseName": {
              "id": 14,
              "name": "IERC721",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1755,
              "src": "826:7:10"
            },
            "id": 15,
            "nodeType": "InheritanceSpecifier",
            "src": "826:7:10"
          },
          {
            "baseName": {
              "id": 16,
              "name": "IERC721Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1800,
              "src": "835:15:10"
            },
            "id": 17,
            "nodeType": "InheritanceSpecifier",
            "src": "835:15:10"
          }
        ],
        "contractDependencies": [
          1755,
          1800,
          2119,
          2346,
          3579
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 9,
          "nodeType": "StructuredDocumentation",
          "src": "543:246:10",
          "text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."
        },
        "fullyImplemented": true,
        "id": 830,
        "linearizedBaseContracts": [
          830,
          1800,
          1755,
          2346,
          3579,
          2119
        ],
        "name": "ERC721",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 20,
            "libraryName": {
              "id": 18,
              "name": "Address",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2097,
              "src": "863:7:10"
            },
            "nodeType": "UsingForDirective",
            "src": "857:26:10",
            "typeName": {
              "id": 19,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "875:7:10",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            }
          },
          {
            "id": 23,
            "libraryName": {
              "id": 21,
              "name": "Strings",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2322,
              "src": "894:7:10"
            },
            "nodeType": "UsingForDirective",
            "src": "888:26:10",
            "typeName": {
              "id": 22,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "906:7:10",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "id": 25,
            "mutability": "mutable",
            "name": "_name",
            "nodeType": "VariableDeclaration",
            "scope": 830,
            "src": "938:21:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 24,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "938:6:10",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 27,
            "mutability": "mutable",
            "name": "_symbol",
            "nodeType": "VariableDeclaration",
            "scope": 830,
            "src": "986:23:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 26,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "986:6:10",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 31,
            "mutability": "mutable",
            "name": "_owners",
            "nodeType": "VariableDeclaration",
            "scope": 830,
            "src": "1062:44:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
              "typeString": "mapping(uint256 => address)"
            },
            "typeName": {
              "id": 30,
              "keyType": {
                "id": 28,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1070:7:10",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1062:27:10",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                "typeString": "mapping(uint256 => address)"
              },
              "valueType": {
                "id": 29,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1081:7:10",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 35,
            "mutability": "mutable",
            "name": "_balances",
            "nodeType": "VariableDeclaration",
            "scope": 830,
            "src": "1157:46:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 34,
              "keyType": {
                "id": 32,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1165:7:10",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1157:27:10",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 33,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1176:7:10",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 39,
            "mutability": "mutable",
            "name": "_tokenApprovals",
            "nodeType": "VariableDeclaration",
            "scope": 830,
            "src": "1259:52:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
              "typeString": "mapping(uint256 => address)"
            },
            "typeName": {
              "id": 38,
              "keyType": {
                "id": 36,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1267:7:10",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1259:27:10",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                "typeString": "mapping(uint256 => address)"
              },
              "valueType": {
                "id": 37,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1278:7:10",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 45,
            "mutability": "mutable",
            "name": "_operatorApprovals",
            "nodeType": "VariableDeclaration",
            "scope": 830,
            "src": "1366:72:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
              "typeString": "mapping(address => mapping(address => bool))"
            },
            "typeName": {
              "id": 44,
              "keyType": {
                "id": 40,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1374:7:10",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1366:44:10",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                "typeString": "mapping(address => mapping(address => bool))"
              },
              "valueType": {
                "id": 43,
                "keyType": {
                  "id": 41,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1393:7:10",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "1385:24:10",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                  "typeString": "mapping(address => bool)"
                },
                "valueType": {
                  "id": 42,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "1404:4:10",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 61,
              "nodeType": "Block",
              "src": "1614:57:10",
              "statements": [
                {
                  "expression": {
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 53,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25,
                      "src": "1624:5:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 54,
                      "name": "name_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48,
                      "src": "1632:5:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1624:13:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "1624:13:10"
                },
                {
                  "expression": {
                    "id": 59,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 57,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27,
                      "src": "1647:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 58,
                      "name": "symbol_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 50,
                      "src": "1657:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1647:17:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 60,
                  "nodeType": "ExpressionStatement",
                  "src": "1647:17:10"
                }
              ]
            },
            "documentation": {
              "id": 46,
              "nodeType": "StructuredDocumentation",
              "src": "1445:108:10",
              "text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."
            },
            "id": 62,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 51,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48,
                  "mutability": "mutable",
                  "name": "name_",
                  "nodeType": "VariableDeclaration",
                  "scope": 62,
                  "src": "1570:19:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 47,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1570:6:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 50,
                  "mutability": "mutable",
                  "name": "symbol_",
                  "nodeType": "VariableDeclaration",
                  "scope": 62,
                  "src": "1591:21:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 49,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1591:6:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1569:44:10"
            },
            "returnParameters": {
              "id": 52,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1614:0:10"
            },
            "scope": 830,
            "src": "1558:113:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              2345,
              3578
            ],
            "body": {
              "id": 92,
              "nodeType": "Block",
              "src": "1846:192:10",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 90,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 85,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 78,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 73,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 65,
                          "src": "1875:11:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 75,
                                "name": "IERC721",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1755,
                                "src": "1895:7:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721_$1755_$",
                                  "typeString": "type(contract IERC721)"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721_$1755_$",
                                  "typeString": "type(contract IERC721)"
                                }
                              ],
                              "id": 74,
                              "name": "type",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -27,
                              "src": "1890:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 76,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1890:13:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$1755",
                              "typeString": "type(contract IERC721)"
                            }
                          },
                          "id": 77,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "interfaceId",
                          "nodeType": "MemberAccess",
                          "src": "1890:25:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "src": "1875:40:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 84,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 79,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 65,
                          "src": "1931:11:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 81,
                                "name": "IERC721Metadata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1800,
                                "src": "1951:15:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1800_$",
                                  "typeString": "type(contract IERC721Metadata)"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1800_$",
                                  "typeString": "type(contract IERC721Metadata)"
                                }
                              ],
                              "id": 80,
                              "name": "type",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -27,
                              "src": "1946:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 82,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1946:21:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$1800",
                              "typeString": "type(contract IERC721Metadata)"
                            }
                          },
                          "id": 83,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "interfaceId",
                          "nodeType": "MemberAccess",
                          "src": "1946:33:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "src": "1931:48:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "1875:104:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "arguments": [
                        {
                          "id": 88,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 65,
                          "src": "2019:11:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        ],
                        "expression": {
                          "id": 86,
                          "name": "super",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -25,
                          "src": "1995:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_super$_ERC721_$830_$",
                            "typeString": "type(contract super ERC721)"
                          }
                        },
                        "id": 87,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "supportsInterface",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2345,
                        "src": "1995:23:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                          "typeString": "function (bytes4) view returns (bool)"
                        }
                      },
                      "id": 89,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1995:36:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "1875:156:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 72,
                  "id": 91,
                  "nodeType": "Return",
                  "src": "1856:175:10"
                }
              ]
            },
            "documentation": {
              "id": 63,
              "nodeType": "StructuredDocumentation",
              "src": "1677:56:10",
              "text": " @dev See {IERC165-supportsInterface}."
            },
            "functionSelector": "01ffc9a7",
            "id": 93,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 69,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 67,
                  "name": "ERC165",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 2346,
                  "src": "1814:6:10"
                },
                {
                  "id": 68,
                  "name": "IERC165",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3579,
                  "src": "1822:7:10"
                }
              ],
              "src": "1805:25:10"
            },
            "parameters": {
              "id": 66,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 65,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nodeType": "VariableDeclaration",
                  "scope": 93,
                  "src": "1765:18:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 64,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1765:6:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1764:20:10"
            },
            "returnParameters": {
              "id": 72,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 71,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 93,
                  "src": "1840:4:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 70,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1840:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1839:6:10"
            },
            "scope": 830,
            "src": "1738:300:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1680
            ],
            "body": {
              "id": 116,
              "nodeType": "Block",
              "src": "2178:124:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 108,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 103,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 96,
                          "src": "2196:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 106,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2213:1:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 105,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2205:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 104,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2205:7:10",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 107,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2205:10:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2196:19:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373",
                        "id": 109,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2217:44:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba",
                          "typeString": "literal_string \"ERC721: balance query for the zero address\""
                        },
                        "value": "ERC721: balance query for the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba",
                          "typeString": "literal_string \"ERC721: balance query for the zero address\""
                        }
                      ],
                      "id": 102,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2188:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 110,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2188:74:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 111,
                  "nodeType": "ExpressionStatement",
                  "src": "2188:74:10"
                },
                {
                  "expression": {
                    "baseExpression": {
                      "id": 112,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35,
                      "src": "2279:9:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 114,
                    "indexExpression": {
                      "id": 113,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 96,
                      "src": "2289:5:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2279:16:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 101,
                  "id": 115,
                  "nodeType": "Return",
                  "src": "2272:23:10"
                }
              ]
            },
            "documentation": {
              "id": 94,
              "nodeType": "StructuredDocumentation",
              "src": "2044:48:10",
              "text": " @dev See {IERC721-balanceOf}."
            },
            "functionSelector": "70a08231",
            "id": 117,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 98,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2151:8:10"
            },
            "parameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 96,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 117,
                  "src": "2116:13:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 95,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2116:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2115:15:10"
            },
            "returnParameters": {
              "id": 101,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 117,
                  "src": "2169:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 99,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2169:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2168:9:10"
            },
            "scope": 830,
            "src": "2097:205:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1688
            ],
            "body": {
              "id": 144,
              "nodeType": "Block",
              "src": "2440:154:10",
              "statements": [
                {
                  "assignments": [
                    127
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 127,
                      "mutability": "mutable",
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 144,
                      "src": "2450:13:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 126,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2450:7:10",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 131,
                  "initialValue": {
                    "baseExpression": {
                      "id": 128,
                      "name": "_owners",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 31,
                      "src": "2466:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                        "typeString": "mapping(uint256 => address)"
                      }
                    },
                    "id": 130,
                    "indexExpression": {
                      "id": 129,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 120,
                      "src": "2474:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2466:16:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2450:32:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 138,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 133,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 127,
                          "src": "2500:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 136,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2517:1:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 135,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2509:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 134,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2509:7:10",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 137,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2509:10:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2500:19:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                        "id": 139,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2521:43:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397",
                          "typeString": "literal_string \"ERC721: owner query for nonexistent token\""
                        },
                        "value": "ERC721: owner query for nonexistent token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397",
                          "typeString": "literal_string \"ERC721: owner query for nonexistent token\""
                        }
                      ],
                      "id": 132,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2492:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 140,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2492:73:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 141,
                  "nodeType": "ExpressionStatement",
                  "src": "2492:73:10"
                },
                {
                  "expression": {
                    "id": 142,
                    "name": "owner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 127,
                    "src": "2582:5:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 125,
                  "id": 143,
                  "nodeType": "Return",
                  "src": "2575:12:10"
                }
              ]
            },
            "documentation": {
              "id": 118,
              "nodeType": "StructuredDocumentation",
              "src": "2308:46:10",
              "text": " @dev See {IERC721-ownerOf}."
            },
            "functionSelector": "6352211e",
            "id": 145,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "ownerOf",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 122,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2413:8:10"
            },
            "parameters": {
              "id": 121,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 120,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 145,
                  "src": "2376:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 119,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2376:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2375:17:10"
            },
            "returnParameters": {
              "id": 125,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 124,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 145,
                  "src": "2431:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 123,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2431:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2430:9:10"
            },
            "scope": 830,
            "src": "2359:235:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1785
            ],
            "body": {
              "id": 154,
              "nodeType": "Block",
              "src": "2725:29:10",
              "statements": [
                {
                  "expression": {
                    "id": 152,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 25,
                    "src": "2742:5:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 151,
                  "id": 153,
                  "nodeType": "Return",
                  "src": "2735:12:10"
                }
              ]
            },
            "documentation": {
              "id": 146,
              "nodeType": "StructuredDocumentation",
              "src": "2600:51:10",
              "text": " @dev See {IERC721Metadata-name}."
            },
            "functionSelector": "06fdde03",
            "id": 155,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 148,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2692:8:10"
            },
            "parameters": {
              "id": 147,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2669:2:10"
            },
            "returnParameters": {
              "id": 151,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 150,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 155,
                  "src": "2710:13:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 149,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2710:6:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2709:15:10"
            },
            "scope": 830,
            "src": "2656:98:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1791
            ],
            "body": {
              "id": 164,
              "nodeType": "Block",
              "src": "2889:31:10",
              "statements": [
                {
                  "expression": {
                    "id": 162,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 27,
                    "src": "2906:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 161,
                  "id": 163,
                  "nodeType": "Return",
                  "src": "2899:14:10"
                }
              ]
            },
            "documentation": {
              "id": 156,
              "nodeType": "StructuredDocumentation",
              "src": "2760:53:10",
              "text": " @dev See {IERC721Metadata-symbol}."
            },
            "functionSelector": "95d89b41",
            "id": 165,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 158,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2856:8:10"
            },
            "parameters": {
              "id": 157,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2833:2:10"
            },
            "returnParameters": {
              "id": 161,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 160,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 165,
                  "src": "2874:13:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 159,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2874:6:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2873:15:10"
            },
            "scope": 830,
            "src": "2818:102:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1799
            ],
            "body": {
              "id": 206,
              "nodeType": "Block",
              "src": "3074:241:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 176,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 168,
                            "src": "3100:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 175,
                          "name": "_exists",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 438,
                          "src": "3092:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256) view returns (bool)"
                          }
                        },
                        "id": 177,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3092:16:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                        "id": 178,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3110:49:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
                          "typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
                        },
                        "value": "ERC721Metadata: URI query for nonexistent token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
                          "typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
                        }
                      ],
                      "id": 174,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3084:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 179,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3084:76:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 180,
                  "nodeType": "ExpressionStatement",
                  "src": "3084:76:10"
                },
                {
                  "assignments": [
                    182
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 182,
                      "mutability": "mutable",
                      "name": "baseURI",
                      "nodeType": "VariableDeclaration",
                      "scope": 206,
                      "src": "3171:21:10",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 181,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3171:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 185,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 183,
                      "name": "_baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 216,
                      "src": "3195:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
                        "typeString": "function () view returns (string memory)"
                      }
                    },
                    "id": 184,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3195:10:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3171:34:10"
                },
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 192,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 188,
                              "name": "baseURI",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 182,
                              "src": "3228:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 187,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3222:5:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                              "typeString": "type(bytes storage pointer)"
                            },
                            "typeName": {
                              "id": 186,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "3222:5:10",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 189,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3222:14:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 190,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "3222:21:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 191,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3246:1:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "3222:25:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "hexValue": "",
                      "id": 203,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3306:2:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                        "typeString": "literal_string \"\""
                      },
                      "value": ""
                    },
                    "id": 204,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "3222:86:10",
                    "trueExpression": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 197,
                              "name": "baseURI",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 182,
                              "src": "3274:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 198,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 168,
                                  "src": "3283:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 199,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "toString",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2204,
                                "src": "3283:16:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256) pure returns (string memory)"
                                }
                              },
                              "id": 200,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3283:18:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "expression": {
                              "id": 195,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "3257:3:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 196,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "encodePacked",
                            "nodeType": "MemberAccess",
                            "src": "3257:16:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 201,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3257:45:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 194,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "3250:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                          "typeString": "type(string storage pointer)"
                        },
                        "typeName": {
                          "id": 193,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3250:6:10",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 202,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3250:53:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 173,
                  "id": 205,
                  "nodeType": "Return",
                  "src": "3215:93:10"
                }
              ]
            },
            "documentation": {
              "id": 166,
              "nodeType": "StructuredDocumentation",
              "src": "2926:55:10",
              "text": " @dev See {IERC721Metadata-tokenURI}."
            },
            "functionSelector": "c87b56dd",
            "id": 207,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 170,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3041:8:10"
            },
            "parameters": {
              "id": 169,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 168,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 207,
                  "src": "3004:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 167,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3004:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3003:17:10"
            },
            "returnParameters": {
              "id": 173,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 172,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 207,
                  "src": "3059:13:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 171,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3059:6:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3058:15:10"
            },
            "scope": 830,
            "src": "2986:329:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 215,
              "nodeType": "Block",
              "src": "3622:26:10",
              "statements": [
                {
                  "expression": {
                    "hexValue": "",
                    "id": 213,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3639:2:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                      "typeString": "literal_string \"\""
                    },
                    "value": ""
                  },
                  "functionReturnParameters": 212,
                  "id": 214,
                  "nodeType": "Return",
                  "src": "3632:9:10"
                }
              ]
            },
            "documentation": {
              "id": 208,
              "nodeType": "StructuredDocumentation",
              "src": "3321:230:10",
              "text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overriden in child contracts."
            },
            "id": 216,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_baseURI",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 209,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3573:2:10"
            },
            "returnParameters": {
              "id": 212,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 211,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 216,
                  "src": "3607:13:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 210,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3607:6:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3606:15:10"
            },
            "scope": 830,
            "src": "3556:92:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              1716
            ],
            "body": {
              "id": 258,
              "nodeType": "Block",
              "src": "3775:331:10",
              "statements": [
                {
                  "assignments": [
                    226
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 226,
                      "mutability": "mutable",
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 258,
                      "src": "3785:13:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 225,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3785:7:10",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 231,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 229,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 221,
                        "src": "3816:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 227,
                        "name": "ERC721",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 830,
                        "src": "3801:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ERC721_$830_$",
                          "typeString": "type(contract ERC721)"
                        }
                      },
                      "id": 228,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 145,
                      "src": "3801:14:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 230,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3801:23:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3785:39:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 235,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 233,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 219,
                          "src": "3842:2:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 234,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 226,
                          "src": "3848:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3842:11:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572",
                        "id": 236,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3855:35:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
                          "typeString": "literal_string \"ERC721: approval to current owner\""
                        },
                        "value": "ERC721: approval to current owner"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
                          "typeString": "literal_string \"ERC721: approval to current owner\""
                        }
                      ],
                      "id": 232,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3834:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 237,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3834:57:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 238,
                  "nodeType": "ExpressionStatement",
                  "src": "3834:57:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 249,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 243,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 240,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2109,
                              "src": "3923:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 241,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3923:12:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 242,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 226,
                            "src": "3939:5:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3923:21:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 245,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 226,
                              "src": "3965:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 246,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2109,
                                "src": "3972:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 247,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3972:12:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 244,
                            "name": "isApprovedForAll",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 315,
                            "src": "3948:16:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address,address) view returns (bool)"
                            }
                          },
                          "id": 248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3948:37:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "3923:62:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c",
                        "id": 250,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3999:58:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d",
                          "typeString": "literal_string \"ERC721: approve caller is not owner nor approved for all\""
                        },
                        "value": "ERC721: approve caller is not owner nor approved for all"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d",
                          "typeString": "literal_string \"ERC721: approve caller is not owner nor approved for all\""
                        }
                      ],
                      "id": 239,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3902:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 251,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3902:165:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 252,
                  "nodeType": "ExpressionStatement",
                  "src": "3902:165:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 254,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 219,
                        "src": "4087:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 255,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 221,
                        "src": "4091:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 253,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 724,
                      "src": "4078:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 256,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4078:21:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 257,
                  "nodeType": "ExpressionStatement",
                  "src": "4078:21:10"
                }
              ]
            },
            "documentation": {
              "id": 217,
              "nodeType": "StructuredDocumentation",
              "src": "3654:46:10",
              "text": " @dev See {IERC721-approve}."
            },
            "functionSelector": "095ea7b3",
            "id": 259,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 223,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3766:8:10"
            },
            "parameters": {
              "id": 222,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 219,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 259,
                  "src": "3722:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 218,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3722:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 221,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 259,
                  "src": "3734:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 220,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3734:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3721:29:10"
            },
            "returnParameters": {
              "id": 224,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3775:0:10"
            },
            "scope": 830,
            "src": "3705:401:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1724
            ],
            "body": {
              "id": 279,
              "nodeType": "Block",
              "src": "4252:132:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 270,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 262,
                            "src": "4278:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 269,
                          "name": "_exists",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 438,
                          "src": "4270:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256) view returns (bool)"
                          }
                        },
                        "id": 271,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4270:16:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                        "id": 272,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4288:46:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d",
                          "typeString": "literal_string \"ERC721: approved query for nonexistent token\""
                        },
                        "value": "ERC721: approved query for nonexistent token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d",
                          "typeString": "literal_string \"ERC721: approved query for nonexistent token\""
                        }
                      ],
                      "id": 268,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4262:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4262:73:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 274,
                  "nodeType": "ExpressionStatement",
                  "src": "4262:73:10"
                },
                {
                  "expression": {
                    "baseExpression": {
                      "id": 275,
                      "name": "_tokenApprovals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 39,
                      "src": "4353:15:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                        "typeString": "mapping(uint256 => address)"
                      }
                    },
                    "id": 277,
                    "indexExpression": {
                      "id": 276,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 262,
                      "src": "4369:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4353:24:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 267,
                  "id": 278,
                  "nodeType": "Return",
                  "src": "4346:31:10"
                }
              ]
            },
            "documentation": {
              "id": 260,
              "nodeType": "StructuredDocumentation",
              "src": "4112:50:10",
              "text": " @dev See {IERC721-getApproved}."
            },
            "functionSelector": "081812fc",
            "id": 280,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getApproved",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 264,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4225:8:10"
            },
            "parameters": {
              "id": 263,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 262,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 280,
                  "src": "4188:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 261,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4188:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4187:17:10"
            },
            "returnParameters": {
              "id": 267,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 266,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 280,
                  "src": "4243:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 265,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4243:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4242:9:10"
            },
            "scope": 830,
            "src": "4167:217:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1732
            ],
            "body": {
              "id": 296,
              "nodeType": "Block",
              "src": "4535:69:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 290,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2109,
                          "src": "4564:10:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 291,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4564:12:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 292,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 283,
                        "src": "4578:8:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 293,
                        "name": "approved",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 285,
                        "src": "4588:8:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 289,
                      "name": "_setApprovalForAll",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 756,
                      "src": "4545:18:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
                        "typeString": "function (address,address,bool)"
                      }
                    },
                    "id": 294,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4545:52:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 295,
                  "nodeType": "ExpressionStatement",
                  "src": "4545:52:10"
                }
              ]
            },
            "documentation": {
              "id": 281,
              "nodeType": "StructuredDocumentation",
              "src": "4390:56:10",
              "text": " @dev See {IERC721-setApprovalForAll}."
            },
            "functionSelector": "a22cb465",
            "id": 297,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setApprovalForAll",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 287,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4526:8:10"
            },
            "parameters": {
              "id": 286,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 283,
                  "mutability": "mutable",
                  "name": "operator",
                  "nodeType": "VariableDeclaration",
                  "scope": 297,
                  "src": "4478:16:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 282,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4478:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 285,
                  "mutability": "mutable",
                  "name": "approved",
                  "nodeType": "VariableDeclaration",
                  "scope": 297,
                  "src": "4496:13:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 284,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4496:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4477:33:10"
            },
            "returnParameters": {
              "id": 288,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4535:0:10"
            },
            "scope": 830,
            "src": "4451:153:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1742
            ],
            "body": {
              "id": 314,
              "nodeType": "Block",
              "src": "4773:59:10",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 308,
                        "name": "_operatorApprovals",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 45,
                        "src": "4790:18:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                          "typeString": "mapping(address => mapping(address => bool))"
                        }
                      },
                      "id": 310,
                      "indexExpression": {
                        "id": 309,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 300,
                        "src": "4809:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4790:25:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      }
                    },
                    "id": 312,
                    "indexExpression": {
                      "id": 311,
                      "name": "operator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 302,
                      "src": "4816:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4790:35:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 307,
                  "id": 313,
                  "nodeType": "Return",
                  "src": "4783:42:10"
                }
              ]
            },
            "documentation": {
              "id": 298,
              "nodeType": "StructuredDocumentation",
              "src": "4610:55:10",
              "text": " @dev See {IERC721-isApprovedForAll}."
            },
            "functionSelector": "e985e9c5",
            "id": 315,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isApprovedForAll",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 304,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4749:8:10"
            },
            "parameters": {
              "id": 303,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 300,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 315,
                  "src": "4696:13:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 299,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4696:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 302,
                  "mutability": "mutable",
                  "name": "operator",
                  "nodeType": "VariableDeclaration",
                  "scope": 315,
                  "src": "4711:16:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 301,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4711:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4695:33:10"
            },
            "returnParameters": {
              "id": 307,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 306,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 315,
                  "src": "4767:4:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 305,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4767:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4766:6:10"
            },
            "scope": 830,
            "src": "4670:162:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1708
            ],
            "body": {
              "id": 341,
              "nodeType": "Block",
              "src": "5013:211:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 328,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2109,
                              "src": "5102:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 329,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5102:12:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 330,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 322,
                            "src": "5116:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 327,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 479,
                          "src": "5083:18:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 331,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5083:41:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                        "id": 332,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5126:51:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                          "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                        },
                        "value": "ERC721: transfer caller is not owner nor approved"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                          "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                        }
                      ],
                      "id": 326,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5075:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 333,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5075:103:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 334,
                  "nodeType": "ExpressionStatement",
                  "src": "5075:103:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 336,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 318,
                        "src": "5199:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 337,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 320,
                        "src": "5205:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 338,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "5209:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 335,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 700,
                      "src": "5189:9:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 339,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5189:28:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 340,
                  "nodeType": "ExpressionStatement",
                  "src": "5189:28:10"
                }
              ]
            },
            "documentation": {
              "id": 316,
              "nodeType": "StructuredDocumentation",
              "src": "4838:51:10",
              "text": " @dev See {IERC721-transferFrom}."
            },
            "functionSelector": "23b872dd",
            "id": 342,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 324,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5004:8:10"
            },
            "parameters": {
              "id": 323,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 318,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 342,
                  "src": "4925:12:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 317,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4925:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 320,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 342,
                  "src": "4947:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 319,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4947:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 322,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 342,
                  "src": "4967:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 321,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4967:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4915:73:10"
            },
            "returnParameters": {
              "id": 325,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5013:0:10"
            },
            "scope": 830,
            "src": "4894:330:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1698
            ],
            "body": {
              "id": 360,
              "nodeType": "Block",
              "src": "5413:56:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 354,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 345,
                        "src": "5440:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 355,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 347,
                        "src": "5446:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 356,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 349,
                        "src": "5450:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "",
                        "id": 357,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5459:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 353,
                      "name": "safeTransferFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        361,
                        391
                      ],
                      "referencedDeclaration": 391,
                      "src": "5423:16:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,address,uint256,bytes memory)"
                      }
                    },
                    "id": 358,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5423:39:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 359,
                  "nodeType": "ExpressionStatement",
                  "src": "5423:39:10"
                }
              ]
            },
            "documentation": {
              "id": 343,
              "nodeType": "StructuredDocumentation",
              "src": "5230:55:10",
              "text": " @dev See {IERC721-safeTransferFrom}."
            },
            "functionSelector": "42842e0e",
            "id": 361,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "safeTransferFrom",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 351,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5404:8:10"
            },
            "parameters": {
              "id": 350,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 345,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 361,
                  "src": "5325:12:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 344,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5325:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 347,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 361,
                  "src": "5347:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 346,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5347:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 349,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 361,
                  "src": "5367:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 348,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5367:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5315:73:10"
            },
            "returnParameters": {
              "id": 352,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5413:0:10"
            },
            "scope": 830,
            "src": "5290:179:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1754
            ],
            "body": {
              "id": 390,
              "nodeType": "Block",
              "src": "5686:169:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 376,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2109,
                              "src": "5723:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 377,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5723:12:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 378,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 368,
                            "src": "5737:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 375,
                          "name": "_isApprovedOrOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 479,
                          "src": "5704:18:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) view returns (bool)"
                          }
                        },
                        "id": 379,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5704:41:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                        "id": 380,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5747:51:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                          "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                        },
                        "value": "ERC721: transfer caller is not owner nor approved"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                          "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                        }
                      ],
                      "id": 374,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5696:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 381,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5696:103:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 382,
                  "nodeType": "ExpressionStatement",
                  "src": "5696:103:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 384,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 364,
                        "src": "5823:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 385,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 366,
                        "src": "5829:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 386,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 368,
                        "src": "5833:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 387,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 370,
                        "src": "5842:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 383,
                      "name": "_safeTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 420,
                      "src": "5809:13:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,address,uint256,bytes memory)"
                      }
                    },
                    "id": 388,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5809:39:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 389,
                  "nodeType": "ExpressionStatement",
                  "src": "5809:39:10"
                }
              ]
            },
            "documentation": {
              "id": 362,
              "nodeType": "StructuredDocumentation",
              "src": "5475:55:10",
              "text": " @dev See {IERC721-safeTransferFrom}."
            },
            "functionSelector": "b88d4fde",
            "id": 391,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "safeTransferFrom",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 372,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5677:8:10"
            },
            "parameters": {
              "id": 371,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 364,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 391,
                  "src": "5570:12:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 363,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5570:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 366,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 391,
                  "src": "5592:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 365,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5592:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 368,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 391,
                  "src": "5612:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 367,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5612:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 370,
                  "mutability": "mutable",
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "scope": 391,
                  "src": "5637:18:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 369,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5637:5:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5560:101:10"
            },
            "returnParameters": {
              "id": 373,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5686:0:10"
            },
            "scope": 830,
            "src": "5535:320:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 419,
              "nodeType": "Block",
              "src": "6858:166:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 404,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 394,
                        "src": "6878:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 405,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 396,
                        "src": "6884:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 406,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 398,
                        "src": "6888:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 403,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 700,
                      "src": "6868:9:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 407,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6868:28:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 408,
                  "nodeType": "ExpressionStatement",
                  "src": "6868:28:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 411,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 394,
                            "src": "6937:4:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 412,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 396,
                            "src": "6943:2:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 413,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 398,
                            "src": "6947:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 414,
                            "name": "_data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 400,
                            "src": "6956:5:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 410,
                          "name": "_checkOnERC721Received",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 818,
                          "src": "6914:22:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256,bytes memory) returns (bool)"
                          }
                        },
                        "id": 415,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6914:48:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                        "id": 416,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6964:52:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                          "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                        },
                        "value": "ERC721: transfer to non ERC721Receiver implementer"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                          "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                        }
                      ],
                      "id": 409,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6906:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 417,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6906:111:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 418,
                  "nodeType": "ExpressionStatement",
                  "src": "6906:111:10"
                }
              ]
            },
            "documentation": {
              "id": 392,
              "nodeType": "StructuredDocumentation",
              "src": "5861:851:10",
              "text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `_data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
            },
            "id": 420,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_safeTransfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 401,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 394,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 420,
                  "src": "6749:12:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 393,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6749:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 396,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 420,
                  "src": "6771:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 395,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6771:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 398,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 420,
                  "src": "6791:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 397,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6791:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 400,
                  "mutability": "mutable",
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "scope": 420,
                  "src": "6816:18:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 399,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "6816:5:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6739:101:10"
            },
            "returnParameters": {
              "id": 402,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6858:0:10"
            },
            "scope": 830,
            "src": "6717:307:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 437,
              "nodeType": "Block",
              "src": "7398:54:10",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 435,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "baseExpression": {
                        "id": 428,
                        "name": "_owners",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31,
                        "src": "7415:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                          "typeString": "mapping(uint256 => address)"
                        }
                      },
                      "id": 430,
                      "indexExpression": {
                        "id": 429,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 423,
                        "src": "7423:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "7415:16:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 433,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7443:1:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 432,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "7435:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 431,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7435:7:10",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 434,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7435:10:10",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7415:30:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 427,
                  "id": 436,
                  "nodeType": "Return",
                  "src": "7408:37:10"
                }
              ]
            },
            "documentation": {
              "id": 421,
              "nodeType": "StructuredDocumentation",
              "src": "7030:292:10",
              "text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."
            },
            "id": 438,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_exists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 424,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 423,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 438,
                  "src": "7344:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 422,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7344:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7343:17:10"
            },
            "returnParameters": {
              "id": 427,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 426,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 438,
                  "src": "7392:4:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 425,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7392:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7391:6:10"
            },
            "scope": 830,
            "src": "7327:125:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 478,
              "nodeType": "Block",
              "src": "7709:245:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 450,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 443,
                            "src": "7735:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 449,
                          "name": "_exists",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 438,
                          "src": "7727:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256) view returns (bool)"
                          }
                        },
                        "id": 451,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7727:16:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                        "id": 452,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7745:46:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c",
                          "typeString": "literal_string \"ERC721: operator query for nonexistent token\""
                        },
                        "value": "ERC721: operator query for nonexistent token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c",
                          "typeString": "literal_string \"ERC721: operator query for nonexistent token\""
                        }
                      ],
                      "id": 448,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7719:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 453,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7719:73:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 454,
                  "nodeType": "ExpressionStatement",
                  "src": "7719:73:10"
                },
                {
                  "assignments": [
                    456
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 456,
                      "mutability": "mutable",
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 478,
                      "src": "7802:13:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 455,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7802:7:10",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 461,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 459,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 443,
                        "src": "7833:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 457,
                        "name": "ERC721",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 830,
                        "src": "7818:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ERC721_$830_$",
                          "typeString": "type(contract ERC721)"
                        }
                      },
                      "id": 458,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 145,
                      "src": "7818:14:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 460,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7818:23:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7802:39:10"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 475,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 470,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 464,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 462,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 441,
                              "src": "7859:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 463,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 456,
                              "src": "7870:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "7859:16:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 469,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [
                                {
                                  "id": 466,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 443,
                                  "src": "7891:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 465,
                                "name": "getApproved",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 280,
                                "src": "7879:11:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                  "typeString": "function (uint256) view returns (address)"
                                }
                              },
                              "id": 467,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7879:20:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 468,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 441,
                              "src": "7903:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "7879:31:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "7859:51:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 472,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 456,
                              "src": "7931:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 473,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 441,
                              "src": "7938:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 471,
                            "name": "isApprovedForAll",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 315,
                            "src": "7914:16:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address,address) view returns (bool)"
                            }
                          },
                          "id": 474,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7914:32:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "7859:87:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "id": 476,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "7858:89:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 447,
                  "id": 477,
                  "nodeType": "Return",
                  "src": "7851:96:10"
                }
              ]
            },
            "documentation": {
              "id": 439,
              "nodeType": "StructuredDocumentation",
              "src": "7458:147:10",
              "text": " @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."
            },
            "id": 479,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isApprovedOrOwner",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 444,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 441,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 479,
                  "src": "7638:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 440,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7638:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 443,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 479,
                  "src": "7655:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 442,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7655:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7637:34:10"
            },
            "returnParameters": {
              "id": 447,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 446,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 479,
                  "src": "7703:4:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 445,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7703:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7702:6:10"
            },
            "scope": 830,
            "src": "7610:344:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 493,
              "nodeType": "Block",
              "src": "8349:43:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 488,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 482,
                        "src": "8369:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 489,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 484,
                        "src": "8373:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "",
                        "id": 490,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8382:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 487,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        494,
                        523
                      ],
                      "referencedDeclaration": 523,
                      "src": "8359:9:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,bytes memory)"
                      }
                    },
                    "id": 491,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8359:26:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 492,
                  "nodeType": "ExpressionStatement",
                  "src": "8359:26:10"
                }
              ]
            },
            "documentation": {
              "id": 480,
              "nodeType": "StructuredDocumentation",
              "src": "7960:319:10",
              "text": " @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
            },
            "id": 494,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_safeMint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 485,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 482,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 494,
                  "src": "8303:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 481,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8303:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 484,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 494,
                  "src": "8315:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 483,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8315:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8302:29:10"
            },
            "returnParameters": {
              "id": 486,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8349:0:10"
            },
            "scope": 830,
            "src": "8284:108:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 522,
              "nodeType": "Block",
              "src": "8728:196:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 505,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 497,
                        "src": "8744:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 506,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 499,
                        "src": "8748:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 504,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 580,
                      "src": "8738:5:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 507,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8738:18:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 508,
                  "nodeType": "ExpressionStatement",
                  "src": "8738:18:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 513,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8818:1:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 512,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "8810:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 511,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "8810:7:10",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 514,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8810:10:10",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 515,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 497,
                            "src": "8822:2:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 516,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 499,
                            "src": "8826:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 517,
                            "name": "_data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 501,
                            "src": "8835:5:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 510,
                          "name": "_checkOnERC721Received",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 818,
                          "src": "8787:22:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256,bytes memory) returns (bool)"
                          }
                        },
                        "id": 518,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8787:54:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                        "id": 519,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8855:52:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                          "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                        },
                        "value": "ERC721: transfer to non ERC721Receiver implementer"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                          "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                        }
                      ],
                      "id": 509,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8766:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 520,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8766:151:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 521,
                  "nodeType": "ExpressionStatement",
                  "src": "8766:151:10"
                }
              ]
            },
            "documentation": {
              "id": 495,
              "nodeType": "StructuredDocumentation",
              "src": "8398:210:10",
              "text": " @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
            },
            "id": 523,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_safeMint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 502,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 497,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 523,
                  "src": "8641:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 496,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8641:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 499,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 523,
                  "src": "8661:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 498,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8661:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 501,
                  "mutability": "mutable",
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "scope": 523,
                  "src": "8686:18:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 500,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "8686:5:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8631:79:10"
            },
            "returnParameters": {
              "id": 503,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8728:0:10"
            },
            "scope": 830,
            "src": "8613:311:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 579,
              "nodeType": "Block",
              "src": "9307:311:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 537,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 532,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 526,
                          "src": "9325:2:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 535,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9339:1:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 534,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9331:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 533,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9331:7:10",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 536,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9331:10:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9325:16:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
                        "id": 538,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9343:34:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
                          "typeString": "literal_string \"ERC721: mint to the zero address\""
                        },
                        "value": "ERC721: mint to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
                          "typeString": "literal_string \"ERC721: mint to the zero address\""
                        }
                      ],
                      "id": 531,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9317:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 539,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9317:61:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 540,
                  "nodeType": "ExpressionStatement",
                  "src": "9317:61:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 545,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "9396:17:10",
                        "subExpression": {
                          "arguments": [
                            {
                              "id": 543,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 528,
                              "src": "9405:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 542,
                            "name": "_exists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 438,
                            "src": "9397:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (uint256) view returns (bool)"
                            }
                          },
                          "id": 544,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9397:16:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
                        "id": 546,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9415:30:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
                          "typeString": "literal_string \"ERC721: token already minted\""
                        },
                        "value": "ERC721: token already minted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
                          "typeString": "literal_string \"ERC721: token already minted\""
                        }
                      ],
                      "id": 541,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9388:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 547,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9388:58:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 548,
                  "nodeType": "ExpressionStatement",
                  "src": "9388:58:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 552,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9486:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 551,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9478:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 550,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9478:7:10",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 553,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9478:10:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 554,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 526,
                        "src": "9490:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 555,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 528,
                        "src": "9494:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 549,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 829,
                      "src": "9457:20:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 556,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9457:45:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 557,
                  "nodeType": "ExpressionStatement",
                  "src": "9457:45:10"
                },
                {
                  "expression": {
                    "id": 562,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 558,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "9513:9:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 560,
                      "indexExpression": {
                        "id": 559,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 526,
                        "src": "9523:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9513:13:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 561,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9530:1:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "9513:18:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 563,
                  "nodeType": "ExpressionStatement",
                  "src": "9513:18:10"
                },
                {
                  "expression": {
                    "id": 568,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 564,
                        "name": "_owners",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31,
                        "src": "9541:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                          "typeString": "mapping(uint256 => address)"
                        }
                      },
                      "id": 566,
                      "indexExpression": {
                        "id": 565,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 528,
                        "src": "9549:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9541:16:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 567,
                      "name": "to",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 526,
                      "src": "9560:2:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9541:21:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 569,
                  "nodeType": "ExpressionStatement",
                  "src": "9541:21:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 573,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9595:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9587:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 571,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9587:7:10",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 574,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9587:10:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 575,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 526,
                        "src": "9599:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 576,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 528,
                        "src": "9603:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 570,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1654,
                      "src": "9578:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9578:33:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 578,
                  "nodeType": "EmitStatement",
                  "src": "9573:38:10"
                }
              ]
            },
            "documentation": {
              "id": 524,
              "nodeType": "StructuredDocumentation",
              "src": "8930:311:10",
              "text": " @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."
            },
            "id": 580,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 529,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 526,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 580,
                  "src": "9261:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 525,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9261:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 528,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 580,
                  "src": "9273:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 527,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9273:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9260:29:10"
            },
            "returnParameters": {
              "id": 530,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9307:0:10"
            },
            "scope": 830,
            "src": "9246:372:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 630,
              "nodeType": "Block",
              "src": "9884:299:10",
              "statements": [
                {
                  "assignments": [
                    587
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 587,
                      "mutability": "mutable",
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 630,
                      "src": "9894:13:10",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 586,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9894:7:10",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 592,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 590,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 583,
                        "src": "9925:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 588,
                        "name": "ERC721",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 830,
                        "src": "9910:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ERC721_$830_$",
                          "typeString": "type(contract ERC721)"
                        }
                      },
                      "id": 589,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 145,
                      "src": "9910:14:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 591,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9910:23:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9894:39:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 594,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 587,
                        "src": "9965:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 597,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9980:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 596,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9972:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 595,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9972:7:10",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 598,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9972:10:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 599,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 583,
                        "src": "9984:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 593,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 829,
                      "src": "9944:20:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 600,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9944:48:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 601,
                  "nodeType": "ExpressionStatement",
                  "src": "9944:48:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 605,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10047:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 604,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "10039:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 603,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "10039:7:10",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 606,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10039:10:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 607,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 583,
                        "src": "10051:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 602,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 724,
                      "src": "10030:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 608,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10030:29:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 609,
                  "nodeType": "ExpressionStatement",
                  "src": "10030:29:10"
                },
                {
                  "expression": {
                    "id": 614,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 610,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "10070:9:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 612,
                      "indexExpression": {
                        "id": 611,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 587,
                        "src": "10080:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10070:16:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 613,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10090:1:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "10070:21:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 615,
                  "nodeType": "ExpressionStatement",
                  "src": "10070:21:10"
                },
                {
                  "expression": {
                    "id": 619,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "10101:23:10",
                    "subExpression": {
                      "baseExpression": {
                        "id": 616,
                        "name": "_owners",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31,
                        "src": "10108:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                          "typeString": "mapping(uint256 => address)"
                        }
                      },
                      "id": 618,
                      "indexExpression": {
                        "id": 617,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 583,
                        "src": "10116:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10108:16:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 620,
                  "nodeType": "ExpressionStatement",
                  "src": "10101:23:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 622,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 587,
                        "src": "10149:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 625,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10164:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 624,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "10156:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 623,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "10156:7:10",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 626,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10156:10:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 627,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 583,
                        "src": "10168:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 621,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1654,
                      "src": "10140:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 628,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10140:36:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 629,
                  "nodeType": "EmitStatement",
                  "src": "10135:41:10"
                }
              ]
            },
            "documentation": {
              "id": 581,
              "nodeType": "StructuredDocumentation",
              "src": "9624:206:10",
              "text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
            },
            "id": 631,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 584,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 583,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 631,
                  "src": "9850:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 582,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9850:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9849:17:10"
            },
            "returnParameters": {
              "id": 585,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9884:0:10"
            },
            "scope": 830,
            "src": "9835:348:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 699,
              "nodeType": "Block",
              "src": "10616:451:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 647,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 644,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 638,
                              "src": "10649:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 642,
                              "name": "ERC721",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 830,
                              "src": "10634:6:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC721_$830_$",
                                "typeString": "type(contract ERC721)"
                              }
                            },
                            "id": 643,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "ownerOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 145,
                            "src": "10634:14:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view returns (address)"
                            }
                          },
                          "id": 645,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10634:23:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 646,
                          "name": "from",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 634,
                          "src": "10661:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "10634:31:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e",
                        "id": 648,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10667:43:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950",
                          "typeString": "literal_string \"ERC721: transfer of token that is not own\""
                        },
                        "value": "ERC721: transfer of token that is not own"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950",
                          "typeString": "literal_string \"ERC721: transfer of token that is not own\""
                        }
                      ],
                      "id": 641,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10626:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 649,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10626:85:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 650,
                  "nodeType": "ExpressionStatement",
                  "src": "10626:85:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 657,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 652,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 636,
                          "src": "10729:2:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 655,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10743:1:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 654,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10735:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 653,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10735:7:10",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 656,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10735:10:10",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "10729:16:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373",
                        "id": 658,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10747:38:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
                          "typeString": "literal_string \"ERC721: transfer to the zero address\""
                        },
                        "value": "ERC721: transfer to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
                          "typeString": "literal_string \"ERC721: transfer to the zero address\""
                        }
                      ],
                      "id": 651,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10721:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 659,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10721:65:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 660,
                  "nodeType": "ExpressionStatement",
                  "src": "10721:65:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 662,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 634,
                        "src": "10818:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 663,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 636,
                        "src": "10824:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 664,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 638,
                        "src": "10828:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 661,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 829,
                      "src": "10797:20:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 665,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10797:39:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 666,
                  "nodeType": "ExpressionStatement",
                  "src": "10797:39:10"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 670,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10915:1:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 669,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "10907:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 668,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "10907:7:10",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 671,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10907:10:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 672,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 638,
                        "src": "10919:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 667,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 724,
                      "src": "10898:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 673,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10898:29:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 674,
                  "nodeType": "ExpressionStatement",
                  "src": "10898:29:10"
                },
                {
                  "expression": {
                    "id": 679,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 675,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "10938:9:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 677,
                      "indexExpression": {
                        "id": 676,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 634,
                        "src": "10948:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10938:15:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 678,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10957:1:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "10938:20:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 680,
                  "nodeType": "ExpressionStatement",
                  "src": "10938:20:10"
                },
                {
                  "expression": {
                    "id": 685,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 681,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 35,
                        "src": "10968:9:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 683,
                      "indexExpression": {
                        "id": 682,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 636,
                        "src": "10978:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10968:13:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 684,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10985:1:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "10968:18:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 686,
                  "nodeType": "ExpressionStatement",
                  "src": "10968:18:10"
                },
                {
                  "expression": {
                    "id": 691,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 687,
                        "name": "_owners",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31,
                        "src": "10996:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                          "typeString": "mapping(uint256 => address)"
                        }
                      },
                      "id": 689,
                      "indexExpression": {
                        "id": 688,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 638,
                        "src": "11004:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10996:16:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 690,
                      "name": "to",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 636,
                      "src": "11015:2:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "10996:21:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 692,
                  "nodeType": "ExpressionStatement",
                  "src": "10996:21:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 694,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 634,
                        "src": "11042:4:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 695,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 636,
                        "src": "11048:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 696,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 638,
                        "src": "11052:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 693,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1654,
                      "src": "11033:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 697,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11033:27:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 698,
                  "nodeType": "EmitStatement",
                  "src": "11028:32:10"
                }
              ]
            },
            "documentation": {
              "id": 632,
              "nodeType": "StructuredDocumentation",
              "src": "10189:313:10",
              "text": " @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
            },
            "id": 700,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 639,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 634,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 700,
                  "src": "10535:12:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 633,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10535:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 636,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 700,
                  "src": "10557:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 635,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10557:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 638,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 700,
                  "src": "10577:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 637,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10577:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10525:73:10"
            },
            "returnParameters": {
              "id": 640,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10616:0:10"
            },
            "scope": 830,
            "src": "10507:560:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 723,
              "nodeType": "Block",
              "src": "11242:107:10",
              "statements": [
                {
                  "expression": {
                    "id": 712,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 708,
                        "name": "_tokenApprovals",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 39,
                        "src": "11252:15:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                          "typeString": "mapping(uint256 => address)"
                        }
                      },
                      "id": 710,
                      "indexExpression": {
                        "id": 709,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 705,
                        "src": "11268:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "11252:24:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 711,
                      "name": "to",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 703,
                      "src": "11279:2:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "11252:29:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 713,
                  "nodeType": "ExpressionStatement",
                  "src": "11252:29:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 717,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 705,
                            "src": "11320:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 715,
                            "name": "ERC721",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 830,
                            "src": "11305:6:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_ERC721_$830_$",
                              "typeString": "type(contract ERC721)"
                            }
                          },
                          "id": 716,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ownerOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 145,
                          "src": "11305:14:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                            "typeString": "function (uint256) view returns (address)"
                          }
                        },
                        "id": 718,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11305:23:10",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 719,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 703,
                        "src": "11330:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 720,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 705,
                        "src": "11334:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 714,
                      "name": "Approval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1663,
                      "src": "11296:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 721,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11296:46:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 722,
                  "nodeType": "EmitStatement",
                  "src": "11291:51:10"
                }
              ]
            },
            "documentation": {
              "id": 701,
              "nodeType": "StructuredDocumentation",
              "src": "11073:100:10",
              "text": " @dev Approve `to` to operate on `tokenId`\n Emits a {Approval} event."
            },
            "id": 724,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_approve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 706,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 703,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 724,
                  "src": "11196:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 702,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11196:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 705,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 724,
                  "src": "11208:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 704,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11208:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11195:29:10"
            },
            "returnParameters": {
              "id": 707,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11242:0:10"
            },
            "scope": 830,
            "src": "11178:171:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 755,
              "nodeType": "Block",
              "src": "11607:184:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 737,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 735,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 727,
                          "src": "11625:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 736,
                          "name": "operator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 729,
                          "src": "11634:8:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "11625:17:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
                        "id": 738,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11644:27:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
                          "typeString": "literal_string \"ERC721: approve to caller\""
                        },
                        "value": "ERC721: approve to caller"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
                          "typeString": "literal_string \"ERC721: approve to caller\""
                        }
                      ],
                      "id": 734,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "11617:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 739,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11617:55:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 740,
                  "nodeType": "ExpressionStatement",
                  "src": "11617:55:10"
                },
                {
                  "expression": {
                    "id": 747,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 741,
                          "name": "_operatorApprovals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 45,
                          "src": "11682:18:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(address => bool))"
                          }
                        },
                        "id": 744,
                        "indexExpression": {
                          "id": 742,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 727,
                          "src": "11701:5:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "11682:25:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 745,
                      "indexExpression": {
                        "id": 743,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 729,
                        "src": "11708:8:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "11682:35:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 746,
                      "name": "approved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 731,
                      "src": "11720:8:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "11682:46:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 748,
                  "nodeType": "ExpressionStatement",
                  "src": "11682:46:10"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 750,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 727,
                        "src": "11758:5:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 751,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 729,
                        "src": "11765:8:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 752,
                        "name": "approved",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 731,
                        "src": "11775:8:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 749,
                      "name": "ApprovalForAll",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1672,
                      "src": "11743:14:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
                        "typeString": "function (address,address,bool)"
                      }
                    },
                    "id": 753,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11743:41:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 754,
                  "nodeType": "EmitStatement",
                  "src": "11738:46:10"
                }
              ]
            },
            "documentation": {
              "id": 725,
              "nodeType": "StructuredDocumentation",
              "src": "11355:124:10",
              "text": " @dev Approve `operator` to operate on all of `owner` tokens\n Emits a {ApprovalForAll} event."
            },
            "id": 756,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_setApprovalForAll",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 732,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 727,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 756,
                  "src": "11521:13:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 726,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11521:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 729,
                  "mutability": "mutable",
                  "name": "operator",
                  "nodeType": "VariableDeclaration",
                  "scope": 756,
                  "src": "11544:16:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 728,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11544:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 731,
                  "mutability": "mutable",
                  "name": "approved",
                  "nodeType": "VariableDeclaration",
                  "scope": 756,
                  "src": "11570:13:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 730,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11570:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11511:78:10"
            },
            "returnParameters": {
              "id": 733,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11607:0:10"
            },
            "scope": 830,
            "src": "11484:307:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 817,
              "nodeType": "Block",
              "src": "12501:622:10",
              "statements": [
                {
                  "condition": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 770,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 761,
                        "src": "12515:2:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 771,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1820,
                      "src": "12515:13:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 772,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12515:15:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 815,
                    "nodeType": "Block",
                    "src": "13081:36:10",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 813,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "13102:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 769,
                        "id": 814,
                        "nodeType": "Return",
                        "src": "13095:11:10"
                      }
                    ]
                  },
                  "id": 816,
                  "nodeType": "IfStatement",
                  "src": "12511:606:10",
                  "trueBody": {
                    "id": 812,
                    "nodeType": "Block",
                    "src": "12532:543:10",
                    "statements": [
                      {
                        "clauses": [
                          {
                            "block": {
                              "id": 792,
                              "nodeType": "Block",
                              "src": "12647:91:10",
                              "statements": [
                                {
                                  "expression": {
                                    "commonType": {
                                      "typeIdentifier": "t_bytes4",
                                      "typeString": "bytes4"
                                    },
                                    "id": 790,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 786,
                                      "name": "retval",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 784,
                                      "src": "12672:6:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "expression": {
                                        "expression": {
                                          "id": 787,
                                          "name": "IERC721Receiver",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1773,
                                          "src": "12682:15:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1773_$",
                                            "typeString": "type(contract IERC721Receiver)"
                                          }
                                        },
                                        "id": 788,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "onERC721Received",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1772,
                                        "src": "12682:32:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
                                          "typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
                                        }
                                      },
                                      "id": 789,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "selector",
                                      "nodeType": "MemberAccess",
                                      "src": "12682:41:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    },
                                    "src": "12672:51:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "functionReturnParameters": 769,
                                  "id": 791,
                                  "nodeType": "Return",
                                  "src": "12665:58:10"
                                }
                              ]
                            },
                            "errorName": "",
                            "id": 793,
                            "nodeType": "TryCatchClause",
                            "parameters": {
                              "id": 785,
                              "nodeType": "ParameterList",
                              "parameters": [
                                {
                                  "constant": false,
                                  "id": 784,
                                  "mutability": "mutable",
                                  "name": "retval",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 793,
                                  "src": "12632:13:10",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  "typeName": {
                                    "id": 783,
                                    "name": "bytes4",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "12632:6:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes4",
                                      "typeString": "bytes4"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "src": "12631:15:10"
                            },
                            "src": "12623:115:10"
                          },
                          {
                            "block": {
                              "id": 809,
                              "nodeType": "Block",
                              "src": "12767:298:10",
                              "statements": [
                                {
                                  "condition": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 800,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "expression": {
                                        "id": 797,
                                        "name": "reason",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 795,
                                        "src": "12789:6:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 798,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "src": "12789:13:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 799,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "12806:1:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "12789:18:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "falseBody": {
                                    "id": 807,
                                    "nodeType": "Block",
                                    "src": "12916:135:10",
                                    "statements": [
                                      {
                                        "AST": {
                                          "nodeType": "YulBlock",
                                          "src": "12947:86:10",
                                          "statements": [
                                            {
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "kind": "number",
                                                        "nodeType": "YulLiteral",
                                                        "src": "12984:2:10",
                                                        "type": "",
                                                        "value": "32"
                                                      },
                                                      {
                                                        "name": "reason",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "12988:6:10"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "12980:3:10"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "12980:15:10"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "reason",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "13003:6:10"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "mload",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "12997:5:10"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "12997:13:10"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "revert",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "12973:6:10"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "12973:38:10"
                                              },
                                              "nodeType": "YulExpressionStatement",
                                              "src": "12973:38:10"
                                            }
                                          ]
                                        },
                                        "evmVersion": "istanbul",
                                        "externalReferences": [
                                          {
                                            "declaration": 795,
                                            "isOffset": false,
                                            "isSlot": false,
                                            "src": "12988:6:10",
                                            "valueSize": 1
                                          },
                                          {
                                            "declaration": 795,
                                            "isOffset": false,
                                            "isSlot": false,
                                            "src": "13003:6:10",
                                            "valueSize": 1
                                          }
                                        ],
                                        "id": 806,
                                        "nodeType": "InlineAssembly",
                                        "src": "12938:95:10"
                                      }
                                    ]
                                  },
                                  "id": 808,
                                  "nodeType": "IfStatement",
                                  "src": "12785:266:10",
                                  "trueBody": {
                                    "id": 805,
                                    "nodeType": "Block",
                                    "src": "12809:101:10",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                                              "id": 802,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "12838:52:10",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                                              },
                                              "value": "ERC721: transfer to non ERC721Receiver implementer"
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                                              }
                                            ],
                                            "id": 801,
                                            "name": "revert",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [
                                              -19,
                                              -19
                                            ],
                                            "referencedDeclaration": -19,
                                            "src": "12831:6:10",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                              "typeString": "function (string memory) pure"
                                            }
                                          },
                                          "id": 803,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "12831:60:10",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_tuple$__$",
                                            "typeString": "tuple()"
                                          }
                                        },
                                        "id": 804,
                                        "nodeType": "ExpressionStatement",
                                        "src": "12831:60:10"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "errorName": "",
                            "id": 810,
                            "nodeType": "TryCatchClause",
                            "parameters": {
                              "id": 796,
                              "nodeType": "ParameterList",
                              "parameters": [
                                {
                                  "constant": false,
                                  "id": 795,
                                  "mutability": "mutable",
                                  "name": "reason",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 810,
                                  "src": "12746:19:10",
                                  "stateVariable": false,
                                  "storageLocation": "memory",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes"
                                  },
                                  "typeName": {
                                    "id": 794,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "12746:5:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_storage_ptr",
                                      "typeString": "bytes"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "src": "12745:21:10"
                            },
                            "src": "12739:326:10"
                          }
                        ],
                        "externalCall": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 777,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2109,
                                "src": "12587:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 778,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12587:12:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 779,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 759,
                              "src": "12601:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 780,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 763,
                              "src": "12607:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 781,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 765,
                              "src": "12616:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 774,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 761,
                                  "src": "12566:2:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 773,
                                "name": "IERC721Receiver",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1773,
                                "src": "12550:15:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1773_$",
                                  "typeString": "type(contract IERC721Receiver)"
                                }
                              },
                              "id": 775,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12550:19:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC721Receiver_$1773",
                                "typeString": "contract IERC721Receiver"
                              }
                            },
                            "id": 776,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "onERC721Received",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1772,
                            "src": "12550:36:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
                              "typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
                            }
                          },
                          "id": 782,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12550:72:10",
                          "tryCall": true,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "id": 811,
                        "nodeType": "TryStatement",
                        "src": "12546:519:10"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 757,
              "nodeType": "StructuredDocumentation",
              "src": "11797:542:10",
              "text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param _data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
            },
            "id": 818,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_checkOnERC721Received",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 766,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 759,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 818,
                  "src": "12385:12:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 758,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12385:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 761,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 818,
                  "src": "12407:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 760,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12407:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 763,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 818,
                  "src": "12427:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 762,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12427:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 765,
                  "mutability": "mutable",
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "scope": 818,
                  "src": "12452:18:10",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 764,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "12452:5:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12375:101:10"
            },
            "returnParameters": {
              "id": 769,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 768,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 818,
                  "src": "12495:4:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 767,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "12495:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12494:6:10"
            },
            "scope": 830,
            "src": "12344:779:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 828,
              "nodeType": "Block",
              "src": "13799:2:10",
              "statements": []
            },
            "documentation": {
              "id": 819,
              "nodeType": "StructuredDocumentation",
              "src": "13129:545:10",
              "text": " @dev Hook that is called before any token transfer. This includes minting\n and burning.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, ``from``'s `tokenId` will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 829,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 826,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 821,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 829,
                  "src": "13718:12:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 820,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13718:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 823,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 829,
                  "src": "13740:10:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 822,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13740:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 825,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 829,
                  "src": "13760:15:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 824,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13760:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13708:73:10"
            },
            "returnParameters": {
              "id": 827,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13799:0:10"
            },
            "scope": 830,
            "src": "13679:122:10",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 831,
        "src": "790:13013:10"
      }
    ],
    "src": "92:13711:10"
  },
  "bytecode": "60806040523480156200001157600080fd5b506040516200156d3803806200156d8339810160408190526200003491620001b9565b81516200004990600090602085019062000068565b5080516200005f90600190602084019062000068565b50505062000273565b828054620000769062000220565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c6200025d565b6040516020601f8401601f19168201810183811183821017156200016457620001646200025d565b60405283825285840181018710156200017b578485fd5b8492505b838310156200019e57858301810151828401820152918201916200017f565b83831115620001af57848185840101525b5095945050505050565b60008060408385031215620001cc578182fd5b82516001600160401b0380821115620001e3578384fd5b620001f1868387016200010e565b9350602085015191508082111562000207578283fd5b5062000216858286016200010e565b9150509250929050565b6002810460018216806200023557607f821691505b602082108114156200025757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6112ea80620002836000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101a8578063b88d4fde146101bb578063c87b56dd146101ce578063e985e9c5146101e1576100cf565b80636352211e1461016d57806370a082311461018057806395d89b41146101a0576100cf565b806301ffc9a7146100d457806306fdde03146100fd578063081812fc14610112578063095ea7b31461013257806323b872dd1461014757806342842e0e1461015a575b600080fd5b6100e76100e2366004610cde565b6101f4565b6040516100f49190610dda565b60405180910390f35b61010561023c565b6040516100f49190610de5565b610125610120366004610d16565b6102ce565b6040516100f49190610d89565b610145610140366004610cb5565b61031a565b005b610145610155366004610b74565b6103b2565b610145610168366004610b74565b6103ea565b61012561017b366004610d16565b610405565b61019361018e366004610b28565b61043a565b6040516100f49190611177565b61010561047e565b6101456101b6366004610c7b565b61048d565b6101456101c9366004610baf565b6104a3565b6101056101dc366004610d16565b6104e2565b6100e76101ef366004610b42565b610565565b60006001600160e01b031982166380ac58cd60e01b148061022557506001600160e01b03198216635b5e139f60e01b145b80610234575061023482610593565b90505b919050565b60606000805461024b906111ef565b80601f0160208091040260200160405190810160405280929190818152602001828054610277906111ef565b80156102c45780601f10610299576101008083540402835291602001916102c4565b820191906000526020600020905b8154815290600101906020018083116102a757829003601f168201915b5050505050905090565b60006102d9826105ac565b6102fe5760405162461bcd60e51b81526004016102f590611001565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061032582610405565b9050806001600160a01b0316836001600160a01b031614156103595760405162461bcd60e51b81526004016102f5906110e5565b806001600160a01b031661036b6105c9565b6001600160a01b031614806103875750610387816101ef6105c9565b6103a35760405162461bcd60e51b81526004016102f590610f11565b6103ad83836105cd565b505050565b6103c36103bd6105c9565b8261063b565b6103df5760405162461bcd60e51b81526004016102f590611126565b6103ad8383836106c0565b6103ad838383604051806020016040528060008152506104a3565b6000818152600260205260408120546001600160a01b0316806102345760405162461bcd60e51b81526004016102f590610fb8565b60006001600160a01b0382166104625760405162461bcd60e51b81526004016102f590610f6e565b506001600160a01b031660009081526003602052604090205490565b60606001805461024b906111ef565b61049f6104986105c9565b83836107ed565b5050565b6104b46104ae6105c9565b8361063b565b6104d05760405162461bcd60e51b81526004016102f590611126565b6104dc84848484610890565b50505050565b60606104ed826105ac565b6105095760405162461bcd60e51b81526004016102f590611096565b60006105136108c3565b90506000815111610533576040518060200160405280600081525061055e565b8061053d846108d5565b60405160200161054e929190610d5a565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061060282610405565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610646826105ac565b6106625760405162461bcd60e51b81526004016102f590610ec5565b600061066d83610405565b9050806001600160a01b0316846001600160a01b031614806106a85750836001600160a01b031661069d846102ce565b6001600160a01b0316145b806106b857506106b88185610565565b949350505050565b826001600160a01b03166106d382610405565b6001600160a01b0316146106f95760405162461bcd60e51b81526004016102f59061104d565b6001600160a01b03821661071f5760405162461bcd60e51b81526004016102f590610e4a565b61072a8383836103ad565b6107356000826105cd565b6001600160a01b038316600090815260036020526040812080546001929061075e9084906111ac565b90915550506001600160a01b038216600090815260036020526040812080546001929061078c908490611180565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b0316141561081f5760405162461bcd60e51b81526004016102f590610e8e565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610883908590610dda565b60405180910390a3505050565b61089b8484846106c0565b6108a7848484846109f0565b6104dc5760405162461bcd60e51b81526004016102f590610df8565b60408051602081019091526000815290565b6060816108fa57506040805180820190915260018152600360fc1b6020820152610237565b8160005b8115610924578061090e8161122a565b915061091d9050600a83611198565b91506108fe565b60008167ffffffffffffffff81111561094d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610977576020820181803683370190505b5090505b84156106b85761098c6001836111ac565b9150610999600a86611245565b6109a4906030611180565b60f81b8183815181106109c757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506109e9600a86611198565b945061097b565b6000610a04846001600160a01b0316610b0b565b15610b0057836001600160a01b031663150b7a02610a206105c9565b8786866040518563ffffffff1660e01b8152600401610a429493929190610d9d565b602060405180830381600087803b158015610a5c57600080fd5b505af1925050508015610a8c575060408051601f3d908101601f19168201909252610a8991810190610cfa565b60015b610ae6573d808015610aba576040519150601f19603f3d011682016040523d82523d6000602084013e610abf565b606091505b508051610ade5760405162461bcd60e51b81526004016102f590610df8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506106b8565b506001949350505050565b3b151590565b80356001600160a01b038116811461023757600080fd5b600060208284031215610b39578081fd5b61055e82610b11565b60008060408385031215610b54578081fd5b610b5d83610b11565b9150610b6b60208401610b11565b90509250929050565b600080600060608486031215610b88578081fd5b610b9184610b11565b9250610b9f60208501610b11565b9150604084013590509250925092565b60008060008060808587031215610bc4578081fd5b610bcd85610b11565b93506020610bdc818701610b11565b935060408601359250606086013567ffffffffffffffff80821115610bff578384fd5b818801915088601f830112610c12578384fd5b813581811115610c2457610c24611285565b604051601f8201601f1916810185018381118282101715610c4757610c47611285565b60405281815283820185018b1015610c5d578586fd5b81858501868301379081019093019390935250939692955090935050565b60008060408385031215610c8d578182fd5b610c9683610b11565b915060208301358015158114610caa578182fd5b809150509250929050565b60008060408385031215610cc7578182fd5b610cd083610b11565b946020939093013593505050565b600060208284031215610cef578081fd5b813561055e8161129b565b600060208284031215610d0b578081fd5b815161055e8161129b565b600060208284031215610d27578081fd5b5035919050565b60008151808452610d468160208601602086016111c3565b601f01601f19169290920160200192915050565b60008351610d6c8184602088016111c3565b835190830190610d808183602088016111c3565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610dd090830184610d2e565b9695505050505050565b901515815260200190565b60006020825261055e6020830184610d2e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b90815260200190565b6000821982111561119357611193611259565b500190565b6000826111a7576111a761126f565b500490565b6000828210156111be576111be611259565b500390565b60005b838110156111de5781810151838201526020016111c6565b838111156104dc5750506000910152565b60028104600182168061120357607f821691505b6020821081141561122457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561123e5761123e611259565b5060010190565b6000826112545761125461126f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146112b157600080fd5b5056fea264697066735822122079fdf9e31c1858369a452ce38d8f18786a44c10af9bba99271578eb148ab822564736f6c63430008000033",
  "bytecodeSha1": "9f5e3ffdf3fdaad98e3a068cb7bdc3d85c6087f1",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.0+commit.c7dfd78e"
  },
  "contractName": "ERC721",
  "coverageMap": {
    "branches": {
      "1": {},
      "10": {
        "ERC721._checkOnERC721Received": {
          "66": [
            12515,
            12530,
            false
          ]
        },
        "ERC721._isApprovedOrOwner": {
          "61": [
            7727,
            7743,
            true
          ]
        },
        "ERC721._safeTransfer": {
          "65": [
            6914,
            6962,
            true
          ]
        },
        "ERC721._setApprovalForAll": {
          "64": [
            11625,
            11642,
            true
          ]
        },
        "ERC721._transfer": {
          "62": [
            10634,
            10665,
            true
          ],
          "63": [
            10729,
            10745,
            true
          ]
        },
        "ERC721.approve": {
          "52": [
            3842,
            3853,
            true
          ],
          "53": [
            3923,
            3944,
            true
          ],
          "54": [
            3948,
            3985,
            true
          ]
        },
        "ERC721.balanceOf": {
          "57": [
            2196,
            2215,
            true
          ]
        },
        "ERC721.getApproved": {
          "51": [
            4270,
            4286,
            true
          ]
        },
        "ERC721.ownerOf": {
          "56": [
            2500,
            2519,
            true
          ]
        },
        "ERC721.safeTransferFrom": {
          "58": [
            5704,
            5745,
            true
          ]
        },
        "ERC721.tokenURI": {
          "59": [
            3092,
            3108,
            true
          ],
          "60": [
            3222,
            3247,
            true
          ]
        },
        "ERC721.transferFrom": {
          "55": [
            5083,
            5124,
            true
          ]
        }
      },
      "2": {},
      "3": {},
      "4": {},
      "5": {},
      "6": {
        "Strings.toString": {
          "67": [
            601,
            611,
            false
          ]
        }
      },
      "8": {},
      "9": {}
    },
    "statements": {
      "1": {},
      "10": {
        "ERC721._approve": {
          "23": [
            11252,
            11281
          ],
          "24": [
            11291,
            11342
          ]
        },
        "ERC721._baseURI": {
          "40": [
            3632,
            3641
          ]
        },
        "ERC721._checkOnERC721Received": {
          "47": [
            12831,
            12891
          ],
          "48": [
            12665,
            12723
          ],
          "49": [
            13095,
            13106
          ]
        },
        "ERC721._exists": {
          "21": [
            7408,
            7445
          ]
        },
        "ERC721._isApprovedOrOwner": {
          "25": [
            7719,
            7792
          ],
          "26": [
            7851,
            7947
          ]
        },
        "ERC721._safeTransfer": {
          "38": [
            6868,
            6896
          ],
          "39": [
            6906,
            7017
          ]
        },
        "ERC721._setApprovalForAll": {
          "35": [
            11617,
            11672
          ],
          "36": [
            11682,
            11728
          ],
          "37": [
            11738,
            11784
          ]
        },
        "ERC721._transfer": {
          "27": [
            10626,
            10711
          ],
          "28": [
            10721,
            10786
          ],
          "29": [
            10797,
            10836
          ],
          "30": [
            10898,
            10927
          ],
          "31": [
            10938,
            10958
          ],
          "32": [
            10968,
            10986
          ],
          "33": [
            10996,
            11017
          ],
          "34": [
            11028,
            11060
          ]
        },
        "ERC721.approve": {
          "4": [
            3834,
            3891
          ],
          "5": [
            3902,
            4067
          ],
          "6": [
            4078,
            4099
          ]
        },
        "ERC721.balanceOf": {
          "11": [
            2188,
            2262
          ],
          "12": [
            2272,
            2295
          ]
        },
        "ERC721.getApproved": {
          "2": [
            4262,
            4335
          ],
          "3": [
            4346,
            4377
          ]
        },
        "ERC721.isApprovedForAll": {
          "19": [
            4783,
            4825
          ]
        },
        "ERC721.name": {
          "1": [
            2735,
            2747
          ]
        },
        "ERC721.ownerOf": {
          "10": [
            2492,
            2565
          ]
        },
        "ERC721.safeTransferFrom": {
          "9": [
            5423,
            5462
          ],
          "15": [
            5696,
            5799
          ],
          "16": [
            5809,
            5848
          ]
        },
        "ERC721.setApprovalForAll": {
          "14": [
            4545,
            4597
          ]
        },
        "ERC721.supportsInterface": {
          "0": [
            1856,
            2031
          ]
        },
        "ERC721.symbol": {
          "13": [
            2899,
            2913
          ]
        },
        "ERC721.tokenURI": {
          "17": [
            3084,
            3160
          ],
          "18": [
            3215,
            3308
          ]
        },
        "ERC721.transferFrom": {
          "7": [
            5075,
            5178
          ],
          "8": [
            5189,
            5217
          ]
        }
      },
      "2": {},
      "3": {},
      "4": {
        "Address.isContract": {
          "50": [
            1126,
            1141
          ]
        }
      },
      "5": {
        "Context._msgSender": {
          "22": [
            712,
            729
          ]
        }
      },
      "6": {
        "Strings.toString": {
          "41": [
            627,
            637
          ],
          "42": [
            743,
            751
          ],
          "43": [
            765,
            775
          ],
          "44": [
            877,
            888
          ],
          "45": [
            902,
            958
          ],
          "46": [
            972,
            983
          ]
        }
      },
      "8": {
        "ERC165.supportsInterface": {
          "20": [
            930,
            977
          ]
        }
      },
      "9": {}
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.4.0/Address",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/ERC165",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/IERC165",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/IERC721",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/IERC721Metadata",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/IERC721Receiver",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/Strings"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101a8578063b88d4fde146101bb578063c87b56dd146101ce578063e985e9c5146101e1576100cf565b80636352211e1461016d57806370a082311461018057806395d89b41146101a0576100cf565b806301ffc9a7146100d457806306fdde03146100fd578063081812fc14610112578063095ea7b31461013257806323b872dd1461014757806342842e0e1461015a575b600080fd5b6100e76100e2366004610cde565b6101f4565b6040516100f49190610dda565b60405180910390f35b61010561023c565b6040516100f49190610de5565b610125610120366004610d16565b6102ce565b6040516100f49190610d89565b610145610140366004610cb5565b61031a565b005b610145610155366004610b74565b6103b2565b610145610168366004610b74565b6103ea565b61012561017b366004610d16565b610405565b61019361018e366004610b28565b61043a565b6040516100f49190611177565b61010561047e565b6101456101b6366004610c7b565b61048d565b6101456101c9366004610baf565b6104a3565b6101056101dc366004610d16565b6104e2565b6100e76101ef366004610b42565b610565565b60006001600160e01b031982166380ac58cd60e01b148061022557506001600160e01b03198216635b5e139f60e01b145b80610234575061023482610593565b90505b919050565b60606000805461024b906111ef565b80601f0160208091040260200160405190810160405280929190818152602001828054610277906111ef565b80156102c45780601f10610299576101008083540402835291602001916102c4565b820191906000526020600020905b8154815290600101906020018083116102a757829003601f168201915b5050505050905090565b60006102d9826105ac565b6102fe5760405162461bcd60e51b81526004016102f590611001565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061032582610405565b9050806001600160a01b0316836001600160a01b031614156103595760405162461bcd60e51b81526004016102f5906110e5565b806001600160a01b031661036b6105c9565b6001600160a01b031614806103875750610387816101ef6105c9565b6103a35760405162461bcd60e51b81526004016102f590610f11565b6103ad83836105cd565b505050565b6103c36103bd6105c9565b8261063b565b6103df5760405162461bcd60e51b81526004016102f590611126565b6103ad8383836106c0565b6103ad838383604051806020016040528060008152506104a3565b6000818152600260205260408120546001600160a01b0316806102345760405162461bcd60e51b81526004016102f590610fb8565b60006001600160a01b0382166104625760405162461bcd60e51b81526004016102f590610f6e565b506001600160a01b031660009081526003602052604090205490565b60606001805461024b906111ef565b61049f6104986105c9565b83836107ed565b5050565b6104b46104ae6105c9565b8361063b565b6104d05760405162461bcd60e51b81526004016102f590611126565b6104dc84848484610890565b50505050565b60606104ed826105ac565b6105095760405162461bcd60e51b81526004016102f590611096565b60006105136108c3565b90506000815111610533576040518060200160405280600081525061055e565b8061053d846108d5565b60405160200161054e929190610d5a565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061060282610405565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610646826105ac565b6106625760405162461bcd60e51b81526004016102f590610ec5565b600061066d83610405565b9050806001600160a01b0316846001600160a01b031614806106a85750836001600160a01b031661069d846102ce565b6001600160a01b0316145b806106b857506106b88185610565565b949350505050565b826001600160a01b03166106d382610405565b6001600160a01b0316146106f95760405162461bcd60e51b81526004016102f59061104d565b6001600160a01b03821661071f5760405162461bcd60e51b81526004016102f590610e4a565b61072a8383836103ad565b6107356000826105cd565b6001600160a01b038316600090815260036020526040812080546001929061075e9084906111ac565b90915550506001600160a01b038216600090815260036020526040812080546001929061078c908490611180565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b0316141561081f5760405162461bcd60e51b81526004016102f590610e8e565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610883908590610dda565b60405180910390a3505050565b61089b8484846106c0565b6108a7848484846109f0565b6104dc5760405162461bcd60e51b81526004016102f590610df8565b60408051602081019091526000815290565b6060816108fa57506040805180820190915260018152600360fc1b6020820152610237565b8160005b8115610924578061090e8161122a565b915061091d9050600a83611198565b91506108fe565b60008167ffffffffffffffff81111561094d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610977576020820181803683370190505b5090505b84156106b85761098c6001836111ac565b9150610999600a86611245565b6109a4906030611180565b60f81b8183815181106109c757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506109e9600a86611198565b945061097b565b6000610a04846001600160a01b0316610b0b565b15610b0057836001600160a01b031663150b7a02610a206105c9565b8786866040518563ffffffff1660e01b8152600401610a429493929190610d9d565b602060405180830381600087803b158015610a5c57600080fd5b505af1925050508015610a8c575060408051601f3d908101601f19168201909252610a8991810190610cfa565b60015b610ae6573d808015610aba576040519150601f19603f3d011682016040523d82523d6000602084013e610abf565b606091505b508051610ade5760405162461bcd60e51b81526004016102f590610df8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506106b8565b506001949350505050565b3b151590565b80356001600160a01b038116811461023757600080fd5b600060208284031215610b39578081fd5b61055e82610b11565b60008060408385031215610b54578081fd5b610b5d83610b11565b9150610b6b60208401610b11565b90509250929050565b600080600060608486031215610b88578081fd5b610b9184610b11565b9250610b9f60208501610b11565b9150604084013590509250925092565b60008060008060808587031215610bc4578081fd5b610bcd85610b11565b93506020610bdc818701610b11565b935060408601359250606086013567ffffffffffffffff80821115610bff578384fd5b818801915088601f830112610c12578384fd5b813581811115610c2457610c24611285565b604051601f8201601f1916810185018381118282101715610c4757610c47611285565b60405281815283820185018b1015610c5d578586fd5b81858501868301379081019093019390935250939692955090935050565b60008060408385031215610c8d578182fd5b610c9683610b11565b915060208301358015158114610caa578182fd5b809150509250929050565b60008060408385031215610cc7578182fd5b610cd083610b11565b946020939093013593505050565b600060208284031215610cef578081fd5b813561055e8161129b565b600060208284031215610d0b578081fd5b815161055e8161129b565b600060208284031215610d27578081fd5b5035919050565b60008151808452610d468160208601602086016111c3565b601f01601f19169290920160200192915050565b60008351610d6c8184602088016111c3565b835190830190610d808183602088016111c3565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610dd090830184610d2e565b9695505050505050565b901515815260200190565b60006020825261055e6020830184610d2e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b90815260200190565b6000821982111561119357611193611259565b500190565b6000826111a7576111a761126f565b500490565b6000828210156111be576111be611259565b500390565b60005b838110156111de5781810151838201526020016111c6565b838111156104dc5750506000910152565b60028104600182168061120357607f821691505b6020821081141561122457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561123e5761123e611259565b5060010190565b6000826112545761125461126f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146112b157600080fd5b5056fea264697066735822122079fdf9e31c1858369a452ce38d8f18786a44c10af9bba99271578eb148ab822564736f6c63430008000033",
  "deployedSourceMap": "790:13013:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1738:300;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2656:98;;;:::i;:::-;;;;;;;:::i;4167:217::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3705:401::-;;;;;;:::i;:::-;;:::i;:::-;;4894:330;;;;;;:::i;:::-;;:::i;5290:179::-;;;;;;:::i;:::-;;:::i;2359:235::-;;;;;;:::i;:::-;;:::i;2097:205::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2818:102::-;;;:::i;4451:153::-;;;;;;:::i;:::-;;:::i;5535:320::-;;;;;;:::i;:::-;;:::i;2986:329::-;;;;;;:::i;:::-;;:::i;4670:162::-;;;;;;:::i;:::-;;:::i;1738:300::-;1840:4;-1:-1:-1;;;;;;1875:40:10;;-1:-1:-1;;;1875:40:10;;:104;;-1:-1:-1;;;;;;;1931:48:10;;-1:-1:-1;;;1931:48:10;1875:104;:156;;;;1995:36;2019:11;1995:23;:36::i;:::-;1856:175;;1738:300;;;;:::o;2656:98::-;2710:13;2742:5;2735:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2656:98;:::o;4167:217::-;4243:7;4270:16;4278:7;4270;:16::i;:::-;4262:73;;;;-1:-1:-1;;;4262:73:10;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;4353:24:10;;;;:15;:24;;;;;;-1:-1:-1;;;;;4353:24:10;;4167:217::o;3705:401::-;3785:13;3801:23;3816:7;3801:14;:23::i;:::-;3785:39;;3848:5;-1:-1:-1;;;;;3842:11:10;:2;-1:-1:-1;;;;;3842:11:10;;;3834:57;;;;-1:-1:-1;;;3834:57:10;;;;;;;:::i;:::-;3939:5;-1:-1:-1;;;;;3923:21:10;:12;:10;:12::i;:::-;-1:-1:-1;;;;;3923:21:10;;:62;;;;3948:37;3965:5;3972:12;:10;:12::i;3948:37::-;3902:165;;;;-1:-1:-1;;;3902:165:10;;;;;;;:::i;:::-;4078:21;4087:2;4091:7;4078:8;:21::i;:::-;3705:401;;;:::o;4894:330::-;5083:41;5102:12;:10;:12::i;:::-;5116:7;5083:18;:41::i;:::-;5075:103;;;;-1:-1:-1;;;5075:103:10;;;;;;;:::i;:::-;5189:28;5199:4;5205:2;5209:7;5189:9;:28::i;5290:179::-;5423:39;5440:4;5446:2;5450:7;5423:39;;;;;;;;;;;;:16;:39::i;2359:235::-;2431:7;2466:16;;;:7;:16;;;;;;-1:-1:-1;;;;;2466:16:10;2500:19;2492:73;;;;-1:-1:-1;;;2492:73:10;;;;;;;:::i;2097:205::-;2169:7;-1:-1:-1;;;;;2196:19:10;;2188:74;;;;-1:-1:-1;;;2188:74:10;;;;;;;:::i;:::-;-1:-1:-1;;;;;;2279:16:10;;;;;:9;:16;;;;;;;2097:205::o;2818:102::-;2874:13;2906:7;2899:14;;;;;:::i;4451:153::-;4545:52;4564:12;:10;:12::i;:::-;4578:8;4588;4545:18;:52::i;:::-;4451:153;;:::o;5535:320::-;5704:41;5723:12;:10;:12::i;:::-;5737:7;5704:18;:41::i;:::-;5696:103;;;;-1:-1:-1;;;5696:103:10;;;;;;;:::i;:::-;5809:39;5823:4;5829:2;5833:7;5842:5;5809:13;:39::i;:::-;5535:320;;;;:::o;2986:329::-;3059:13;3092:16;3100:7;3092;:16::i;:::-;3084:76;;;;-1:-1:-1;;;3084:76:10;;;;;;;:::i;:::-;3171:21;3195:10;:8;:10::i;:::-;3171:34;;3246:1;3228:7;3222:21;:25;:86;;;;;;;;;;;;;;;;;3274:7;3283:18;:7;:16;:18::i;:::-;3257:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3222:86;3215:93;2986:329;-1:-1:-1;;;2986:329:10:o;4670:162::-;-1:-1:-1;;;;;4790:25:10;;;4767:4;4790:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4670:162::o;829:155:8:-;-1:-1:-1;;;;;;937:40:8;;-1:-1:-1;;;937:40:8;829:155;;;:::o;7327:125:10:-;7392:4;7415:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7415:16:10;:30;;;7327:125::o;640:96:5:-;719:10;640:96;:::o;11178:171:10:-;11252:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;11252:29:10;-1:-1:-1;;;;;11252:29:10;;;;;;;;:24;;11305:23;11252:24;11305:14;:23::i;:::-;-1:-1:-1;;;;;11296:46:10;;;;;;;;;;;11178:171;;:::o;7610:344::-;7703:4;7727:16;7735:7;7727;:16::i;:::-;7719:73;;;;-1:-1:-1;;;7719:73:10;;;;;;;:::i;:::-;7802:13;7818:23;7833:7;7818:14;:23::i;:::-;7802:39;;7870:5;-1:-1:-1;;;;;7859:16:10;:7;-1:-1:-1;;;;;7859:16:10;;:51;;;;7903:7;-1:-1:-1;;;;;7879:31:10;:20;7891:7;7879:11;:20::i;:::-;-1:-1:-1;;;;;7879:31:10;;7859:51;:87;;;;7914:32;7931:5;7938:7;7914:16;:32::i;:::-;7851:96;7610:344;-1:-1:-1;;;;7610:344:10:o;10507:560::-;10661:4;-1:-1:-1;;;;;10634:31:10;:23;10649:7;10634:14;:23::i;:::-;-1:-1:-1;;;;;10634:31:10;;10626:85;;;;-1:-1:-1;;;10626:85:10;;;;;;;:::i;:::-;-1:-1:-1;;;;;10729:16:10;;10721:65;;;;-1:-1:-1;;;10721:65:10;;;;;;;:::i;:::-;10797:39;10818:4;10824:2;10828:7;10797:20;:39::i;:::-;10898:29;10915:1;10919:7;10898:8;:29::i;:::-;-1:-1:-1;;;;;10938:15:10;;;;;;:9;:15;;;;;:20;;10957:1;;10938:15;:20;;10957:1;;10938:20;:::i;:::-;;;;-1:-1:-1;;;;;;;10968:13:10;;;;;;:9;:13;;;;;:18;;10985:1;;10968:13;:18;;10985:1;;10968:18;:::i;:::-;;;;-1:-1:-1;;10996:16:10;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;10996:21:10;-1:-1:-1;;;;;10996:21:10;;;;;;;;;11033:27;;10996:16;;11033:27;;;;;;;10507:560;;;:::o;11484:307::-;11634:8;-1:-1:-1;;;;;11625:17:10;:5;-1:-1:-1;;;;;11625:17:10;;;11617:55;;;;-1:-1:-1;;;11617:55:10;;;;;;;:::i;:::-;-1:-1:-1;;;;;11682:25:10;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;:46;;-1:-1:-1;;11682:46:10;;;;;;;11743:41;;;;;11682:46;;11743:41;:::i;:::-;;;;;;;;11484:307;;;:::o;6717:::-;6868:28;6878:4;6884:2;6888:7;6868:9;:28::i;:::-;6914:48;6937:4;6943:2;6947:7;6956:5;6914:22;:48::i;:::-;6906:111;;;;-1:-1:-1;;;6906:111:10;;;;;;;:::i;3556:92::-;3632:9;;;;;;;;;-1:-1:-1;3632:9:10;;3556:92;:::o;328:703:6:-;384:13;601:10;597:51;;-1:-1:-1;627:10:6;;;;;;;;;;;;-1:-1:-1;;;627:10:6;;;;;;597:51;672:5;657:12;711:75;718:9;;711:75;;743:8;;;;:::i;:::-;;-1:-1:-1;765:10:6;;-1:-1:-1;773:2:6;765:10;;:::i;:::-;;;711:75;;;795:19;827:6;817:17;;;;;;-1:-1:-1;;;817:17:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:17:6;;795:39;;844:150;851:10;;844:150;;877:11;887:1;877:11;;:::i;:::-;;-1:-1:-1;945:10:6;953:2;945:5;:10;:::i;:::-;932:24;;:2;:24;:::i;:::-;919:39;;902:6;909;902:14;;;;;;-1:-1:-1;;;902:14:6;;;;;;;;;;;;:56;-1:-1:-1;;;;;902:56:6;;;;;;;;-1:-1:-1;972:11:6;981:2;972:11;;:::i;:::-;;;844:150;;12344:779:10;12495:4;12515:15;:2;-1:-1:-1;;;;;12515:13:10;;:15::i;:::-;12511:606;;;12566:2;-1:-1:-1;;;;;12550:36:10;;12587:12;:10;:12::i;:::-;12601:4;12607:7;12616:5;12550:72;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12550:72:10;;;;;;;;-1:-1:-1;;12550:72:10;;;;;;;;;;;;:::i;:::-;;;12546:519;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12789:13:10;;12785:266;;12831:60;;-1:-1:-1;;;12831:60:10;;;;;;;:::i;12785:266::-;13003:6;12997:13;12988:6;12984:2;12980:15;12973:38;12546:519;-1:-1:-1;;;;;;12672:51:10;-1:-1:-1;;;12672:51:10;;-1:-1:-1;12665:58:10;;12511:606;-1:-1:-1;13102:4:10;12344:779;;;;;;:::o;771:377:4:-;1087:20;1133:8;;;771:377::o;14:175:13:-;84:20;;-1:-1:-1;;;;;133:31:13;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:1178::-;;;;;1195:3;1183:9;1174:7;1170:23;1166:33;1163:2;;;1217:6;1209;1202:22;1163:2;1245:31;1266:9;1245:31;:::i;:::-;1235:41;;1295:2;1316:40;1352:2;1341:9;1337:18;1316:40;:::i;:::-;1306:50;;1403:2;1392:9;1388:18;1375:32;1365:42;;1458:2;1447:9;1443:18;1430:32;1481:18;1522:2;1514:6;1511:14;1508:2;;;1543:6;1535;1528:22;1508:2;1586:6;1575:9;1571:22;1561:32;;1631:7;1624:4;1620:2;1616:13;1612:27;1602:2;;1658:6;1650;1643:22;1602:2;1699;1686:16;1721:2;1717;1714:10;1711:2;;;1727:18;;:::i;:::-;1776:2;1770:9;1845:2;1826:13;;-1:-1:-1;;1822:27:13;1810:40;;1806:49;;1870:18;;;1890:22;;;1867:46;1864:2;;;1916:18;;:::i;:::-;1952:2;1945:22;1976:18;;;2013:11;;;2009:20;;2006:33;-1:-1:-1;2003:2:13;;;2057:6;2049;2042:22;2003:2;2118;2113;2109;2105:11;2100:2;2092:6;2088:15;2075:46;2141:15;;;2137:24;;;2130:40;;;;-1:-1:-1;1153:1048:13;;;;-1:-1:-1;1153:1048:13;;-1:-1:-1;;1153:1048:13:o;2206:369::-;;;2332:2;2320:9;2311:7;2307:23;2303:32;2300:2;;;2353:6;2345;2338:22;2300:2;2381:31;2402:9;2381:31;:::i;:::-;2371:41;;2462:2;2451:9;2447:18;2434:32;2509:5;2502:13;2495:21;2488:5;2485:32;2475:2;;2536:6;2528;2521:22;2475:2;2564:5;2554:15;;;2290:285;;;;;:::o;2580:266::-;;;2709:2;2697:9;2688:7;2684:23;2680:32;2677:2;;;2730:6;2722;2715:22;2677:2;2758:31;2779:9;2758:31;:::i;:::-;2748:41;2836:2;2821:18;;;;2808:32;;-1:-1:-1;;;2667:179:13:o;2851:257::-;;2962:2;2950:9;2941:7;2937:23;2933:32;2930:2;;;2983:6;2975;2968:22;2930:2;3027:9;3014:23;3046:32;3072:5;3046:32;:::i;3113:261::-;;3235:2;3223:9;3214:7;3210:23;3206:32;3203:2;;;3256:6;3248;3241:22;3203:2;3293:9;3287:16;3312:32;3338:5;3312:32;:::i;3379:190::-;;3491:2;3479:9;3470:7;3466:23;3462:32;3459:2;;;3512:6;3504;3497:22;3459:2;-1:-1:-1;3540:23:13;;3449:120;-1:-1:-1;3449:120:13:o;3574:259::-;;3655:5;3649:12;3682:6;3677:3;3670:19;3698:63;3754:6;3747:4;3742:3;3738:14;3731:4;3724:5;3720:16;3698:63;:::i;:::-;3815:2;3794:15;-1:-1:-1;;3790:29:13;3781:39;;;;3822:4;3777:50;;3625:208;-1:-1:-1;;3625:208:13:o;3838:470::-;;4055:6;4049:13;4071:53;4117:6;4112:3;4105:4;4097:6;4093:17;4071:53;:::i;:::-;4187:13;;4146:16;;;;4209:57;4187:13;4146:16;4243:4;4231:17;;4209:57;:::i;:::-;4282:20;;4025:283;-1:-1:-1;;;;4025:283:13:o;4313:203::-;-1:-1:-1;;;;;4477:32:13;;;;4459:51;;4447:2;4432:18;;4414:102::o;4521:490::-;-1:-1:-1;;;;;4790:15:13;;;4772:34;;4842:15;;4837:2;4822:18;;4815:43;4889:2;4874:18;;4867:34;;;4937:3;4932:2;4917:18;;4910:31;;;4521:490;;4958:47;;4985:19;;4977:6;4958:47;:::i;:::-;4950:55;4724:287;-1:-1:-1;;;;;;4724:287:13:o;5016:187::-;5181:14;;5174:22;5156:41;;5144:2;5129:18;;5111:92::o;5208:221::-;;5357:2;5346:9;5339:21;5377:46;5419:2;5408:9;5404:18;5396:6;5377:46;:::i;5434:414::-;5636:2;5618:21;;;5675:2;5655:18;;;5648:30;5714:34;5709:2;5694:18;;5687:62;-1:-1:-1;;;5780:2:13;5765:18;;5758:48;5838:3;5823:19;;5608:240::o;5853:400::-;6055:2;6037:21;;;6094:2;6074:18;;;6067:30;6133:34;6128:2;6113:18;;6106:62;-1:-1:-1;;;6199:2:13;6184:18;;6177:34;6243:3;6228:19;;6027:226::o;6258:349::-;6460:2;6442:21;;;6499:2;6479:18;;;6472:30;6538:27;6533:2;6518:18;;6511:55;6598:2;6583:18;;6432:175::o;6612:408::-;6814:2;6796:21;;;6853:2;6833:18;;;6826:30;6892:34;6887:2;6872:18;;6865:62;-1:-1:-1;;;6958:2:13;6943:18;;6936:42;7010:3;6995:19;;6786:234::o;7025:420::-;7227:2;7209:21;;;7266:2;7246:18;;;7239:30;7305:34;7300:2;7285:18;;7278:62;7376:26;7371:2;7356:18;;7349:54;7435:3;7420:19;;7199:246::o;7450:406::-;7652:2;7634:21;;;7691:2;7671:18;;;7664:30;7730:34;7725:2;7710:18;;7703:62;-1:-1:-1;;;7796:2:13;7781:18;;7774:40;7846:3;7831:19;;7624:232::o;7861:405::-;8063:2;8045:21;;;8102:2;8082:18;;;8075:30;8141:34;8136:2;8121:18;;8114:62;-1:-1:-1;;;8207:2:13;8192:18;;8185:39;8256:3;8241:19;;8035:231::o;8271:408::-;8473:2;8455:21;;;8512:2;8492:18;;;8485:30;8551:34;8546:2;8531:18;;8524:62;-1:-1:-1;;;8617:2:13;8602:18;;8595:42;8669:3;8654:19;;8445:234::o;8684:405::-;8886:2;8868:21;;;8925:2;8905:18;;;8898:30;8964:34;8959:2;8944:18;;8937:62;-1:-1:-1;;;9030:2:13;9015:18;;9008:39;9079:3;9064:19;;8858:231::o;9094:411::-;9296:2;9278:21;;;9335:2;9315:18;;;9308:30;9374:34;9369:2;9354:18;;9347:62;-1:-1:-1;;;9440:2:13;9425:18;;9418:45;9495:3;9480:19;;9268:237::o;9510:397::-;9712:2;9694:21;;;9751:2;9731:18;;;9724:30;9790:34;9785:2;9770:18;;9763:62;-1:-1:-1;;;9856:2:13;9841:18;;9834:31;9897:3;9882:19;;9684:223::o;9912:413::-;10114:2;10096:21;;;10153:2;10133:18;;;10126:30;10192:34;10187:2;10172:18;;10165:62;-1:-1:-1;;;10258:2:13;10243:18;;10236:47;10315:3;10300:19;;10086:239::o;10330:177::-;10476:25;;;10464:2;10449:18;;10431:76::o;10512:128::-;;10583:1;10579:6;10576:1;10573:13;10570:2;;;10589:18;;:::i;:::-;-1:-1:-1;10625:9:13;;10560:80::o;10645:120::-;;10711:1;10701:2;;10716:18;;:::i;:::-;-1:-1:-1;10750:9:13;;10691:74::o;10770:125::-;;10838:1;10835;10832:8;10829:2;;;10843:18;;:::i;:::-;-1:-1:-1;10880:9:13;;10819:76::o;10900:258::-;10972:1;10982:113;10996:6;10993:1;10990:13;10982:113;;;11072:11;;;11066:18;11053:11;;;11046:39;11018:2;11011:10;10982:113;;;11113:6;11110:1;11107:13;11104:2;;;-1:-1:-1;;11148:1:13;11130:16;;11123:27;10953:205::o;11163:380::-;11248:1;11238:12;;11295:1;11285:12;;;11306:2;;11360:4;11352:6;11348:17;11338:27;;11306:2;11413;11405:6;11402:14;11382:18;11379:38;11376:2;;;11459:10;11454:3;11450:20;11447:1;11440:31;11494:4;11491:1;11484:15;11522:4;11519:1;11512:15;11376:2;;11218:325;;;:::o;11548:135::-;;-1:-1:-1;;11608:17:13;;11605:2;;;11628:18;;:::i;:::-;-1:-1:-1;11675:1:13;11664:13;;11595:88::o;11688:112::-;;11746:1;11736:2;;11751:18;;:::i;:::-;-1:-1:-1;11785:9:13;;11726:74::o;11805:127::-;11866:10;11861:3;11857:20;11854:1;11847:31;11897:4;11894:1;11887:15;11921:4;11918:1;11911:15;11937:127;11998:10;11993:3;11989:20;11986:1;11979:31;12029:4;12026:1;12019:15;12053:4;12050:1;12043:15;12069:127;12130:10;12125:3;12121:20;12118:1;12111:31;12161:4;12158:1;12151:15;12185:4;12182:1;12175:15;12201:133;-1:-1:-1;;;;;;12277:32:13;;12267:43;;12257:2;;12324:1;12321;12314:12;12257:2;12247:87;:::o",
  "language": "Solidity",
  "natspec": {
    "details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "details": "Initializes the contract by setting a `name` and a `symbol` to the token collection."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "offset": [
    790,
    13803
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1E1 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1A0 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFD JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x132 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x15A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0xCDE JUMP JUMPDEST PUSH2 0x1F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0xDDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x105 PUSH2 0x23C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0xD16 JUMP JUMPDEST PUSH2 0x2CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0xD89 JUMP JUMPDEST PUSH2 0x145 PUSH2 0x140 CALLDATASIZE PUSH1 0x4 PUSH2 0xCB5 JUMP JUMPDEST PUSH2 0x31A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x145 PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x3B2 JUMP JUMPDEST PUSH2 0x145 PUSH2 0x168 CALLDATASIZE PUSH1 0x4 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x3EA JUMP JUMPDEST PUSH2 0x125 PUSH2 0x17B CALLDATASIZE PUSH1 0x4 PUSH2 0xD16 JUMP JUMPDEST PUSH2 0x405 JUMP JUMPDEST PUSH2 0x193 PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0xB28 JUMP JUMPDEST PUSH2 0x43A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0x1177 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x145 PUSH2 0x1B6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC7B JUMP JUMPDEST PUSH2 0x48D JUMP JUMPDEST PUSH2 0x145 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBAF JUMP JUMPDEST PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0xD16 JUMP JUMPDEST PUSH2 0x4E2 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0xB42 JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x225 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x234 JUMPI POP PUSH2 0x234 DUP3 PUSH2 0x593 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x24B SWAP1 PUSH2 0x11EF JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x277 SWAP1 PUSH2 0x11EF JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2C4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x299 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2C4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2A7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D9 DUP3 PUSH2 0x5AC JUMP JUMPDEST PUSH2 0x2FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0x1001 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x325 DUP3 PUSH2 0x405 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x359 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0x10E5 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x36B PUSH2 0x5C9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH2 0x387 DUP2 PUSH2 0x1EF PUSH2 0x5C9 JUMP JUMPDEST PUSH2 0x3A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0xF11 JUMP JUMPDEST PUSH2 0x3AD DUP4 DUP4 PUSH2 0x5CD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x3C3 PUSH2 0x3BD PUSH2 0x5C9 JUMP JUMPDEST DUP3 PUSH2 0x63B JUMP JUMPDEST PUSH2 0x3DF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0x1126 JUMP JUMPDEST PUSH2 0x3AD DUP4 DUP4 DUP4 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x3AD DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x4A3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x234 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0xFB8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x462 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0xF6E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x24B SWAP1 PUSH2 0x11EF JUMP JUMPDEST PUSH2 0x49F PUSH2 0x498 PUSH2 0x5C9 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x7ED JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4B4 PUSH2 0x4AE PUSH2 0x5C9 JUMP JUMPDEST DUP4 PUSH2 0x63B JUMP JUMPDEST PUSH2 0x4D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0x1126 JUMP JUMPDEST PUSH2 0x4DC DUP5 DUP5 DUP5 DUP5 PUSH2 0x890 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4ED DUP3 PUSH2 0x5AC JUMP JUMPDEST PUSH2 0x509 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x513 PUSH2 0x8C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x533 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x55E JUMP JUMPDEST DUP1 PUSH2 0x53D DUP5 PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x54E SWAP3 SWAP2 SWAP1 PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x602 DUP3 PUSH2 0x405 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x646 DUP3 PUSH2 0x5AC JUMP JUMPDEST PUSH2 0x662 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0xEC5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x66D DUP4 PUSH2 0x405 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x6A8 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x69D DUP5 PUSH2 0x2CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST DUP1 PUSH2 0x6B8 JUMPI POP PUSH2 0x6B8 DUP2 DUP6 PUSH2 0x565 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6D3 DUP3 PUSH2 0x405 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0x104D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x71F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0xE4A JUMP JUMPDEST PUSH2 0x72A DUP4 DUP4 DUP4 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x735 PUSH1 0x0 DUP3 PUSH2 0x5CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x75E SWAP1 DUP5 SWAP1 PUSH2 0x11AC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x78C SWAP1 DUP5 SWAP1 PUSH2 0x1180 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x81F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0xE8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO OR SWAP1 SSTORE MLOAD PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP1 PUSH2 0x883 SWAP1 DUP6 SWAP1 PUSH2 0xDDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x89B DUP5 DUP5 DUP5 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x8A7 DUP5 DUP5 DUP5 DUP5 PUSH2 0x9F0 JUMP JUMPDEST PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0xDF8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0x8FA JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x237 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x924 JUMPI DUP1 PUSH2 0x90E DUP2 PUSH2 0x122A JUMP JUMPDEST SWAP2 POP PUSH2 0x91D SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x1198 JUMP JUMPDEST SWAP2 POP PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x94D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x977 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x6B8 JUMPI PUSH2 0x98C PUSH1 0x1 DUP4 PUSH2 0x11AC JUMP JUMPDEST SWAP2 POP PUSH2 0x999 PUSH1 0xA DUP7 PUSH2 0x1245 JUMP JUMPDEST PUSH2 0x9A4 SWAP1 PUSH1 0x30 PUSH2 0x1180 JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x9C7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x9E9 PUSH1 0xA DUP7 PUSH2 0x1198 JUMP JUMPDEST SWAP5 POP PUSH2 0x97B JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA04 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB0B JUMP JUMPDEST ISZERO PUSH2 0xB00 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x150B7A02 PUSH2 0xA20 PUSH2 0x5C9 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA42 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD9D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xA8C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA89 SWAP2 DUP2 ADD SWAP1 PUSH2 0xCFA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xAE6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xABA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xABF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0xADE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F5 SWAP1 PUSH2 0xDF8 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x6B8 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB39 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x55E DUP3 PUSH2 0xB11 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB54 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xB5D DUP4 PUSH2 0xB11 JUMP JUMPDEST SWAP2 POP PUSH2 0xB6B PUSH1 0x20 DUP5 ADD PUSH2 0xB11 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xB88 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xB91 DUP5 PUSH2 0xB11 JUMP JUMPDEST SWAP3 POP PUSH2 0xB9F PUSH1 0x20 DUP6 ADD PUSH2 0xB11 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xBC4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xBCD DUP6 PUSH2 0xB11 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 PUSH2 0xBDC DUP2 DUP8 ADD PUSH2 0xB11 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xBFF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC12 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xC24 JUMPI PUSH2 0xC24 PUSH2 0x1285 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD DUP6 ADD DUP4 DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC47 JUMPI PUSH2 0xC47 PUSH2 0x1285 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD DUP6 ADD DUP12 LT ISZERO PUSH2 0xC5D JUMPI DUP6 DUP7 REVERT JUMPDEST DUP2 DUP6 DUP6 ADD DUP7 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD SWAP1 SWAP4 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC8D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xC96 DUP4 PUSH2 0xB11 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCAA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCC7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xCD0 DUP4 PUSH2 0xB11 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCEF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x55E DUP2 PUSH2 0x129B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD0B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x55E DUP2 PUSH2 0x129B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD27 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xD46 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x11C3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xD6C DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x11C3 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xD80 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x11C3 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xDD0 SWAP1 DUP4 ADD DUP5 PUSH2 0xD2E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x55E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD2E JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x19 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x40 DUP3 ADD MSTORE PUSH9 0x32B73A103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E73666572206F6620746F6B656E20746861742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH9 0x39903737BA1037BBB7 PUSH1 0xB9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732314D657461646174613A2055524920717565727920666F72206E6F PUSH1 0x40 DUP3 ADD MSTORE PUSH15 0x3732BC34B9BA32B73A103A37B5B2B7 PUSH1 0x89 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1193 JUMPI PUSH2 0x1193 PUSH2 0x1259 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x11A7 JUMPI PUSH2 0x11A7 PUSH2 0x126F JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x11BE JUMPI PUSH2 0x11BE PUSH2 0x1259 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11DE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x11C6 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x4DC JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1203 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1224 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x123E JUMPI PUSH2 0x123E PUSH2 0x1259 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1254 JUMPI PUSH2 0x1254 PUSH2 0x126F JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x12B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH26 0xFDF9E31C1858369A452CE38D8F18786A44C10AF9BBA99271578E 0xB1 0x48 0xAB DUP3 0x25 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        790,
        13803
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "5": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "CALLVALUE",
      "path": "10"
    },
    "6": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "7": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "8": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "12": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "REVERT",
      "path": "10"
    },
    "16": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "17": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "POP",
      "path": "10"
    },
    "18": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "21": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "LT",
      "path": "10"
    },
    "22": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xCF"
    },
    "25": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "26": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "CALLDATALOAD",
      "path": "10"
    },
    "29": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "SHR",
      "path": "10"
    },
    "32": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "33": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x6352211E"
    },
    "38": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "GT",
      "path": "10"
    },
    "39": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x8C"
    },
    "42": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "43": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "44": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xA22CB465"
    },
    "49": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "GT",
      "path": "10"
    },
    "50": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x66"
    },
    "53": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "54": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "55": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xA22CB465"
    },
    "60": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "61": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1A8"
    },
    "64": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "65": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "66": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xB88D4FDE"
    },
    "71": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "72": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1BB"
    },
    "75": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "76": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "77": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xC87B56DD"
    },
    "82": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "83": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1CE"
    },
    "86": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "87": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "88": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xE985E9C5"
    },
    "93": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "94": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1E1"
    },
    "97": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "98": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xCF"
    },
    "101": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMP",
      "path": "10"
    },
    "102": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "103": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "104": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x6352211E"
    },
    "109": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "110": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x16D"
    },
    "113": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "114": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "115": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x70A08231"
    },
    "120": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "121": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x180"
    },
    "124": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "125": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "126": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x95D89B41"
    },
    "131": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "132": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1A0"
    },
    "135": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "136": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xCF"
    },
    "139": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMP",
      "path": "10"
    },
    "140": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "141": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "142": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x1FFC9A7"
    },
    "147": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "148": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xD4"
    },
    "151": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "152": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "153": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x6FDDE03"
    },
    "158": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "159": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xFD"
    },
    "162": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "163": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "164": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x81812FC"
    },
    "169": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "170": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x112"
    },
    "173": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "174": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "175": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x95EA7B3"
    },
    "180": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "181": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x132"
    },
    "184": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "185": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "186": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x23B872DD"
    },
    "191": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "192": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x147"
    },
    "195": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "196": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "197": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x42842E0E"
    },
    "202": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "EQ",
      "path": "10"
    },
    "203": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x15A"
    },
    "206": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "207": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "208": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "210": {
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "DUP1",
      "path": "10"
    },
    "211": {
      "first_revert": true,
      "fn": null,
      "offset": [
        790,
        13803
      ],
      "op": "REVERT",
      "path": "10"
    },
    "212": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "213": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xE7"
    },
    "216": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xE2"
    },
    "219": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "220": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "222": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xCDE"
    },
    "225": {
      "fn": "ERC721.supportsInterface",
      "jump": "i",
      "offset": [
        1738,
        2038
      ],
      "op": "JUMP",
      "path": "10"
    },
    "226": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "227": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1F4"
    },
    "230": {
      "fn": "ERC721.supportsInterface",
      "jump": "i",
      "offset": [
        1738,
        2038
      ],
      "op": "JUMP",
      "path": "10"
    },
    "231": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "232": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "234": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "235": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xF4"
    },
    "238": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "239": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "240": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xDDA"
    },
    "243": {
      "fn": "ERC721.supportsInterface",
      "jump": "i",
      "offset": [
        1738,
        2038
      ],
      "op": "JUMP",
      "path": "10"
    },
    "244": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "245": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "247": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "248": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "DUP1",
      "path": "10"
    },
    "249": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "250": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "SUB",
      "path": "10"
    },
    "251": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "252": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "RETURN",
      "path": "10"
    },
    "253": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "254": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x105"
    },
    "257": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x23C"
    },
    "260": {
      "fn": "ERC721.name",
      "jump": "i",
      "offset": [
        2656,
        2754
      ],
      "op": "JUMP",
      "path": "10"
    },
    "261": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "262": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "264": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "265": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xF4"
    },
    "268": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "269": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "270": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xDE5"
    },
    "273": {
      "fn": "ERC721.name",
      "jump": "i",
      "offset": [
        2656,
        2754
      ],
      "op": "JUMP",
      "path": "10"
    },
    "274": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "275": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x125"
    },
    "278": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x120"
    },
    "281": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "282": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "284": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xD16"
    },
    "287": {
      "fn": "ERC721.getApproved",
      "jump": "i",
      "offset": [
        4167,
        4384
      ],
      "op": "JUMP",
      "path": "10"
    },
    "288": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "289": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2CE"
    },
    "292": {
      "fn": "ERC721.getApproved",
      "jump": "i",
      "offset": [
        4167,
        4384
      ],
      "op": "JUMP",
      "path": "10"
    },
    "293": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "294": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "296": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "297": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xF4"
    },
    "300": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "301": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "302": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xD89"
    },
    "305": {
      "fn": "ERC721.getApproved",
      "jump": "i",
      "offset": [
        4167,
        4384
      ],
      "op": "JUMP",
      "path": "10"
    },
    "306": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "307": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x145"
    },
    "310": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x140"
    },
    "313": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "314": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "316": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xCB5"
    },
    "319": {
      "fn": "ERC721.approve",
      "jump": "i",
      "offset": [
        3705,
        4106
      ],
      "op": "JUMP",
      "path": "10"
    },
    "320": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "321": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x31A"
    },
    "324": {
      "fn": "ERC721.approve",
      "jump": "i",
      "offset": [
        3705,
        4106
      ],
      "op": "JUMP",
      "path": "10"
    },
    "325": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "326": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "STOP",
      "path": "10"
    },
    "327": {
      "fn": "ERC721.transferFrom",
      "offset": [
        4894,
        5224
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "328": {
      "fn": "ERC721.transferFrom",
      "offset": [
        4894,
        5224
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x145"
    },
    "331": {
      "fn": "ERC721.transferFrom",
      "offset": [
        4894,
        5224
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x155"
    },
    "334": {
      "fn": "ERC721.transferFrom",
      "offset": [
        4894,
        5224
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "335": {
      "fn": "ERC721.transferFrom",
      "offset": [
        4894,
        5224
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "337": {
      "fn": "ERC721.transferFrom",
      "offset": [
        4894,
        5224
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xB74"
    },
    "340": {
      "fn": "ERC721.transferFrom",
      "jump": "i",
      "offset": [
        4894,
        5224
      ],
      "op": "JUMP",
      "path": "10"
    },
    "341": {
      "fn": "ERC721.transferFrom",
      "offset": [
        4894,
        5224
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "342": {
      "fn": "ERC721.transferFrom",
      "offset": [
        4894,
        5224
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3B2"
    },
    "345": {
      "fn": "ERC721.transferFrom",
      "jump": "i",
      "offset": [
        4894,
        5224
      ],
      "op": "JUMP",
      "path": "10"
    },
    "346": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5290,
        5469
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "347": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5290,
        5469
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x145"
    },
    "350": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5290,
        5469
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x168"
    },
    "353": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5290,
        5469
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "354": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5290,
        5469
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "356": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5290,
        5469
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xB74"
    },
    "359": {
      "fn": "ERC721.safeTransferFrom",
      "jump": "i",
      "offset": [
        5290,
        5469
      ],
      "op": "JUMP",
      "path": "10"
    },
    "360": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5290,
        5469
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "361": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5290,
        5469
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3EA"
    },
    "364": {
      "fn": "ERC721.safeTransferFrom",
      "jump": "i",
      "offset": [
        5290,
        5469
      ],
      "op": "JUMP",
      "path": "10"
    },
    "365": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2359,
        2594
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "366": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2359,
        2594
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x125"
    },
    "369": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2359,
        2594
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x17B"
    },
    "372": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2359,
        2594
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "373": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2359,
        2594
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "375": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2359,
        2594
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xD16"
    },
    "378": {
      "fn": "ERC721.ownerOf",
      "jump": "i",
      "offset": [
        2359,
        2594
      ],
      "op": "JUMP",
      "path": "10"
    },
    "379": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2359,
        2594
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "380": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2359,
        2594
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x405"
    },
    "383": {
      "fn": "ERC721.ownerOf",
      "jump": "i",
      "offset": [
        2359,
        2594
      ],
      "op": "JUMP",
      "path": "10"
    },
    "384": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "385": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x193"
    },
    "388": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x18E"
    },
    "391": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "392": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "394": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xB28"
    },
    "397": {
      "fn": "ERC721.balanceOf",
      "jump": "i",
      "offset": [
        2097,
        2302
      ],
      "op": "JUMP",
      "path": "10"
    },
    "398": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "399": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x43A"
    },
    "402": {
      "fn": "ERC721.balanceOf",
      "jump": "i",
      "offset": [
        2097,
        2302
      ],
      "op": "JUMP",
      "path": "10"
    },
    "403": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "404": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "406": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "407": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xF4"
    },
    "410": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "411": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "412": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1177"
    },
    "415": {
      "fn": "ERC721.balanceOf",
      "jump": "i",
      "offset": [
        2097,
        2302
      ],
      "op": "JUMP",
      "path": "10"
    },
    "416": {
      "fn": "ERC721.symbol",
      "offset": [
        2818,
        2920
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "417": {
      "fn": "ERC721.symbol",
      "offset": [
        2818,
        2920
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x105"
    },
    "420": {
      "fn": "ERC721.symbol",
      "offset": [
        2818,
        2920
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x47E"
    },
    "423": {
      "fn": "ERC721.symbol",
      "jump": "i",
      "offset": [
        2818,
        2920
      ],
      "op": "JUMP",
      "path": "10"
    },
    "424": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4451,
        4604
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "425": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4451,
        4604
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x145"
    },
    "428": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4451,
        4604
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1B6"
    },
    "431": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4451,
        4604
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "432": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4451,
        4604
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "434": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4451,
        4604
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xC7B"
    },
    "437": {
      "fn": "ERC721.setApprovalForAll",
      "jump": "i",
      "offset": [
        4451,
        4604
      ],
      "op": "JUMP",
      "path": "10"
    },
    "438": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4451,
        4604
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "439": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4451,
        4604
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x48D"
    },
    "442": {
      "fn": "ERC721.setApprovalForAll",
      "jump": "i",
      "offset": [
        4451,
        4604
      ],
      "op": "JUMP",
      "path": "10"
    },
    "443": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "444": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x145"
    },
    "447": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1C9"
    },
    "450": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "451": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "453": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xBAF"
    },
    "456": {
      "fn": "ERC721.safeTransferFrom",
      "jump": "i",
      "offset": [
        5535,
        5855
      ],
      "op": "JUMP",
      "path": "10"
    },
    "457": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "458": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x4A3"
    },
    "461": {
      "fn": "ERC721.safeTransferFrom",
      "jump": "i",
      "offset": [
        5535,
        5855
      ],
      "op": "JUMP",
      "path": "10"
    },
    "462": {
      "fn": "ERC721.tokenURI",
      "offset": [
        2986,
        3315
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "463": {
      "fn": "ERC721.tokenURI",
      "offset": [
        2986,
        3315
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x105"
    },
    "466": {
      "fn": "ERC721.tokenURI",
      "offset": [
        2986,
        3315
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1DC"
    },
    "469": {
      "fn": "ERC721.tokenURI",
      "offset": [
        2986,
        3315
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "470": {
      "fn": "ERC721.tokenURI",
      "offset": [
        2986,
        3315
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "472": {
      "fn": "ERC721.tokenURI",
      "offset": [
        2986,
        3315
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xD16"
    },
    "475": {
      "fn": "ERC721.tokenURI",
      "jump": "i",
      "offset": [
        2986,
        3315
      ],
      "op": "JUMP",
      "path": "10"
    },
    "476": {
      "fn": "ERC721.tokenURI",
      "offset": [
        2986,
        3315
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "477": {
      "fn": "ERC721.tokenURI",
      "offset": [
        2986,
        3315
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x4E2"
    },
    "480": {
      "fn": "ERC721.tokenURI",
      "jump": "i",
      "offset": [
        2986,
        3315
      ],
      "op": "JUMP",
      "path": "10"
    },
    "481": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4670,
        4832
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "482": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4670,
        4832
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xE7"
    },
    "485": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4670,
        4832
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1EF"
    },
    "488": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4670,
        4832
      ],
      "op": "CALLDATASIZE",
      "path": "10"
    },
    "489": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4670,
        4832
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "491": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4670,
        4832
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xB42"
    },
    "494": {
      "fn": "ERC721.isApprovedForAll",
      "jump": "i",
      "offset": [
        4670,
        4832
      ],
      "op": "JUMP",
      "path": "10"
    },
    "495": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4670,
        4832
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "496": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4670,
        4832
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x565"
    },
    "499": {
      "fn": "ERC721.isApprovedForAll",
      "jump": "i",
      "offset": [
        4670,
        4832
      ],
      "op": "JUMP",
      "path": "10"
    },
    "500": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "501": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1840,
        1844
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "503": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "505": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "507": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "509": {
      "op": "SHL"
    },
    "510": {
      "op": "SUB"
    },
    "511": {
      "op": "NOT"
    },
    "512": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1875,
        1915
      ],
      "op": "DUP3",
      "path": "10",
      "statement": 0
    },
    "513": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1875,
        1915
      ],
      "op": "AND",
      "path": "10"
    },
    "514": {
      "op": "PUSH4",
      "value": "0x80AC58CD"
    },
    "519": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "521": {
      "op": "SHL"
    },
    "522": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1875,
        1915
      ],
      "op": "EQ",
      "path": "10"
    },
    "523": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1875,
        1915
      ],
      "op": "DUP1",
      "path": "10"
    },
    "524": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1875,
        1979
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x225"
    },
    "527": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1875,
        1979
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "528": {
      "op": "POP"
    },
    "529": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "531": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "533": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "535": {
      "op": "SHL"
    },
    "536": {
      "op": "SUB"
    },
    "537": {
      "op": "NOT"
    },
    "538": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1931,
        1979
      ],
      "op": "DUP3",
      "path": "10"
    },
    "539": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1931,
        1979
      ],
      "op": "AND",
      "path": "10"
    },
    "540": {
      "op": "PUSH4",
      "value": "0x5B5E139F"
    },
    "545": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "547": {
      "op": "SHL"
    },
    "548": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1931,
        1979
      ],
      "op": "EQ",
      "path": "10"
    },
    "549": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1875,
        1979
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "550": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1875,
        2031
      ],
      "op": "DUP1",
      "path": "10"
    },
    "551": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1875,
        2031
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x234"
    },
    "554": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1875,
        2031
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "555": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1875,
        2031
      ],
      "op": "POP",
      "path": "10"
    },
    "556": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1995,
        2031
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x234"
    },
    "559": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        2019,
        2030
      ],
      "op": "DUP3",
      "path": "10"
    },
    "560": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1995,
        2018
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x593"
    },
    "563": {
      "fn": "ERC721.supportsInterface",
      "jump": "i",
      "offset": [
        1995,
        2031
      ],
      "op": "JUMP",
      "path": "10"
    },
    "564": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1995,
        2031
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "565": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1856,
        2031
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "566": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1856,
        2031
      ],
      "op": "POP",
      "path": "10"
    },
    "567": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "568": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "569": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "570": {
      "fn": "ERC721.supportsInterface",
      "offset": [
        1738,
        2038
      ],
      "op": "POP",
      "path": "10"
    },
    "571": {
      "fn": "ERC721.supportsInterface",
      "jump": "o",
      "offset": [
        1738,
        2038
      ],
      "op": "JUMP",
      "path": "10"
    },
    "572": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "573": {
      "fn": "ERC721.name",
      "offset": [
        2710,
        2723
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "575": {
      "fn": "ERC721.name",
      "offset": [
        2742,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 1,
      "value": "0x0"
    },
    "577": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP1",
      "path": "10"
    },
    "578": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "579": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x24B"
    },
    "582": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "583": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x11EF"
    },
    "586": {
      "fn": "ERC721.name",
      "jump": "i",
      "offset": [
        2735,
        2747
      ],
      "op": "JUMP",
      "path": "10"
    },
    "587": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "588": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP1",
      "path": "10"
    },
    "589": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1F"
    },
    "591": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "ADD",
      "path": "10"
    },
    "592": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "594": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP1",
      "path": "10"
    },
    "595": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "596": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DIV",
      "path": "10"
    },
    "597": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "MUL",
      "path": "10"
    },
    "598": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "600": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "ADD",
      "path": "10"
    },
    "601": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "603": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "604": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "605": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP2",
      "path": "10"
    },
    "606": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "ADD",
      "path": "10"
    },
    "607": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "609": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "610": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP1",
      "path": "10"
    },
    "611": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "612": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "613": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "614": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP2",
      "path": "10"
    },
    "615": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP2",
      "path": "10"
    },
    "616": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "617": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "619": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "ADD",
      "path": "10"
    },
    "620": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP3",
      "path": "10"
    },
    "621": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP1",
      "path": "10"
    },
    "622": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "623": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x277"
    },
    "626": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "627": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x11EF"
    },
    "630": {
      "fn": "ERC721.name",
      "jump": "i",
      "offset": [
        2735,
        2747
      ],
      "op": "JUMP",
      "path": "10"
    },
    "631": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "632": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP1",
      "path": "10"
    },
    "633": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "634": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C4"
    },
    "637": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "638": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP1",
      "path": "10"
    },
    "639": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1F"
    },
    "641": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "LT",
      "path": "10"
    },
    "642": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x299"
    },
    "645": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "646": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x100"
    },
    "649": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP1",
      "path": "10"
    },
    "650": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP4",
      "path": "10"
    },
    "651": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "652": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DIV",
      "path": "10"
    },
    "653": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "MUL",
      "path": "10"
    },
    "654": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP4",
      "path": "10"
    },
    "655": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "656": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "657": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "659": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "ADD",
      "path": "10"
    },
    "660": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "661": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2C4"
    },
    "664": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "JUMP",
      "path": "10"
    },
    "665": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "666": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP3",
      "path": "10"
    },
    "667": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "ADD",
      "path": "10"
    },
    "668": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "669": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "670": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "672": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "673": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "675": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "677": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "678": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "679": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "680": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP2",
      "path": "10"
    },
    "681": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "682": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP2",
      "path": "10"
    },
    "683": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "684": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "685": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "687": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "ADD",
      "path": "10"
    },
    "688": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "689": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "691": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "ADD",
      "path": "10"
    },
    "692": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP1",
      "path": "10"
    },
    "693": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP4",
      "path": "10"
    },
    "694": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "GT",
      "path": "10"
    },
    "695": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2A7"
    },
    "698": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "699": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP3",
      "path": "10"
    },
    "700": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "701": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SUB",
      "path": "10"
    },
    "702": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1F"
    },
    "704": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "AND",
      "path": "10"
    },
    "705": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "DUP3",
      "path": "10"
    },
    "706": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "ADD",
      "path": "10"
    },
    "707": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "708": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "709": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "POP",
      "path": "10"
    },
    "710": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "POP",
      "path": "10"
    },
    "711": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "POP",
      "path": "10"
    },
    "712": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "POP",
      "path": "10"
    },
    "713": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "POP",
      "path": "10"
    },
    "714": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "715": {
      "fn": "ERC721.name",
      "offset": [
        2735,
        2747
      ],
      "op": "POP",
      "path": "10"
    },
    "716": {
      "fn": "ERC721.name",
      "offset": [
        2656,
        2754
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "717": {
      "fn": "ERC721.name",
      "jump": "o",
      "offset": [
        2656,
        2754
      ],
      "op": "JUMP",
      "path": "10"
    },
    "718": {
      "fn": "ERC721.getApproved",
      "offset": [
        4167,
        4384
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "719": {
      "fn": "ERC721.getApproved",
      "offset": [
        4243,
        4250
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "721": {
      "fn": "ERC721.getApproved",
      "offset": [
        4270,
        4286
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 2,
      "value": "0x2D9"
    },
    "724": {
      "fn": "ERC721.getApproved",
      "offset": [
        4278,
        4285
      ],
      "op": "DUP3",
      "path": "10"
    },
    "725": {
      "fn": "ERC721.getApproved",
      "offset": [
        4270,
        4277
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5AC"
    },
    "728": {
      "fn": "ERC721.getApproved",
      "jump": "i",
      "offset": [
        4270,
        4286
      ],
      "op": "JUMP",
      "path": "10"
    },
    "729": {
      "branch": 51,
      "fn": "ERC721.getApproved",
      "offset": [
        4270,
        4286
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "730": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2FE"
    },
    "733": {
      "branch": 51,
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "734": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "736": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "737": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "741": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "743": {
      "op": "SHL"
    },
    "744": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "DUP2",
      "path": "10"
    },
    "745": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "746": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "748": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "ADD",
      "path": "10"
    },
    "749": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "752": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "753": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1001"
    },
    "756": {
      "fn": "ERC721.getApproved",
      "jump": "i",
      "offset": [
        4262,
        4335
      ],
      "op": "JUMP",
      "path": "10"
    },
    "757": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "758": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "760": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "761": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "DUP1",
      "path": "10"
    },
    "762": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "763": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "SUB",
      "path": "10"
    },
    "764": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "765": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "10"
    },
    "766": {
      "fn": "ERC721.getApproved",
      "offset": [
        4262,
        4335
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "767": {
      "op": "POP"
    },
    "768": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 3,
      "value": "0x0"
    },
    "770": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "771": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "DUP2",
      "path": "10"
    },
    "772": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "773": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4368
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "775": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "777": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "778": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "780": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "781": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "782": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "783": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "785": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "787": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "789": {
      "op": "SHL"
    },
    "790": {
      "op": "SUB"
    },
    "791": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "AND",
      "path": "10"
    },
    "792": {
      "fn": "ERC721.getApproved",
      "offset": [
        4353,
        4377
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "793": {
      "fn": "ERC721.getApproved",
      "jump": "o",
      "offset": [
        4167,
        4384
      ],
      "op": "JUMP",
      "path": "10"
    },
    "794": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "795": {
      "fn": "ERC721.approve",
      "offset": [
        3785,
        3798
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "797": {
      "fn": "ERC721.approve",
      "offset": [
        3801,
        3824
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x325"
    },
    "800": {
      "fn": "ERC721.approve",
      "offset": [
        3816,
        3823
      ],
      "op": "DUP3",
      "path": "10"
    },
    "801": {
      "fn": "ERC721.approve",
      "offset": [
        3801,
        3815
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x405"
    },
    "804": {
      "fn": "ERC721.approve",
      "jump": "i",
      "offset": [
        3801,
        3824
      ],
      "op": "JUMP",
      "path": "10"
    },
    "805": {
      "fn": "ERC721.approve",
      "offset": [
        3801,
        3824
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "806": {
      "fn": "ERC721.approve",
      "offset": [
        3785,
        3824
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "807": {
      "fn": "ERC721.approve",
      "offset": [
        3785,
        3824
      ],
      "op": "POP",
      "path": "10"
    },
    "808": {
      "fn": "ERC721.approve",
      "offset": [
        3848,
        3853
      ],
      "op": "DUP1",
      "path": "10",
      "statement": 4
    },
    "809": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "811": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "813": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "815": {
      "op": "SHL"
    },
    "816": {
      "op": "SUB"
    },
    "817": {
      "fn": "ERC721.approve",
      "offset": [
        3842,
        3853
      ],
      "op": "AND",
      "path": "10"
    },
    "818": {
      "fn": "ERC721.approve",
      "offset": [
        3842,
        3844
      ],
      "op": "DUP4",
      "path": "10"
    },
    "819": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "821": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "823": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "825": {
      "op": "SHL"
    },
    "826": {
      "op": "SUB"
    },
    "827": {
      "fn": "ERC721.approve",
      "offset": [
        3842,
        3853
      ],
      "op": "AND",
      "path": "10"
    },
    "828": {
      "fn": "ERC721.approve",
      "offset": [
        3842,
        3853
      ],
      "op": "EQ",
      "path": "10"
    },
    "829": {
      "branch": 52,
      "fn": "ERC721.approve",
      "offset": [
        3842,
        3853
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "830": {
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x359"
    },
    "833": {
      "branch": 52,
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "834": {
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "836": {
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "837": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "841": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "843": {
      "op": "SHL"
    },
    "844": {
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "DUP2",
      "path": "10"
    },
    "845": {
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "846": {
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "848": {
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "ADD",
      "path": "10"
    },
    "849": {
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "852": {
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "853": {
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x10E5"
    },
    "856": {
      "fn": "ERC721.approve",
      "jump": "i",
      "offset": [
        3834,
        3891
      ],
      "op": "JUMP",
      "path": "10"
    },
    "857": {
      "fn": "ERC721.approve",
      "offset": [
        3834,
        3891
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "858": {
      "fn": "ERC721.approve",
      "offset": [
        3939,
        3944
      ],
      "op": "DUP1",
      "path": "10",
      "statement": 5
    },
    "859": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "861": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "863": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "865": {
      "op": "SHL"
    },
    "866": {
      "op": "SUB"
    },
    "867": {
      "fn": "ERC721.approve",
      "offset": [
        3923,
        3944
      ],
      "op": "AND",
      "path": "10"
    },
    "868": {
      "fn": "ERC721.approve",
      "offset": [
        3923,
        3935
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x36B"
    },
    "871": {
      "fn": "ERC721.approve",
      "offset": [
        3923,
        3933
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5C9"
    },
    "874": {
      "fn": "ERC721.approve",
      "jump": "i",
      "offset": [
        3923,
        3935
      ],
      "op": "JUMP",
      "path": "10"
    },
    "875": {
      "fn": "ERC721.approve",
      "offset": [
        3923,
        3935
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "876": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "878": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "880": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "882": {
      "op": "SHL"
    },
    "883": {
      "op": "SUB"
    },
    "884": {
      "fn": "ERC721.approve",
      "offset": [
        3923,
        3944
      ],
      "op": "AND",
      "path": "10"
    },
    "885": {
      "branch": 53,
      "fn": "ERC721.approve",
      "offset": [
        3923,
        3944
      ],
      "op": "EQ",
      "path": "10"
    },
    "886": {
      "fn": "ERC721.approve",
      "offset": [
        3923,
        3985
      ],
      "op": "DUP1",
      "path": "10"
    },
    "887": {
      "fn": "ERC721.approve",
      "offset": [
        3923,
        3985
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x387"
    },
    "890": {
      "branch": 53,
      "fn": "ERC721.approve",
      "offset": [
        3923,
        3985
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "891": {
      "fn": "ERC721.approve",
      "offset": [
        3923,
        3985
      ],
      "op": "POP",
      "path": "10"
    },
    "892": {
      "fn": "ERC721.approve",
      "offset": [
        3948,
        3985
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x387"
    },
    "895": {
      "fn": "ERC721.approve",
      "offset": [
        3965,
        3970
      ],
      "op": "DUP2",
      "path": "10"
    },
    "896": {
      "fn": "ERC721.approve",
      "offset": [
        3972,
        3984
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1EF"
    },
    "899": {
      "fn": "ERC721.approve",
      "offset": [
        3972,
        3982
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5C9"
    },
    "902": {
      "fn": "ERC721.approve",
      "jump": "i",
      "offset": [
        3972,
        3984
      ],
      "op": "JUMP",
      "path": "10"
    },
    "903": {
      "branch": 54,
      "fn": "ERC721.approve",
      "offset": [
        3948,
        3985
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "904": {
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3A3"
    },
    "907": {
      "branch": 54,
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "908": {
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "910": {
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "911": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "915": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "917": {
      "op": "SHL"
    },
    "918": {
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "DUP2",
      "path": "10"
    },
    "919": {
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "920": {
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "922": {
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "ADD",
      "path": "10"
    },
    "923": {
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "926": {
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "927": {
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xF11"
    },
    "930": {
      "fn": "ERC721.approve",
      "jump": "i",
      "offset": [
        3902,
        4067
      ],
      "op": "JUMP",
      "path": "10"
    },
    "931": {
      "fn": "ERC721.approve",
      "offset": [
        3902,
        4067
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "932": {
      "fn": "ERC721.approve",
      "offset": [
        4078,
        4099
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 6,
      "value": "0x3AD"
    },
    "935": {
      "fn": "ERC721.approve",
      "offset": [
        4087,
        4089
      ],
      "op": "DUP4",
      "path": "10"
    },
    "936": {
      "fn": "ERC721.approve",
      "offset": [
        4091,
        4098
      ],
      "op": "DUP4",
      "path": "10"
    },
    "937": {
      "fn": "ERC721.approve",
      "offset": [
        4078,
        4086
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5CD"
    },
    "940": {
      "fn": "ERC721.approve",
      "jump": "i",
      "offset": [
        4078,
        4099
      ],
      "op": "JUMP",
      "path": "10"
    },
    "941": {
      "fn": "ERC721.approve",
      "offset": [
        4078,
        4099
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "942": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "POP",
      "path": "10"
    },
    "943": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "POP",
      "path": "10"
    },
    "944": {
      "fn": "ERC721.approve",
      "offset": [
        3705,
        4106
      ],
      "op": "POP",
      "path": "10"
    },
    "945": {
      "fn": "ERC721.approve",
      "jump": "o",
      "offset": [
        3705,
        4106
      ],
      "op": "JUMP",
      "path": "10"
    },
    "946": {
      "fn": "ERC721.transferFrom",
      "offset": [
        4894,
        5224
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "947": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5083,
        5124
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 7,
      "value": "0x3C3"
    },
    "950": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5102,
        5114
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3BD"
    },
    "953": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5102,
        5112
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5C9"
    },
    "956": {
      "fn": "ERC721.transferFrom",
      "jump": "i",
      "offset": [
        5102,
        5114
      ],
      "op": "JUMP",
      "path": "10"
    },
    "957": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5102,
        5114
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "958": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5116,
        5123
      ],
      "op": "DUP3",
      "path": "10"
    },
    "959": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5083,
        5101
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x63B"
    },
    "962": {
      "fn": "ERC721.transferFrom",
      "jump": "i",
      "offset": [
        5083,
        5124
      ],
      "op": "JUMP",
      "path": "10"
    },
    "963": {
      "branch": 55,
      "fn": "ERC721.transferFrom",
      "offset": [
        5083,
        5124
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "964": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3DF"
    },
    "967": {
      "branch": 55,
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "968": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "970": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "971": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "975": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "977": {
      "op": "SHL"
    },
    "978": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "DUP2",
      "path": "10"
    },
    "979": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "980": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "982": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "ADD",
      "path": "10"
    },
    "983": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "986": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "987": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1126"
    },
    "990": {
      "fn": "ERC721.transferFrom",
      "jump": "i",
      "offset": [
        5075,
        5178
      ],
      "op": "JUMP",
      "path": "10"
    },
    "991": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5075,
        5178
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "992": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5189,
        5217
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 8,
      "value": "0x3AD"
    },
    "995": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5199,
        5203
      ],
      "op": "DUP4",
      "path": "10"
    },
    "996": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5205,
        5207
      ],
      "op": "DUP4",
      "path": "10"
    },
    "997": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5209,
        5216
      ],
      "op": "DUP4",
      "path": "10"
    },
    "998": {
      "fn": "ERC721.transferFrom",
      "offset": [
        5189,
        5198
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x6C0"
    },
    "1001": {
      "fn": "ERC721.transferFrom",
      "jump": "i",
      "offset": [
        5189,
        5217
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1002": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5290,
        5469
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1003": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 9,
      "value": "0x3AD"
    },
    "1006": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5440,
        5444
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1007": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5446,
        5448
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1008": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5450,
        5457
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1009": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1011": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1012": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1013": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1015": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "ADD",
      "path": "10"
    },
    "1016": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1018": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1019": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1020": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1022": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1023": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1024": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5462
      ],
      "op": "POP",
      "path": "10"
    },
    "1025": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5423,
        5439
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x4A3"
    },
    "1028": {
      "fn": "ERC721.safeTransferFrom",
      "jump": "i",
      "offset": [
        5423,
        5462
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1029": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2359,
        2594
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1030": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2431,
        2438
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1032": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2466,
        2482
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1033": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2466,
        2482
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1034": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2466,
        2482
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1035": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2466,
        2473
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x2"
    },
    "1037": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2466,
        2482
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1039": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2466,
        2482
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1040": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2466,
        2482
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1042": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2466,
        2482
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1043": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2466,
        2482
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1044": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2466,
        2482
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1045": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1049": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1051": {
      "op": "SHL"
    },
    "1052": {
      "op": "SUB"
    },
    "1053": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2466,
        2482
      ],
      "op": "AND",
      "path": "10"
    },
    "1054": {
      "branch": 56,
      "fn": "ERC721.ownerOf",
      "offset": [
        2500,
        2519
      ],
      "op": "DUP1",
      "path": "10",
      "statement": 10
    },
    "1055": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2492,
        2565
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x234"
    },
    "1058": {
      "branch": 56,
      "fn": "ERC721.ownerOf",
      "offset": [
        2492,
        2565
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1059": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2492,
        2565
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1061": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2492,
        2565
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1062": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1066": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1068": {
      "op": "SHL"
    },
    "1069": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2492,
        2565
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1070": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2492,
        2565
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1071": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2492,
        2565
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1073": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2492,
        2565
      ],
      "op": "ADD",
      "path": "10"
    },
    "1074": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2492,
        2565
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "1077": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2492,
        2565
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1078": {
      "fn": "ERC721.ownerOf",
      "offset": [
        2492,
        2565
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xFB8"
    },
    "1081": {
      "fn": "ERC721.ownerOf",
      "jump": "i",
      "offset": [
        2492,
        2565
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1082": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2097,
        2302
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1083": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2169,
        2176
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1085": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1087": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1089": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1091": {
      "op": "SHL"
    },
    "1092": {
      "op": "SUB"
    },
    "1093": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2196,
        2215
      ],
      "op": "DUP3",
      "path": "10",
      "statement": 11
    },
    "1094": {
      "branch": 57,
      "fn": "ERC721.balanceOf",
      "offset": [
        2196,
        2215
      ],
      "op": "AND",
      "path": "10"
    },
    "1095": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x462"
    },
    "1098": {
      "branch": 57,
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1099": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1101": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1102": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1106": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1108": {
      "op": "SHL"
    },
    "1109": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1110": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1111": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1113": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "ADD",
      "path": "10"
    },
    "1114": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "1117": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1118": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xF6E"
    },
    "1121": {
      "fn": "ERC721.balanceOf",
      "jump": "i",
      "offset": [
        2188,
        2262
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1122": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2188,
        2262
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1123": {
      "op": "POP"
    },
    "1124": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1126": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1128": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1130": {
      "op": "SHL"
    },
    "1131": {
      "op": "SUB"
    },
    "1132": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "AND",
      "path": "10",
      "statement": 12
    },
    "1133": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1135": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1136": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1137": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1138": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2288
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x3"
    },
    "1140": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1142": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1143": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1145": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1146": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1147": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1148": {
      "fn": "ERC721.balanceOf",
      "offset": [
        2279,
        2295
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1149": {
      "fn": "ERC721.balanceOf",
      "jump": "o",
      "offset": [
        2097,
        2302
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1150": {
      "fn": "ERC721.symbol",
      "offset": [
        2818,
        2920
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1151": {
      "fn": "ERC721.symbol",
      "offset": [
        2874,
        2887
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "1153": {
      "fn": "ERC721.symbol",
      "offset": [
        2906,
        2913
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 13,
      "value": "0x1"
    },
    "1155": {
      "fn": "ERC721.symbol",
      "offset": [
        2899,
        2913
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1156": {
      "fn": "ERC721.symbol",
      "offset": [
        2899,
        2913
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1157": {
      "fn": "ERC721.symbol",
      "offset": [
        2899,
        2913
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x24B"
    },
    "1160": {
      "fn": "ERC721.symbol",
      "offset": [
        2899,
        2913
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1161": {
      "fn": "ERC721.symbol",
      "offset": [
        2899,
        2913
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x11EF"
    },
    "1164": {
      "fn": "ERC721.symbol",
      "jump": "i",
      "offset": [
        2899,
        2913
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1165": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4451,
        4604
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1166": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4545,
        4597
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 14,
      "value": "0x49F"
    },
    "1169": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4564,
        4576
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x498"
    },
    "1172": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4564,
        4574
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5C9"
    },
    "1175": {
      "fn": "ERC721.setApprovalForAll",
      "jump": "i",
      "offset": [
        4564,
        4576
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1176": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4564,
        4576
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1177": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4578,
        4586
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1178": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4588,
        4596
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1179": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4545,
        4563
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x7ED"
    },
    "1182": {
      "fn": "ERC721.setApprovalForAll",
      "jump": "i",
      "offset": [
        4545,
        4597
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1183": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4545,
        4597
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1184": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4451,
        4604
      ],
      "op": "POP",
      "path": "10"
    },
    "1185": {
      "fn": "ERC721.setApprovalForAll",
      "offset": [
        4451,
        4604
      ],
      "op": "POP",
      "path": "10"
    },
    "1186": {
      "fn": "ERC721.setApprovalForAll",
      "jump": "o",
      "offset": [
        4451,
        4604
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1187": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1188": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5704,
        5745
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 15,
      "value": "0x4B4"
    },
    "1191": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5723,
        5735
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x4AE"
    },
    "1194": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5723,
        5733
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5C9"
    },
    "1197": {
      "fn": "ERC721.safeTransferFrom",
      "jump": "i",
      "offset": [
        5723,
        5735
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1198": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5723,
        5735
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1199": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5737,
        5744
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1200": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5704,
        5722
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x63B"
    },
    "1203": {
      "fn": "ERC721.safeTransferFrom",
      "jump": "i",
      "offset": [
        5704,
        5745
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1204": {
      "branch": 58,
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5704,
        5745
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1205": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x4D0"
    },
    "1208": {
      "branch": 58,
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1209": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1211": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1212": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1216": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1218": {
      "op": "SHL"
    },
    "1219": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1220": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1221": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1223": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "ADD",
      "path": "10"
    },
    "1224": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "1227": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1228": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1126"
    },
    "1231": {
      "fn": "ERC721.safeTransferFrom",
      "jump": "i",
      "offset": [
        5696,
        5799
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1232": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5696,
        5799
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1233": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5809,
        5848
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 16,
      "value": "0x4DC"
    },
    "1236": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5823,
        5827
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1237": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5829,
        5831
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1238": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5833,
        5840
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1239": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5842,
        5847
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1240": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5809,
        5822
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x890"
    },
    "1243": {
      "fn": "ERC721.safeTransferFrom",
      "jump": "i",
      "offset": [
        5809,
        5848
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1244": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5809,
        5848
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1245": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "POP",
      "path": "10"
    },
    "1246": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "POP",
      "path": "10"
    },
    "1247": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "POP",
      "path": "10"
    },
    "1248": {
      "fn": "ERC721.safeTransferFrom",
      "offset": [
        5535,
        5855
      ],
      "op": "POP",
      "path": "10"
    },
    "1249": {
      "fn": "ERC721.safeTransferFrom",
      "jump": "o",
      "offset": [
        5535,
        5855
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1250": {
      "fn": "ERC721.tokenURI",
      "offset": [
        2986,
        3315
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1251": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3059,
        3072
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "1253": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3092,
        3108
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 17,
      "value": "0x4ED"
    },
    "1256": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3100,
        3107
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1257": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3092,
        3099
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5AC"
    },
    "1260": {
      "fn": "ERC721.tokenURI",
      "jump": "i",
      "offset": [
        3092,
        3108
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1261": {
      "branch": 59,
      "fn": "ERC721.tokenURI",
      "offset": [
        3092,
        3108
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1262": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x509"
    },
    "1265": {
      "branch": 59,
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1266": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1268": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1269": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1273": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1275": {
      "op": "SHL"
    },
    "1276": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1277": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1278": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1280": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "ADD",
      "path": "10"
    },
    "1281": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "1284": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1285": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1096"
    },
    "1288": {
      "fn": "ERC721.tokenURI",
      "jump": "i",
      "offset": [
        3084,
        3160
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1289": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3084,
        3160
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1290": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3171,
        3192
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1292": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3195,
        3205
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x513"
    },
    "1295": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3195,
        3203
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x8C3"
    },
    "1298": {
      "fn": "ERC721.tokenURI",
      "jump": "i",
      "offset": [
        3195,
        3205
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1299": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3195,
        3205
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1300": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3171,
        3205
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1301": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3171,
        3205
      ],
      "op": "POP",
      "path": "10"
    },
    "1302": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3246,
        3247
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 18,
      "value": "0x0"
    },
    "1304": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3228,
        3235
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1305": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3243
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1306": {
      "branch": 60,
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3247
      ],
      "op": "GT",
      "path": "10"
    },
    "1307": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x533"
    },
    "1310": {
      "branch": 60,
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1311": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1313": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1314": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1315": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1317": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "ADD",
      "path": "10"
    },
    "1318": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1320": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1321": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1322": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1324": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1325": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1326": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "POP",
      "path": "10"
    },
    "1327": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x55E"
    },
    "1330": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1331": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1332": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3274,
        3281
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1333": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3283,
        3301
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x53D"
    },
    "1336": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3283,
        3290
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1337": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3283,
        3299
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x8D5"
    },
    "1340": {
      "fn": "ERC721.tokenURI",
      "jump": "i",
      "offset": [
        3283,
        3301
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1341": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3283,
        3301
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1342": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1344": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1345": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1347": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "ADD",
      "path": "10"
    },
    "1348": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x54E"
    },
    "1351": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "1352": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1353": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1354": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xD5A"
    },
    "1357": {
      "fn": "ERC721.tokenURI",
      "jump": "i",
      "offset": [
        3257,
        3302
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1358": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1359": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1361": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1362": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1364": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1365": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1366": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "SUB",
      "path": "10"
    },
    "1367": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "SUB",
      "path": "10"
    },
    "1368": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1369": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1370": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1371": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1373": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3257,
        3302
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1374": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3222,
        3308
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1375": {
      "fn": "ERC721.tokenURI",
      "offset": [
        3215,
        3308
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "1376": {
      "fn": "ERC721.tokenURI",
      "offset": [
        2986,
        3315
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "1377": {
      "op": "POP"
    },
    "1378": {
      "op": "POP"
    },
    "1379": {
      "op": "POP"
    },
    "1380": {
      "fn": "ERC721.tokenURI",
      "jump": "o",
      "offset": [
        2986,
        3315
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1381": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4670,
        4832
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1382": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1384": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1386": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1388": {
      "op": "SHL"
    },
    "1389": {
      "op": "SUB"
    },
    "1390": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "SWAP2",
      "path": "10",
      "statement": 19
    },
    "1391": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1392": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "AND",
      "path": "10"
    },
    "1393": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4767,
        4771
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1395": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1396": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1397": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1398": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4808
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x5"
    },
    "1400": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1402": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1403": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1404": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1405": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1407": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1408": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1409": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4815
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1410": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "1411": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1412": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "1413": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "AND",
      "path": "10"
    },
    "1414": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1415": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1416": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1417": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1418": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1419": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1420": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1421": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1422": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "1424": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "AND",
      "path": "10"
    },
    "1425": {
      "fn": "ERC721.isApprovedForAll",
      "offset": [
        4790,
        4825
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1426": {
      "fn": "ERC721.isApprovedForAll",
      "jump": "o",
      "offset": [
        4670,
        4832
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1427": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        829,
        984
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1428": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1430": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1432": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1434": {
      "op": "SHL"
    },
    "1435": {
      "op": "SUB"
    },
    "1436": {
      "op": "NOT"
    },
    "1437": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        937,
        977
      ],
      "op": "DUP2",
      "path": "8",
      "statement": 20
    },
    "1438": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        937,
        977
      ],
      "op": "AND",
      "path": "8"
    },
    "1439": {
      "op": "PUSH4",
      "value": "0x1FFC9A7"
    },
    "1444": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1446": {
      "op": "SHL"
    },
    "1447": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        937,
        977
      ],
      "op": "EQ",
      "path": "8"
    },
    "1448": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        829,
        984
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "1449": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        829,
        984
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1450": {
      "fn": "ERC165.supportsInterface",
      "offset": [
        829,
        984
      ],
      "op": "POP",
      "path": "8"
    },
    "1451": {
      "fn": "ERC165.supportsInterface",
      "jump": "o",
      "offset": [
        829,
        984
      ],
      "op": "JUMP",
      "path": "8"
    },
    "1452": {
      "fn": "ERC721._exists",
      "offset": [
        7327,
        7452
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1453": {
      "fn": "ERC721._exists",
      "offset": [
        7392,
        7396
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1455": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7431
      ],
      "op": "SWAP1",
      "path": "10",
      "statement": 21
    },
    "1456": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7431
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1457": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7431
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1458": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7422
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x2"
    },
    "1460": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7431
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1462": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7431
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1463": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7431
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1465": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7431
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1466": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7431
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1467": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7431
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1468": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1470": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1472": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1474": {
      "op": "SHL"
    },
    "1475": {
      "op": "SUB"
    },
    "1476": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7431
      ],
      "op": "AND",
      "path": "10"
    },
    "1477": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7445
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "1478": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7445
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "1479": {
      "fn": "ERC721._exists",
      "offset": [
        7415,
        7445
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1480": {
      "fn": "ERC721._exists",
      "jump": "o",
      "offset": [
        7327,
        7452
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1481": {
      "fn": "Context._msgSender",
      "offset": [
        640,
        736
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1482": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "5",
      "statement": 22
    },
    "1483": {
      "fn": "Context._msgSender",
      "offset": [
        640,
        736
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1484": {
      "fn": "Context._msgSender",
      "jump": "o",
      "offset": [
        640,
        736
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1485": {
      "fn": "ERC721._approve",
      "offset": [
        11178,
        11349
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1486": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 23,
      "value": "0x0"
    },
    "1488": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1489": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1490": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1491": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11267
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1493": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1495": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1496": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1498": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1499": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1500": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11281
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1501": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11281
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1502": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1504": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1506": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1508": {
      "op": "SHL"
    },
    "1509": {
      "op": "SUB"
    },
    "1510": {
      "op": "NOT"
    },
    "1511": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11281
      ],
      "op": "AND",
      "path": "10"
    },
    "1512": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1514": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1516": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1518": {
      "op": "SHL"
    },
    "1519": {
      "op": "SUB"
    },
    "1520": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11281
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1521": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11281
      ],
      "op": "AND",
      "path": "10"
    },
    "1522": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11281
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1523": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11281
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1524": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11281
      ],
      "op": "OR",
      "path": "10"
    },
    "1525": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11281
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1526": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11281
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1527": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11281
      ],
      "op": "SSTORE",
      "path": "10"
    },
    "1528": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1529": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1530": {
      "fn": "ERC721._approve",
      "offset": [
        11305,
        11328
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 24,
      "value": "0x602"
    },
    "1533": {
      "fn": "ERC721._approve",
      "offset": [
        11252,
        11276
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1534": {
      "fn": "ERC721._approve",
      "offset": [
        11305,
        11319
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x405"
    },
    "1537": {
      "fn": "ERC721._approve",
      "jump": "i",
      "offset": [
        11305,
        11328
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1538": {
      "fn": "ERC721._approve",
      "offset": [
        11305,
        11328
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1539": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1541": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1543": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1545": {
      "op": "SHL"
    },
    "1546": {
      "op": "SUB"
    },
    "1547": {
      "fn": "ERC721._approve",
      "offset": [
        11296,
        11342
      ],
      "op": "AND",
      "path": "10"
    },
    "1548": {
      "fn": "ERC721._approve",
      "offset": [
        11296,
        11342
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1581": {
      "fn": "ERC721._approve",
      "offset": [
        11296,
        11342
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1583": {
      "fn": "ERC721._approve",
      "offset": [
        11296,
        11342
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1584": {
      "fn": "ERC721._approve",
      "offset": [
        11296,
        11342
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1586": {
      "fn": "ERC721._approve",
      "offset": [
        11296,
        11342
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1587": {
      "fn": "ERC721._approve",
      "offset": [
        11296,
        11342
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1588": {
      "fn": "ERC721._approve",
      "offset": [
        11296,
        11342
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1589": {
      "fn": "ERC721._approve",
      "offset": [
        11296,
        11342
      ],
      "op": "SUB",
      "path": "10"
    },
    "1590": {
      "fn": "ERC721._approve",
      "offset": [
        11296,
        11342
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1591": {
      "fn": "ERC721._approve",
      "offset": [
        11296,
        11342
      ],
      "op": "LOG4",
      "path": "10"
    },
    "1592": {
      "fn": "ERC721._approve",
      "offset": [
        11178,
        11349
      ],
      "op": "POP",
      "path": "10"
    },
    "1593": {
      "fn": "ERC721._approve",
      "offset": [
        11178,
        11349
      ],
      "op": "POP",
      "path": "10"
    },
    "1594": {
      "fn": "ERC721._approve",
      "jump": "o",
      "offset": [
        11178,
        11349
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1595": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7610,
        7954
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1596": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7703,
        7707
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1598": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7727,
        7743
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 25,
      "value": "0x646"
    },
    "1601": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7735,
        7742
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1602": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7727,
        7734
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5AC"
    },
    "1605": {
      "fn": "ERC721._isApprovedOrOwner",
      "jump": "i",
      "offset": [
        7727,
        7743
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1606": {
      "branch": 61,
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7727,
        7743
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1607": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x662"
    },
    "1610": {
      "branch": 61,
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1611": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1613": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1614": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1618": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1620": {
      "op": "SHL"
    },
    "1621": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1622": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1623": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1625": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "ADD",
      "path": "10"
    },
    "1626": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "1629": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1630": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xEC5"
    },
    "1633": {
      "fn": "ERC721._isApprovedOrOwner",
      "jump": "i",
      "offset": [
        7719,
        7792
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1634": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7719,
        7792
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1635": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7802,
        7815
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1637": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7818,
        7841
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x66D"
    },
    "1640": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7833,
        7840
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1641": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7818,
        7832
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x405"
    },
    "1644": {
      "fn": "ERC721._isApprovedOrOwner",
      "jump": "i",
      "offset": [
        7818,
        7841
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1645": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7818,
        7841
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1646": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7802,
        7841
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1647": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7802,
        7841
      ],
      "op": "POP",
      "path": "10"
    },
    "1648": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7870,
        7875
      ],
      "op": "DUP1",
      "path": "10",
      "statement": 26
    },
    "1649": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1651": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1653": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1655": {
      "op": "SHL"
    },
    "1656": {
      "op": "SUB"
    },
    "1657": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7875
      ],
      "op": "AND",
      "path": "10"
    },
    "1658": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7866
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1659": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1661": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1663": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1665": {
      "op": "SHL"
    },
    "1666": {
      "op": "SUB"
    },
    "1667": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7875
      ],
      "op": "AND",
      "path": "10"
    },
    "1668": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7875
      ],
      "op": "EQ",
      "path": "10"
    },
    "1669": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7910
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1670": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7910
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x6A8"
    },
    "1673": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7910
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1674": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7910
      ],
      "op": "POP",
      "path": "10"
    },
    "1675": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7903,
        7910
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1676": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1678": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1680": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1682": {
      "op": "SHL"
    },
    "1683": {
      "op": "SUB"
    },
    "1684": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7879,
        7910
      ],
      "op": "AND",
      "path": "10"
    },
    "1685": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7879,
        7899
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x69D"
    },
    "1688": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7891,
        7898
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1689": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7879,
        7890
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2CE"
    },
    "1692": {
      "fn": "ERC721._isApprovedOrOwner",
      "jump": "i",
      "offset": [
        7879,
        7899
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1693": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7879,
        7899
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1694": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1696": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1698": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1700": {
      "op": "SHL"
    },
    "1701": {
      "op": "SUB"
    },
    "1702": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7879,
        7910
      ],
      "op": "AND",
      "path": "10"
    },
    "1703": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7879,
        7910
      ],
      "op": "EQ",
      "path": "10"
    },
    "1704": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7910
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1705": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7946
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1706": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7946
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x6B8"
    },
    "1709": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7946
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1710": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7859,
        7946
      ],
      "op": "POP",
      "path": "10"
    },
    "1711": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7914,
        7946
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x6B8"
    },
    "1714": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7931,
        7936
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1715": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7938,
        7945
      ],
      "op": "DUP6",
      "path": "10"
    },
    "1716": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7914,
        7930
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x565"
    },
    "1719": {
      "fn": "ERC721._isApprovedOrOwner",
      "jump": "i",
      "offset": [
        7914,
        7946
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1720": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7914,
        7946
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1721": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7851,
        7947
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "1722": {
      "fn": "ERC721._isApprovedOrOwner",
      "offset": [
        7610,
        7954
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "1723": {
      "op": "POP"
    },
    "1724": {
      "op": "POP"
    },
    "1725": {
      "op": "POP"
    },
    "1726": {
      "op": "POP"
    },
    "1727": {
      "fn": "ERC721._isApprovedOrOwner",
      "jump": "o",
      "offset": [
        7610,
        7954
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1728": {
      "fn": "ERC721._transfer",
      "offset": [
        10507,
        11067
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1729": {
      "fn": "ERC721._transfer",
      "offset": [
        10661,
        10665
      ],
      "op": "DUP3",
      "path": "10",
      "statement": 27
    },
    "1730": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1732": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1734": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1736": {
      "op": "SHL"
    },
    "1737": {
      "op": "SUB"
    },
    "1738": {
      "fn": "ERC721._transfer",
      "offset": [
        10634,
        10665
      ],
      "op": "AND",
      "path": "10"
    },
    "1739": {
      "fn": "ERC721._transfer",
      "offset": [
        10634,
        10657
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x6D3"
    },
    "1742": {
      "fn": "ERC721._transfer",
      "offset": [
        10649,
        10656
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1743": {
      "fn": "ERC721._transfer",
      "offset": [
        10634,
        10648
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x405"
    },
    "1746": {
      "fn": "ERC721._transfer",
      "jump": "i",
      "offset": [
        10634,
        10657
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1747": {
      "fn": "ERC721._transfer",
      "offset": [
        10634,
        10657
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1748": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1750": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1752": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1754": {
      "op": "SHL"
    },
    "1755": {
      "op": "SUB"
    },
    "1756": {
      "fn": "ERC721._transfer",
      "offset": [
        10634,
        10665
      ],
      "op": "AND",
      "path": "10"
    },
    "1757": {
      "branch": 62,
      "fn": "ERC721._transfer",
      "offset": [
        10634,
        10665
      ],
      "op": "EQ",
      "path": "10"
    },
    "1758": {
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x6F9"
    },
    "1761": {
      "branch": 62,
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1762": {
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1764": {
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1765": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1769": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1771": {
      "op": "SHL"
    },
    "1772": {
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1773": {
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1774": {
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1776": {
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "ADD",
      "path": "10"
    },
    "1777": {
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "1780": {
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1781": {
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x104D"
    },
    "1784": {
      "fn": "ERC721._transfer",
      "jump": "i",
      "offset": [
        10626,
        10711
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1785": {
      "fn": "ERC721._transfer",
      "offset": [
        10626,
        10711
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1786": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1788": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1790": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1792": {
      "op": "SHL"
    },
    "1793": {
      "op": "SUB"
    },
    "1794": {
      "fn": "ERC721._transfer",
      "offset": [
        10729,
        10745
      ],
      "op": "DUP3",
      "path": "10",
      "statement": 28
    },
    "1795": {
      "branch": 63,
      "fn": "ERC721._transfer",
      "offset": [
        10729,
        10745
      ],
      "op": "AND",
      "path": "10"
    },
    "1796": {
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x71F"
    },
    "1799": {
      "branch": 63,
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1800": {
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1802": {
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1803": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1807": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1809": {
      "op": "SHL"
    },
    "1810": {
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1811": {
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1812": {
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1814": {
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "ADD",
      "path": "10"
    },
    "1815": {
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "1818": {
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1819": {
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xE4A"
    },
    "1822": {
      "fn": "ERC721._transfer",
      "jump": "i",
      "offset": [
        10721,
        10786
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1823": {
      "fn": "ERC721._transfer",
      "offset": [
        10721,
        10786
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1824": {
      "fn": "ERC721._transfer",
      "offset": [
        10797,
        10836
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 29,
      "value": "0x72A"
    },
    "1827": {
      "fn": "ERC721._transfer",
      "offset": [
        10818,
        10822
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1828": {
      "fn": "ERC721._transfer",
      "offset": [
        10824,
        10826
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1829": {
      "fn": "ERC721._transfer",
      "offset": [
        10828,
        10835
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1830": {
      "fn": "ERC721._transfer",
      "offset": [
        10797,
        10817
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x3AD"
    },
    "1833": {
      "fn": "ERC721._transfer",
      "jump": "i",
      "offset": [
        10797,
        10836
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1834": {
      "fn": "ERC721._transfer",
      "offset": [
        10797,
        10836
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1835": {
      "fn": "ERC721._transfer",
      "offset": [
        10898,
        10927
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 30,
      "value": "0x735"
    },
    "1838": {
      "fn": "ERC721._transfer",
      "offset": [
        10915,
        10916
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1840": {
      "fn": "ERC721._transfer",
      "offset": [
        10919,
        10926
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1841": {
      "fn": "ERC721._transfer",
      "offset": [
        10898,
        10906
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5CD"
    },
    "1844": {
      "fn": "ERC721._transfer",
      "jump": "i",
      "offset": [
        10898,
        10927
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1845": {
      "fn": "ERC721._transfer",
      "offset": [
        10898,
        10927
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1846": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1848": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1850": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1852": {
      "op": "SHL"
    },
    "1853": {
      "op": "SUB"
    },
    "1854": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "DUP4",
      "path": "10",
      "statement": 31
    },
    "1855": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "AND",
      "path": "10"
    },
    "1856": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1858": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1859": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1860": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1861": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10947
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x3"
    },
    "1863": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1865": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1866": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1868": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1869": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1870": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10958
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1871": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10958
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1872": {
      "fn": "ERC721._transfer",
      "offset": [
        10957,
        10958
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "1874": {
      "fn": "ERC721._transfer",
      "offset": [
        10957,
        10958
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "1875": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10953
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1876": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10958
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x75E"
    },
    "1879": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10958
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1880": {
      "fn": "ERC721._transfer",
      "offset": [
        10957,
        10958
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1881": {
      "fn": "ERC721._transfer",
      "offset": [
        10957,
        10958
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1882": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10958
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x11AC"
    },
    "1885": {
      "fn": "ERC721._transfer",
      "jump": "i",
      "offset": [
        10938,
        10958
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1886": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10958
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1887": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10958
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1888": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10958
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1889": {
      "fn": "ERC721._transfer",
      "offset": [
        10938,
        10958
      ],
      "op": "SSTORE",
      "path": "10"
    },
    "1890": {
      "op": "POP"
    },
    "1891": {
      "op": "POP"
    },
    "1892": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1894": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1896": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1898": {
      "op": "SHL"
    },
    "1899": {
      "op": "SUB"
    },
    "1900": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "DUP3",
      "path": "10",
      "statement": 32
    },
    "1901": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "AND",
      "path": "10"
    },
    "1902": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1904": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1905": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1906": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1907": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10977
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x3"
    },
    "1909": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1911": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1912": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1914": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1915": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1916": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10986
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1917": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10986
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1918": {
      "fn": "ERC721._transfer",
      "offset": [
        10985,
        10986
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "1920": {
      "fn": "ERC721._transfer",
      "offset": [
        10985,
        10986
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "1921": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10981
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1922": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10986
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x78C"
    },
    "1925": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10986
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1926": {
      "fn": "ERC721._transfer",
      "offset": [
        10985,
        10986
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1927": {
      "fn": "ERC721._transfer",
      "offset": [
        10985,
        10986
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1928": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10986
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x1180"
    },
    "1931": {
      "fn": "ERC721._transfer",
      "jump": "i",
      "offset": [
        10968,
        10986
      ],
      "op": "JUMP",
      "path": "10"
    },
    "1932": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10986
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1933": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10986
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1934": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10986
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1935": {
      "fn": "ERC721._transfer",
      "offset": [
        10968,
        10986
      ],
      "op": "SSTORE",
      "path": "10"
    },
    "1936": {
      "op": "POP"
    },
    "1937": {
      "op": "POP"
    },
    "1938": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 33,
      "value": "0x0"
    },
    "1940": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1941": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1942": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1943": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11003
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x2"
    },
    "1945": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "1947": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1948": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1950": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1951": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1952": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "1953": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1954": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1955": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1957": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1959": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1961": {
      "op": "SHL"
    },
    "1962": {
      "op": "SUB"
    },
    "1963": {
      "op": "NOT"
    },
    "1964": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "AND",
      "path": "10"
    },
    "1965": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1967": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1969": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1971": {
      "op": "SHL"
    },
    "1972": {
      "op": "SUB"
    },
    "1973": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "DUP7",
      "path": "10"
    },
    "1974": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1975": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "AND",
      "path": "10"
    },
    "1976": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1977": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1978": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "OR",
      "path": "10"
    },
    "1979": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1980": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "1981": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11017
      ],
      "op": "SSTORE",
      "path": "10"
    },
    "1982": {
      "fn": "ERC721._transfer",
      "offset": [
        11033,
        11060
      ],
      "op": "SWAP2",
      "path": "10",
      "statement": 34
    },
    "1983": {
      "fn": "ERC721._transfer",
      "offset": [
        11033,
        11060
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1984": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "DUP5",
      "path": "10"
    },
    "1985": {
      "fn": "ERC721._transfer",
      "offset": [
        10996,
        11012
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "1986": {
      "fn": "ERC721._transfer",
      "offset": [
        11033,
        11060
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1987": {
      "fn": "ERC721._transfer",
      "offset": [
        11033,
        11060
      ],
      "op": "DUP8",
      "path": "10"
    },
    "1988": {
      "fn": "ERC721._transfer",
      "offset": [
        11033,
        11060
      ],
      "op": "AND",
      "path": "10"
    },
    "1989": {
      "fn": "ERC721._transfer",
      "offset": [
        11033,
        11060
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1990": {
      "fn": "ERC721._transfer",
      "offset": [
        11033,
        11060
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "2023": {
      "fn": "ERC721._transfer",
      "offset": [
        11033,
        11060
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "2024": {
      "fn": "ERC721._transfer",
      "offset": [
        11033,
        11060
      ],
      "op": "LOG4",
      "path": "10"
    },
    "2025": {
      "fn": "ERC721._transfer",
      "offset": [
        10507,
        11067
      ],
      "op": "POP",
      "path": "10"
    },
    "2026": {
      "fn": "ERC721._transfer",
      "offset": [
        10507,
        11067
      ],
      "op": "POP",
      "path": "10"
    },
    "2027": {
      "fn": "ERC721._transfer",
      "offset": [
        10507,
        11067
      ],
      "op": "POP",
      "path": "10"
    },
    "2028": {
      "fn": "ERC721._transfer",
      "jump": "o",
      "offset": [
        10507,
        11067
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2029": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11484,
        11791
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2030": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11634,
        11642
      ],
      "op": "DUP2",
      "path": "10",
      "statement": 35
    },
    "2031": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2033": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2035": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2037": {
      "op": "SHL"
    },
    "2038": {
      "op": "SUB"
    },
    "2039": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11625,
        11642
      ],
      "op": "AND",
      "path": "10"
    },
    "2040": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11625,
        11630
      ],
      "op": "DUP4",
      "path": "10"
    },
    "2041": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2043": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2045": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2047": {
      "op": "SHL"
    },
    "2048": {
      "op": "SUB"
    },
    "2049": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11625,
        11642
      ],
      "op": "AND",
      "path": "10"
    },
    "2050": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11625,
        11642
      ],
      "op": "EQ",
      "path": "10"
    },
    "2051": {
      "branch": 64,
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11625,
        11642
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "2052": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x81F"
    },
    "2055": {
      "branch": 64,
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "2056": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "2058": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "2059": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2063": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2065": {
      "op": "SHL"
    },
    "2066": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2067": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2068": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "2070": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "ADD",
      "path": "10"
    },
    "2071": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "2074": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2075": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xE8E"
    },
    "2078": {
      "fn": "ERC721._setApprovalForAll",
      "jump": "i",
      "offset": [
        11617,
        11672
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2079": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11617,
        11672
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2080": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2082": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2084": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2086": {
      "op": "SHL"
    },
    "2087": {
      "op": "SUB"
    },
    "2088": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "DUP4",
      "path": "10",
      "statement": 36
    },
    "2089": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2090": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "AND",
      "path": "10"
    },
    "2091": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "2093": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2094": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2095": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2096": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11700
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x5"
    },
    "2098": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "2100": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2101": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2102": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2103": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "2105": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2106": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "DUP4",
      "path": "10"
    },
    "2107": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11707
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "2108": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "2109": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "DUP8",
      "path": "10"
    },
    "2110": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "AND",
      "path": "10"
    },
    "2111": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2112": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "DUP5",
      "path": "10"
    },
    "2113": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2114": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "2115": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2116": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "2117": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2118": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2119": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2120": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2121": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11717
      ],
      "op": "KECCAK256",
      "path": "10"
    },
    "2122": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11728
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2123": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11728
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "2124": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2126": {
      "op": "NOT"
    },
    "2127": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11728
      ],
      "op": "AND",
      "path": "10"
    },
    "2128": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11728
      ],
      "op": "DUP6",
      "path": "10"
    },
    "2129": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11728
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "2130": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11728
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "2131": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11728
      ],
      "op": "OR",
      "path": "10"
    },
    "2132": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11728
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2133": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11728
      ],
      "op": "SSTORE",
      "path": "10"
    },
    "2134": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "MLOAD",
      "path": "10",
      "statement": 37
    },
    "2135": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
    },
    "2168": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2169": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x883"
    },
    "2172": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2173": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11728
      ],
      "op": "DUP6",
      "path": "10"
    },
    "2174": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11682,
        11728
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2175": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xDDA"
    },
    "2178": {
      "fn": "ERC721._setApprovalForAll",
      "jump": "i",
      "offset": [
        11743,
        11784
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2179": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2180": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "2182": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "2183": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2184": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "2185": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "SUB",
      "path": "10"
    },
    "2186": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2187": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11743,
        11784
      ],
      "op": "LOG3",
      "path": "10"
    },
    "2188": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11484,
        11791
      ],
      "op": "POP",
      "path": "10"
    },
    "2189": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11484,
        11791
      ],
      "op": "POP",
      "path": "10"
    },
    "2190": {
      "fn": "ERC721._setApprovalForAll",
      "offset": [
        11484,
        11791
      ],
      "op": "POP",
      "path": "10"
    },
    "2191": {
      "fn": "ERC721._setApprovalForAll",
      "jump": "o",
      "offset": [
        11484,
        11791
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2192": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6717,
        7024
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2193": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6868,
        6896
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 38,
      "value": "0x89B"
    },
    "2196": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6878,
        6882
      ],
      "op": "DUP5",
      "path": "10"
    },
    "2197": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6884,
        6886
      ],
      "op": "DUP5",
      "path": "10"
    },
    "2198": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6888,
        6895
      ],
      "op": "DUP5",
      "path": "10"
    },
    "2199": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6868,
        6877
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x6C0"
    },
    "2202": {
      "fn": "ERC721._safeTransfer",
      "jump": "i",
      "offset": [
        6868,
        6896
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2203": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6868,
        6896
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2204": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6914,
        6962
      ],
      "op": "PUSH2",
      "path": "10",
      "statement": 39,
      "value": "0x8A7"
    },
    "2207": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6937,
        6941
      ],
      "op": "DUP5",
      "path": "10"
    },
    "2208": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6943,
        6945
      ],
      "op": "DUP5",
      "path": "10"
    },
    "2209": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6947,
        6954
      ],
      "op": "DUP5",
      "path": "10"
    },
    "2210": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6956,
        6961
      ],
      "op": "DUP5",
      "path": "10"
    },
    "2211": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6914,
        6936
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x9F0"
    },
    "2214": {
      "fn": "ERC721._safeTransfer",
      "jump": "i",
      "offset": [
        6914,
        6962
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2215": {
      "branch": 65,
      "fn": "ERC721._safeTransfer",
      "offset": [
        6914,
        6962
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2216": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6906,
        7017
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x4DC"
    },
    "2219": {
      "branch": 65,
      "fn": "ERC721._safeTransfer",
      "offset": [
        6906,
        7017
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "2220": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6906,
        7017
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "2222": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6906,
        7017
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "2223": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2227": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2229": {
      "op": "SHL"
    },
    "2230": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6906,
        7017
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2231": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6906,
        7017
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2232": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6906,
        7017
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "2234": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6906,
        7017
      ],
      "op": "ADD",
      "path": "10"
    },
    "2235": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6906,
        7017
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "2238": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6906,
        7017
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2239": {
      "fn": "ERC721._safeTransfer",
      "offset": [
        6906,
        7017
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xDF8"
    },
    "2242": {
      "fn": "ERC721._safeTransfer",
      "jump": "i",
      "offset": [
        6906,
        7017
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2243": {
      "fn": "ERC721._baseURI",
      "offset": [
        3556,
        3648
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2244": {
      "fn": "ERC721._baseURI",
      "offset": [
        3632,
        3641
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 40,
      "value": "0x40"
    },
    "2246": {
      "fn": "ERC721._baseURI",
      "offset": [
        3632,
        3641
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2247": {
      "fn": "ERC721._baseURI",
      "offset": [
        3632,
        3641
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "2248": {
      "fn": "ERC721._baseURI",
      "offset": [
        3632,
        3641
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "2250": {
      "fn": "ERC721._baseURI",
      "offset": [
        3632,
        3641
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2251": {
      "fn": "ERC721._baseURI",
      "offset": [
        3632,
        3641
      ],
      "op": "ADD",
      "path": "10"
    },
    "2252": {
      "fn": "ERC721._baseURI",
      "offset": [
        3632,
        3641
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2253": {
      "fn": "ERC721._baseURI",
      "offset": [
        3632,
        3641
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "2254": {
      "fn": "ERC721._baseURI",
      "offset": [
        3632,
        3641
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2255": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2257": {
      "fn": "ERC721._baseURI",
      "offset": [
        3632,
        3641
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2258": {
      "fn": "ERC721._baseURI",
      "offset": [
        3632,
        3641
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2259": {
      "fn": "ERC721._baseURI",
      "offset": [
        3556,
        3648
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2260": {
      "fn": "ERC721._baseURI",
      "jump": "o",
      "offset": [
        3556,
        3648
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2261": {
      "fn": "Strings.toString",
      "offset": [
        328,
        1031
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2262": {
      "fn": "Strings.toString",
      "offset": [
        384,
        397
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x60"
    },
    "2264": {
      "branch": 67,
      "fn": "Strings.toString",
      "offset": [
        601,
        611
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2265": {
      "fn": "Strings.toString",
      "offset": [
        597,
        648
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x8FA"
    },
    "2268": {
      "branch": 67,
      "fn": "Strings.toString",
      "offset": [
        597,
        648
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2269": {
      "op": "POP"
    },
    "2270": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "PUSH1",
      "path": "6",
      "statement": 41,
      "value": "0x40"
    },
    "2272": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2273": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2274": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2275": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2276": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "ADD",
      "path": "6"
    },
    "2277": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2278": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2279": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2280": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x1"
    },
    "2282": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2283": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2284": {
      "op": "PUSH1",
      "value": "0x3"
    },
    "2286": {
      "op": "PUSH1",
      "value": "0xFC"
    },
    "2288": {
      "op": "SHL"
    },
    "2289": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "2291": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2292": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "ADD",
      "path": "6"
    },
    "2293": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2294": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x237"
    },
    "2297": {
      "fn": "Strings.toString",
      "offset": [
        627,
        637
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2298": {
      "fn": "Strings.toString",
      "offset": [
        597,
        648
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2299": {
      "fn": "Strings.toString",
      "offset": [
        672,
        677
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2300": {
      "fn": "Strings.toString",
      "offset": [
        657,
        669
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2302": {
      "fn": "Strings.toString",
      "offset": [
        711,
        786
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2303": {
      "fn": "Strings.toString",
      "offset": [
        718,
        727
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2304": {
      "fn": "Strings.toString",
      "offset": [
        718,
        727
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "2305": {
      "fn": "Strings.toString",
      "offset": [
        711,
        786
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x924"
    },
    "2308": {
      "fn": "Strings.toString",
      "offset": [
        711,
        786
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2309": {
      "fn": "Strings.toString",
      "offset": [
        743,
        751
      ],
      "op": "DUP1",
      "path": "6",
      "statement": 42
    },
    "2310": {
      "fn": "Strings.toString",
      "offset": [
        743,
        751
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x90E"
    },
    "2313": {
      "fn": "Strings.toString",
      "offset": [
        743,
        751
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2314": {
      "fn": "Strings.toString",
      "offset": [
        743,
        751
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x122A"
    },
    "2317": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        743,
        751
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2318": {
      "fn": "Strings.toString",
      "offset": [
        743,
        751
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2319": {
      "fn": "Strings.toString",
      "offset": [
        743,
        751
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2320": {
      "op": "POP"
    },
    "2321": {
      "fn": "Strings.toString",
      "offset": [
        765,
        775
      ],
      "op": "PUSH2",
      "path": "6",
      "statement": 43,
      "value": "0x91D"
    },
    "2324": {
      "fn": "Strings.toString",
      "offset": [
        765,
        775
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2325": {
      "op": "POP"
    },
    "2326": {
      "fn": "Strings.toString",
      "offset": [
        773,
        775
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0xA"
    },
    "2328": {
      "fn": "Strings.toString",
      "offset": [
        765,
        775
      ],
      "op": "DUP4",
      "path": "6"
    },
    "2329": {
      "fn": "Strings.toString",
      "offset": [
        765,
        775
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x1198"
    },
    "2332": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        765,
        775
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2333": {
      "fn": "Strings.toString",
      "offset": [
        765,
        775
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2334": {
      "fn": "Strings.toString",
      "offset": [
        765,
        775
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2335": {
      "fn": "Strings.toString",
      "offset": [
        765,
        775
      ],
      "op": "POP",
      "path": "6"
    },
    "2336": {
      "fn": "Strings.toString",
      "offset": [
        711,
        786
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x8FE"
    },
    "2339": {
      "fn": "Strings.toString",
      "offset": [
        711,
        786
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2340": {
      "fn": "Strings.toString",
      "offset": [
        711,
        786
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2341": {
      "fn": "Strings.toString",
      "offset": [
        795,
        814
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2343": {
      "fn": "Strings.toString",
      "offset": [
        827,
        833
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2344": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH8",
      "path": "6",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2353": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2354": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "GT",
      "path": "6"
    },
    "2355": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "2356": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x94D"
    },
    "2359": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2360": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2365": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2367": {
      "op": "SHL"
    },
    "2368": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2370": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2371": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x41"
    },
    "2373": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "2375": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2376": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x24"
    },
    "2378": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2380": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "REVERT",
      "path": "6"
    },
    "2381": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2382": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2384": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2385": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2386": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2387": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2388": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2389": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2390": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x1F"
    },
    "2392": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "ADD",
      "path": "6"
    },
    "2393": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x1F"
    },
    "2395": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "NOT",
      "path": "6"
    },
    "2396": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "AND",
      "path": "6"
    },
    "2397": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "2399": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "ADD",
      "path": "6"
    },
    "2400": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2401": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "ADD",
      "path": "6"
    },
    "2402": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x40"
    },
    "2404": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2405": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2406": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "2407": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x977"
    },
    "2410": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2411": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "2413": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "DUP3",
      "path": "6"
    },
    "2414": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "ADD",
      "path": "6"
    },
    "2415": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2416": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "DUP1",
      "path": "6"
    },
    "2417": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "CALLDATASIZE",
      "path": "6"
    },
    "2418": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "DUP4",
      "path": "6"
    },
    "2419": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "CALLDATACOPY",
      "path": "6"
    },
    "2420": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "ADD",
      "path": "6"
    },
    "2421": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2422": {
      "op": "POP"
    },
    "2423": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2424": {
      "fn": "Strings.toString",
      "offset": [
        817,
        834
      ],
      "op": "POP",
      "path": "6"
    },
    "2425": {
      "fn": "Strings.toString",
      "offset": [
        795,
        834
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2426": {
      "fn": "Strings.toString",
      "offset": [
        795,
        834
      ],
      "op": "POP",
      "path": "6"
    },
    "2427": {
      "fn": "Strings.toString",
      "offset": [
        844,
        994
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2428": {
      "fn": "Strings.toString",
      "offset": [
        851,
        861
      ],
      "op": "DUP5",
      "path": "6"
    },
    "2429": {
      "fn": "Strings.toString",
      "offset": [
        851,
        861
      ],
      "op": "ISZERO",
      "path": "6"
    },
    "2430": {
      "fn": "Strings.toString",
      "offset": [
        844,
        994
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x6B8"
    },
    "2433": {
      "fn": "Strings.toString",
      "offset": [
        844,
        994
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2434": {
      "fn": "Strings.toString",
      "offset": [
        877,
        888
      ],
      "op": "PUSH2",
      "path": "6",
      "statement": 44,
      "value": "0x98C"
    },
    "2437": {
      "fn": "Strings.toString",
      "offset": [
        887,
        888
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x1"
    },
    "2439": {
      "fn": "Strings.toString",
      "offset": [
        877,
        888
      ],
      "op": "DUP4",
      "path": "6"
    },
    "2440": {
      "fn": "Strings.toString",
      "offset": [
        877,
        888
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x11AC"
    },
    "2443": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        877,
        888
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2444": {
      "fn": "Strings.toString",
      "offset": [
        877,
        888
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2445": {
      "fn": "Strings.toString",
      "offset": [
        877,
        888
      ],
      "op": "SWAP2",
      "path": "6"
    },
    "2446": {
      "op": "POP"
    },
    "2447": {
      "fn": "Strings.toString",
      "offset": [
        945,
        955
      ],
      "op": "PUSH2",
      "path": "6",
      "statement": 45,
      "value": "0x999"
    },
    "2450": {
      "fn": "Strings.toString",
      "offset": [
        953,
        955
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0xA"
    },
    "2452": {
      "fn": "Strings.toString",
      "offset": [
        945,
        950
      ],
      "op": "DUP7",
      "path": "6"
    },
    "2453": {
      "fn": "Strings.toString",
      "offset": [
        945,
        955
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x1245"
    },
    "2456": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        945,
        955
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2457": {
      "fn": "Strings.toString",
      "offset": [
        945,
        955
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2458": {
      "fn": "Strings.toString",
      "offset": [
        932,
        956
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x9A4"
    },
    "2461": {
      "fn": "Strings.toString",
      "offset": [
        932,
        956
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2462": {
      "fn": "Strings.toString",
      "offset": [
        932,
        934
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x30"
    },
    "2464": {
      "fn": "Strings.toString",
      "offset": [
        932,
        956
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x1180"
    },
    "2467": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        932,
        956
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2468": {
      "fn": "Strings.toString",
      "offset": [
        932,
        956
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2469": {
      "fn": "Strings.toString",
      "offset": [
        919,
        958
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0xF8"
    },
    "2471": {
      "fn": "Strings.toString",
      "offset": [
        919,
        958
      ],
      "op": "SHL",
      "path": "6"
    },
    "2472": {
      "fn": "Strings.toString",
      "offset": [
        902,
        908
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2473": {
      "fn": "Strings.toString",
      "offset": [
        909,
        915
      ],
      "op": "DUP4",
      "path": "6"
    },
    "2474": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2475": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "MLOAD",
      "path": "6"
    },
    "2476": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2477": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "LT",
      "path": "6"
    },
    "2478": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x9C7"
    },
    "2481": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "JUMPI",
      "path": "6"
    },
    "2482": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2487": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2489": {
      "op": "SHL"
    },
    "2490": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2492": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2493": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x32"
    },
    "2495": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x4"
    },
    "2497": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "MSTORE",
      "path": "6"
    },
    "2498": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x24"
    },
    "2500": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2502": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "REVERT",
      "path": "6"
    },
    "2503": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2504": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x20"
    },
    "2506": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "ADD",
      "path": "6"
    },
    "2507": {
      "fn": "Strings.toString",
      "offset": [
        902,
        916
      ],
      "op": "ADD",
      "path": "6"
    },
    "2508": {
      "fn": "Strings.toString",
      "offset": [
        902,
        958
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2509": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2511": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2513": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "2515": {
      "op": "SHL"
    },
    "2516": {
      "op": "SUB"
    },
    "2517": {
      "fn": "Strings.toString",
      "offset": [
        902,
        958
      ],
      "op": "NOT",
      "path": "6"
    },
    "2518": {
      "fn": "Strings.toString",
      "offset": [
        902,
        958
      ],
      "op": "AND",
      "path": "6"
    },
    "2519": {
      "fn": "Strings.toString",
      "offset": [
        902,
        958
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2520": {
      "fn": "Strings.toString",
      "offset": [
        902,
        958
      ],
      "op": "DUP2",
      "path": "6"
    },
    "2521": {
      "fn": "Strings.toString",
      "offset": [
        902,
        958
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0x0"
    },
    "2523": {
      "fn": "Strings.toString",
      "offset": [
        902,
        958
      ],
      "op": "BYTE",
      "path": "6"
    },
    "2524": {
      "fn": "Strings.toString",
      "offset": [
        902,
        958
      ],
      "op": "SWAP1",
      "path": "6"
    },
    "2525": {
      "fn": "Strings.toString",
      "offset": [
        902,
        958
      ],
      "op": "MSTORE8",
      "path": "6"
    },
    "2526": {
      "op": "POP"
    },
    "2527": {
      "fn": "Strings.toString",
      "offset": [
        972,
        983
      ],
      "op": "PUSH2",
      "path": "6",
      "statement": 46,
      "value": "0x9E9"
    },
    "2530": {
      "fn": "Strings.toString",
      "offset": [
        981,
        983
      ],
      "op": "PUSH1",
      "path": "6",
      "value": "0xA"
    },
    "2532": {
      "fn": "Strings.toString",
      "offset": [
        972,
        983
      ],
      "op": "DUP7",
      "path": "6"
    },
    "2533": {
      "fn": "Strings.toString",
      "offset": [
        972,
        983
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x1198"
    },
    "2536": {
      "fn": "Strings.toString",
      "jump": "i",
      "offset": [
        972,
        983
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2537": {
      "fn": "Strings.toString",
      "offset": [
        972,
        983
      ],
      "op": "JUMPDEST",
      "path": "6"
    },
    "2538": {
      "fn": "Strings.toString",
      "offset": [
        972,
        983
      ],
      "op": "SWAP5",
      "path": "6"
    },
    "2539": {
      "fn": "Strings.toString",
      "offset": [
        972,
        983
      ],
      "op": "POP",
      "path": "6"
    },
    "2540": {
      "fn": "Strings.toString",
      "offset": [
        844,
        994
      ],
      "op": "PUSH2",
      "path": "6",
      "value": "0x97B"
    },
    "2543": {
      "fn": "Strings.toString",
      "offset": [
        844,
        994
      ],
      "op": "JUMP",
      "path": "6"
    },
    "2544": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12344,
        13123
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2545": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12495,
        12499
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "2547": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12515,
        12530
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xA04"
    },
    "2550": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12515,
        12517
      ],
      "op": "DUP5",
      "path": "10"
    },
    "2551": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2553": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2555": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2557": {
      "op": "SHL"
    },
    "2558": {
      "op": "SUB"
    },
    "2559": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12515,
        12528
      ],
      "op": "AND",
      "path": "10"
    },
    "2560": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12515,
        12528
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xB0B"
    },
    "2563": {
      "fn": "ERC721._checkOnERC721Received",
      "jump": "i",
      "offset": [
        12515,
        12530
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2564": {
      "branch": 66,
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12515,
        12530
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2565": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12511,
        13117
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "2566": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12511,
        13117
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xB00"
    },
    "2569": {
      "branch": 66,
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12511,
        13117
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "2570": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12566,
        12568
      ],
      "op": "DUP4",
      "path": "10"
    },
    "2571": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2573": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2575": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2577": {
      "op": "SHL"
    },
    "2578": {
      "op": "SUB"
    },
    "2579": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12586
      ],
      "op": "AND",
      "path": "10"
    },
    "2580": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12586
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0x150B7A02"
    },
    "2585": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12587,
        12599
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xA20"
    },
    "2588": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12587,
        12597
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x5C9"
    },
    "2591": {
      "fn": "ERC721._checkOnERC721Received",
      "jump": "i",
      "offset": [
        12587,
        12599
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2592": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12587,
        12599
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2593": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12601,
        12605
      ],
      "op": "DUP8",
      "path": "10"
    },
    "2594": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12607,
        12614
      ],
      "op": "DUP7",
      "path": "10"
    },
    "2595": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12616,
        12621
      ],
      "op": "DUP7",
      "path": "10"
    },
    "2596": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "2598": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "2599": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP6",
      "path": "10"
    },
    "2600": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH4",
      "path": "10",
      "value": "0xFFFFFFFF"
    },
    "2605": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "AND",
      "path": "10"
    },
    "2606": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xE0"
    },
    "2608": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SHL",
      "path": "10"
    },
    "2609": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2610": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2611": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "2613": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "ADD",
      "path": "10"
    },
    "2614": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xA42"
    },
    "2617": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "2618": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "2619": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "2620": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "2621": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2622": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xD9D"
    },
    "2625": {
      "fn": "ERC721._checkOnERC721Received",
      "jump": "i",
      "offset": [
        12550,
        12622
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2626": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2627": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "2629": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "2631": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "2632": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2633": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP4",
      "path": "10"
    },
    "2634": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SUB",
      "path": "10"
    },
    "2635": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2636": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "2638": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP8",
      "path": "10"
    },
    "2639": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2640": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "EXTCODESIZE",
      "path": "10"
    },
    "2641": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "2642": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2643": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "2644": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xA5C"
    },
    "2647": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "2648": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "2650": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2651": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "REVERT",
      "path": "10"
    },
    "2652": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2653": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "POP",
      "path": "10"
    },
    "2654": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "GAS",
      "path": "10"
    },
    "2655": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "CALL",
      "path": "10"
    },
    "2656": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "2657": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "POP",
      "path": "10"
    },
    "2658": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "POP",
      "path": "10"
    },
    "2659": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "POP",
      "path": "10"
    },
    "2660": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2661": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "2662": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xA8C"
    },
    "2665": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "2666": {
      "op": "POP"
    },
    "2667": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "2669": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2670": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "2671": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1F"
    },
    "2673": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "2674": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2675": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2676": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "ADD",
      "path": "10"
    },
    "2677": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2679": {
      "op": "NOT"
    },
    "2680": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "AND",
      "path": "10"
    },
    "2681": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP3",
      "path": "10"
    },
    "2682": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "ADD",
      "path": "10"
    },
    "2683": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2684": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SWAP3",
      "path": "10"
    },
    "2685": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2686": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xA89"
    },
    "2689": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "2690": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2691": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "ADD",
      "path": "10"
    },
    "2692": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2693": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xCFA"
    },
    "2696": {
      "fn": "ERC721._checkOnERC721Received",
      "jump": "i",
      "offset": [
        12550,
        12622
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2697": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2698": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "2700": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12550,
        12622
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2701": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xAE6"
    },
    "2704": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "2705": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "2706": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2707": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2708": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "2709": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xABA"
    },
    "2712": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "2713": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "2715": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "2716": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "2717": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "POP",
      "path": "10"
    },
    "2718": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1F"
    },
    "2720": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "NOT",
      "path": "10"
    },
    "2721": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x3F"
    },
    "2723": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "2724": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "ADD",
      "path": "10"
    },
    "2725": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "AND",
      "path": "10"
    },
    "2726": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "DUP3",
      "path": "10"
    },
    "2727": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "ADD",
      "path": "10"
    },
    "2728": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "2730": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2731": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "2732": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "DUP3",
      "path": "10"
    },
    "2733": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2734": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "RETURNDATASIZE",
      "path": "10"
    },
    "2735": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "2737": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "2739": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "DUP5",
      "path": "10"
    },
    "2740": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "ADD",
      "path": "10"
    },
    "2741": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "RETURNDATACOPY",
      "path": "10"
    },
    "2742": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xABF"
    },
    "2745": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2746": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2747": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x60"
    },
    "2749": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "2750": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "POP",
      "path": "10"
    },
    "2751": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2752": {
      "op": "POP"
    },
    "2753": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12789,
        12802
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2754": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12789,
        12802
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "2755": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12785,
        13051
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xADE"
    },
    "2758": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12785,
        13051
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "2759": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12831,
        12891
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 47,
      "value": "0x40"
    },
    "2761": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12831,
        12891
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "2762": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2766": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2768": {
      "op": "SHL"
    },
    "2769": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12831,
        12891
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2770": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12831,
        12891
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "2771": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12831,
        12891
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "2773": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12831,
        12891
      ],
      "op": "ADD",
      "path": "10"
    },
    "2774": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12831,
        12891
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x2F5"
    },
    "2777": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12831,
        12891
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2778": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12831,
        12891
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0xDF8"
    },
    "2781": {
      "fn": "ERC721._checkOnERC721Received",
      "jump": "i",
      "offset": [
        12831,
        12891
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2782": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12785,
        13051
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2783": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        13003,
        13009
      ],
      "op": "DUP1",
      "path": "10"
    },
    "2784": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12997,
        13010
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "2785": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12988,
        12994
      ],
      "op": "DUP2",
      "path": "10"
    },
    "2786": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12984,
        12986
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x20"
    },
    "2788": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12980,
        12995
      ],
      "op": "ADD",
      "path": "10"
    },
    "2789": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12973,
        13011
      ],
      "op": "REVERT",
      "path": "10"
    },
    "2790": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12546,
        13065
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2791": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2793": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2795": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2797": {
      "op": "SHL"
    },
    "2798": {
      "op": "SUB"
    },
    "2799": {
      "op": "NOT"
    },
    "2800": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12672,
        12723
      ],
      "op": "AND",
      "path": "10",
      "statement": 48
    },
    "2801": {
      "op": "PUSH4",
      "value": "0xA85BD01"
    },
    "2806": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "2808": {
      "op": "SHL"
    },
    "2809": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12672,
        12723
      ],
      "op": "EQ",
      "path": "10"
    },
    "2810": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12672,
        12723
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "2811": {
      "op": "POP"
    },
    "2812": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12665,
        12723
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x6B8"
    },
    "2815": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12665,
        12723
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2816": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12511,
        13117
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "2817": {
      "op": "POP"
    },
    "2818": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        13102,
        13106
      ],
      "op": "PUSH1",
      "path": "10",
      "statement": 49,
      "value": "0x1"
    },
    "2820": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12344,
        13123
      ],
      "op": "SWAP5",
      "path": "10"
    },
    "2821": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12344,
        13123
      ],
      "op": "SWAP4",
      "path": "10"
    },
    "2822": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12344,
        13123
      ],
      "op": "POP",
      "path": "10"
    },
    "2823": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12344,
        13123
      ],
      "op": "POP",
      "path": "10"
    },
    "2824": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12344,
        13123
      ],
      "op": "POP",
      "path": "10"
    },
    "2825": {
      "fn": "ERC721._checkOnERC721Received",
      "offset": [
        12344,
        13123
      ],
      "op": "POP",
      "path": "10"
    },
    "2826": {
      "fn": "ERC721._checkOnERC721Received",
      "jump": "o",
      "offset": [
        12344,
        13123
      ],
      "op": "JUMP",
      "path": "10"
    },
    "2827": {
      "fn": "Address.isContract",
      "offset": [
        771,
        1148
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "2828": {
      "fn": "Address.isContract",
      "offset": [
        1087,
        1107
      ],
      "op": "EXTCODESIZE",
      "path": "4"
    },
    "2829": {
      "fn": "Address.isContract",
      "offset": [
        1133,
        1141
      ],
      "op": "ISZERO",
      "path": "4",
      "statement": 50
    },
    "2830": {
      "fn": "Address.isContract",
      "offset": [
        1133,
        1141
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "2831": {
      "fn": "Address.isContract",
      "offset": [
        1133,
        1141
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "2832": {
      "fn": "Address.isContract",
      "jump": "o",
      "offset": [
        771,
        1148
      ],
      "op": "JUMP",
      "path": "4"
    },
    "2833": {
      "op": "JUMPDEST"
    },
    "2834": {
      "op": "DUP1"
    },
    "2835": {
      "op": "CALLDATALOAD"
    },
    "2836": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2838": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2840": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2842": {
      "op": "SHL"
    },
    "2843": {
      "op": "SUB"
    },
    "2844": {
      "op": "DUP2"
    },
    "2845": {
      "op": "AND"
    },
    "2846": {
      "op": "DUP2"
    },
    "2847": {
      "op": "EQ"
    },
    "2848": {
      "op": "PUSH2",
      "value": "0x237"
    },
    "2851": {
      "op": "JUMPI"
    },
    "2852": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2854": {
      "op": "DUP1"
    },
    "2855": {
      "op": "REVERT"
    },
    "2856": {
      "op": "JUMPDEST"
    },
    "2857": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2859": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2861": {
      "op": "DUP3"
    },
    "2862": {
      "op": "DUP5"
    },
    "2863": {
      "op": "SUB"
    },
    "2864": {
      "op": "SLT"
    },
    "2865": {
      "op": "ISZERO"
    },
    "2866": {
      "op": "PUSH2",
      "value": "0xB39"
    },
    "2869": {
      "op": "JUMPI"
    },
    "2870": {
      "op": "DUP1"
    },
    "2871": {
      "op": "DUP2"
    },
    "2872": {
      "op": "REVERT"
    },
    "2873": {
      "op": "JUMPDEST"
    },
    "2874": {
      "op": "PUSH2",
      "value": "0x55E"
    },
    "2877": {
      "op": "DUP3"
    },
    "2878": {
      "op": "PUSH2",
      "value": "0xB11"
    },
    "2881": {
      "jump": "i",
      "op": "JUMP"
    },
    "2882": {
      "op": "JUMPDEST"
    },
    "2883": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2885": {
      "op": "DUP1"
    },
    "2886": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2888": {
      "op": "DUP4"
    },
    "2889": {
      "op": "DUP6"
    },
    "2890": {
      "op": "SUB"
    },
    "2891": {
      "op": "SLT"
    },
    "2892": {
      "op": "ISZERO"
    },
    "2893": {
      "op": "PUSH2",
      "value": "0xB54"
    },
    "2896": {
      "op": "JUMPI"
    },
    "2897": {
      "op": "DUP1"
    },
    "2898": {
      "op": "DUP2"
    },
    "2899": {
      "op": "REVERT"
    },
    "2900": {
      "op": "JUMPDEST"
    },
    "2901": {
      "op": "PUSH2",
      "value": "0xB5D"
    },
    "2904": {
      "op": "DUP4"
    },
    "2905": {
      "op": "PUSH2",
      "value": "0xB11"
    },
    "2908": {
      "jump": "i",
      "op": "JUMP"
    },
    "2909": {
      "op": "JUMPDEST"
    },
    "2910": {
      "op": "SWAP2"
    },
    "2911": {
      "op": "POP"
    },
    "2912": {
      "op": "PUSH2",
      "value": "0xB6B"
    },
    "2915": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2917": {
      "op": "DUP5"
    },
    "2918": {
      "op": "ADD"
    },
    "2919": {
      "op": "PUSH2",
      "value": "0xB11"
    },
    "2922": {
      "jump": "i",
      "op": "JUMP"
    },
    "2923": {
      "op": "JUMPDEST"
    },
    "2924": {
      "op": "SWAP1"
    },
    "2925": {
      "op": "POP"
    },
    "2926": {
      "op": "SWAP3"
    },
    "2927": {
      "op": "POP"
    },
    "2928": {
      "op": "SWAP3"
    },
    "2929": {
      "op": "SWAP1"
    },
    "2930": {
      "op": "POP"
    },
    "2931": {
      "jump": "o",
      "op": "JUMP"
    },
    "2932": {
      "op": "JUMPDEST"
    },
    "2933": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2935": {
      "op": "DUP1"
    },
    "2936": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2938": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2940": {
      "op": "DUP5"
    },
    "2941": {
      "op": "DUP7"
    },
    "2942": {
      "op": "SUB"
    },
    "2943": {
      "op": "SLT"
    },
    "2944": {
      "op": "ISZERO"
    },
    "2945": {
      "op": "PUSH2",
      "value": "0xB88"
    },
    "2948": {
      "op": "JUMPI"
    },
    "2949": {
      "op": "DUP1"
    },
    "2950": {
      "op": "DUP2"
    },
    "2951": {
      "op": "REVERT"
    },
    "2952": {
      "op": "JUMPDEST"
    },
    "2953": {
      "op": "PUSH2",
      "value": "0xB91"
    },
    "2956": {
      "op": "DUP5"
    },
    "2957": {
      "op": "PUSH2",
      "value": "0xB11"
    },
    "2960": {
      "jump": "i",
      "op": "JUMP"
    },
    "2961": {
      "op": "JUMPDEST"
    },
    "2962": {
      "op": "SWAP3"
    },
    "2963": {
      "op": "POP"
    },
    "2964": {
      "op": "PUSH2",
      "value": "0xB9F"
    },
    "2967": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2969": {
      "op": "DUP6"
    },
    "2970": {
      "op": "ADD"
    },
    "2971": {
      "op": "PUSH2",
      "value": "0xB11"
    },
    "2974": {
      "jump": "i",
      "op": "JUMP"
    },
    "2975": {
      "op": "JUMPDEST"
    },
    "2976": {
      "op": "SWAP2"
    },
    "2977": {
      "op": "POP"
    },
    "2978": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2980": {
      "op": "DUP5"
    },
    "2981": {
      "op": "ADD"
    },
    "2982": {
      "op": "CALLDATALOAD"
    },
    "2983": {
      "op": "SWAP1"
    },
    "2984": {
      "op": "POP"
    },
    "2985": {
      "op": "SWAP3"
    },
    "2986": {
      "op": "POP"
    },
    "2987": {
      "op": "SWAP3"
    },
    "2988": {
      "op": "POP"
    },
    "2989": {
      "op": "SWAP3"
    },
    "2990": {
      "jump": "o",
      "op": "JUMP"
    },
    "2991": {
      "op": "JUMPDEST"
    },
    "2992": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2994": {
      "op": "DUP1"
    },
    "2995": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2997": {
      "op": "DUP1"
    },
    "2998": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3000": {
      "op": "DUP6"
    },
    "3001": {
      "op": "DUP8"
    },
    "3002": {
      "op": "SUB"
    },
    "3003": {
      "op": "SLT"
    },
    "3004": {
      "op": "ISZERO"
    },
    "3005": {
      "op": "PUSH2",
      "value": "0xBC4"
    },
    "3008": {
      "op": "JUMPI"
    },
    "3009": {
      "op": "DUP1"
    },
    "3010": {
      "op": "DUP2"
    },
    "3011": {
      "op": "REVERT"
    },
    "3012": {
      "op": "JUMPDEST"
    },
    "3013": {
      "op": "PUSH2",
      "value": "0xBCD"
    },
    "3016": {
      "op": "DUP6"
    },
    "3017": {
      "op": "PUSH2",
      "value": "0xB11"
    },
    "3020": {
      "jump": "i",
      "op": "JUMP"
    },
    "3021": {
      "op": "JUMPDEST"
    },
    "3022": {
      "op": "SWAP4"
    },
    "3023": {
      "op": "POP"
    },
    "3024": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3026": {
      "op": "PUSH2",
      "value": "0xBDC"
    },
    "3029": {
      "op": "DUP2"
    },
    "3030": {
      "op": "DUP8"
    },
    "3031": {
      "op": "ADD"
    },
    "3032": {
      "op": "PUSH2",
      "value": "0xB11"
    },
    "3035": {
      "jump": "i",
      "op": "JUMP"
    },
    "3036": {
      "op": "JUMPDEST"
    },
    "3037": {
      "op": "SWAP4"
    },
    "3038": {
      "op": "POP"
    },
    "3039": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3041": {
      "op": "DUP7"
    },
    "3042": {
      "op": "ADD"
    },
    "3043": {
      "op": "CALLDATALOAD"
    },
    "3044": {
      "op": "SWAP3"
    },
    "3045": {
      "op": "POP"
    },
    "3046": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3048": {
      "op": "DUP7"
    },
    "3049": {
      "op": "ADD"
    },
    "3050": {
      "op": "CALLDATALOAD"
    },
    "3051": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3060": {
      "op": "DUP1"
    },
    "3061": {
      "op": "DUP3"
    },
    "3062": {
      "op": "GT"
    },
    "3063": {
      "op": "ISZERO"
    },
    "3064": {
      "op": "PUSH2",
      "value": "0xBFF"
    },
    "3067": {
      "op": "JUMPI"
    },
    "3068": {
      "op": "DUP4"
    },
    "3069": {
      "op": "DUP5"
    },
    "3070": {
      "op": "REVERT"
    },
    "3071": {
      "op": "JUMPDEST"
    },
    "3072": {
      "op": "DUP2"
    },
    "3073": {
      "op": "DUP9"
    },
    "3074": {
      "op": "ADD"
    },
    "3075": {
      "op": "SWAP2"
    },
    "3076": {
      "op": "POP"
    },
    "3077": {
      "op": "DUP9"
    },
    "3078": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3080": {
      "op": "DUP4"
    },
    "3081": {
      "op": "ADD"
    },
    "3082": {
      "op": "SLT"
    },
    "3083": {
      "op": "PUSH2",
      "value": "0xC12"
    },
    "3086": {
      "op": "JUMPI"
    },
    "3087": {
      "op": "DUP4"
    },
    "3088": {
      "op": "DUP5"
    },
    "3089": {
      "op": "REVERT"
    },
    "3090": {
      "op": "JUMPDEST"
    },
    "3091": {
      "op": "DUP2"
    },
    "3092": {
      "op": "CALLDATALOAD"
    },
    "3093": {
      "op": "DUP2"
    },
    "3094": {
      "op": "DUP2"
    },
    "3095": {
      "op": "GT"
    },
    "3096": {
      "op": "ISZERO"
    },
    "3097": {
      "op": "PUSH2",
      "value": "0xC24"
    },
    "3100": {
      "op": "JUMPI"
    },
    "3101": {
      "op": "PUSH2",
      "value": "0xC24"
    },
    "3104": {
      "op": "PUSH2",
      "value": "0x1285"
    },
    "3107": {
      "jump": "i",
      "op": "JUMP"
    },
    "3108": {
      "op": "JUMPDEST"
    },
    "3109": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3111": {
      "op": "MLOAD"
    },
    "3112": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3114": {
      "op": "DUP3"
    },
    "3115": {
      "op": "ADD"
    },
    "3116": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3118": {
      "op": "NOT"
    },
    "3119": {
      "op": "AND"
    },
    "3120": {
      "op": "DUP2"
    },
    "3121": {
      "op": "ADD"
    },
    "3122": {
      "op": "DUP6"
    },
    "3123": {
      "op": "ADD"
    },
    "3124": {
      "op": "DUP4"
    },
    "3125": {
      "op": "DUP2"
    },
    "3126": {
      "op": "GT"
    },
    "3127": {
      "op": "DUP3"
    },
    "3128": {
      "op": "DUP3"
    },
    "3129": {
      "op": "LT"
    },
    "3130": {
      "op": "OR"
    },
    "3131": {
      "op": "ISZERO"
    },
    "3132": {
      "op": "PUSH2",
      "value": "0xC47"
    },
    "3135": {
      "op": "JUMPI"
    },
    "3136": {
      "op": "PUSH2",
      "value": "0xC47"
    },
    "3139": {
      "op": "PUSH2",
      "value": "0x1285"
    },
    "3142": {
      "jump": "i",
      "op": "JUMP"
    },
    "3143": {
      "op": "JUMPDEST"
    },
    "3144": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3146": {
      "op": "MSTORE"
    },
    "3147": {
      "op": "DUP2"
    },
    "3148": {
      "op": "DUP2"
    },
    "3149": {
      "op": "MSTORE"
    },
    "3150": {
      "op": "DUP4"
    },
    "3151": {
      "op": "DUP3"
    },
    "3152": {
      "op": "ADD"
    },
    "3153": {
      "op": "DUP6"
    },
    "3154": {
      "op": "ADD"
    },
    "3155": {
      "op": "DUP12"
    },
    "3156": {
      "op": "LT"
    },
    "3157": {
      "op": "ISZERO"
    },
    "3158": {
      "op": "PUSH2",
      "value": "0xC5D"
    },
    "3161": {
      "op": "JUMPI"
    },
    "3162": {
      "op": "DUP6"
    },
    "3163": {
      "op": "DUP7"
    },
    "3164": {
      "op": "REVERT"
    },
    "3165": {
      "op": "JUMPDEST"
    },
    "3166": {
      "op": "DUP2"
    },
    "3167": {
      "op": "DUP6"
    },
    "3168": {
      "op": "DUP6"
    },
    "3169": {
      "op": "ADD"
    },
    "3170": {
      "op": "DUP7"
    },
    "3171": {
      "op": "DUP4"
    },
    "3172": {
      "op": "ADD"
    },
    "3173": {
      "op": "CALLDATACOPY"
    },
    "3174": {
      "op": "SWAP1"
    },
    "3175": {
      "op": "DUP2"
    },
    "3176": {
      "op": "ADD"
    },
    "3177": {
      "op": "SWAP1"
    },
    "3178": {
      "op": "SWAP4"
    },
    "3179": {
      "op": "ADD"
    },
    "3180": {
      "op": "SWAP4"
    },
    "3181": {
      "op": "SWAP1"
    },
    "3182": {
      "op": "SWAP4"
    },
    "3183": {
      "op": "MSTORE"
    },
    "3184": {
      "op": "POP"
    },
    "3185": {
      "op": "SWAP4"
    },
    "3186": {
      "op": "SWAP7"
    },
    "3187": {
      "op": "SWAP3"
    },
    "3188": {
      "op": "SWAP6"
    },
    "3189": {
      "op": "POP"
    },
    "3190": {
      "op": "SWAP1"
    },
    "3191": {
      "op": "SWAP4"
    },
    "3192": {
      "op": "POP"
    },
    "3193": {
      "op": "POP"
    },
    "3194": {
      "jump": "o",
      "op": "JUMP"
    },
    "3195": {
      "op": "JUMPDEST"
    },
    "3196": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3198": {
      "op": "DUP1"
    },
    "3199": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3201": {
      "op": "DUP4"
    },
    "3202": {
      "op": "DUP6"
    },
    "3203": {
      "op": "SUB"
    },
    "3204": {
      "op": "SLT"
    },
    "3205": {
      "op": "ISZERO"
    },
    "3206": {
      "op": "PUSH2",
      "value": "0xC8D"
    },
    "3209": {
      "op": "JUMPI"
    },
    "3210": {
      "op": "DUP2"
    },
    "3211": {
      "op": "DUP3"
    },
    "3212": {
      "op": "REVERT"
    },
    "3213": {
      "op": "JUMPDEST"
    },
    "3214": {
      "op": "PUSH2",
      "value": "0xC96"
    },
    "3217": {
      "op": "DUP4"
    },
    "3218": {
      "op": "PUSH2",
      "value": "0xB11"
    },
    "3221": {
      "jump": "i",
      "op": "JUMP"
    },
    "3222": {
      "op": "JUMPDEST"
    },
    "3223": {
      "op": "SWAP2"
    },
    "3224": {
      "op": "POP"
    },
    "3225": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3227": {
      "op": "DUP4"
    },
    "3228": {
      "op": "ADD"
    },
    "3229": {
      "op": "CALLDATALOAD"
    },
    "3230": {
      "op": "DUP1"
    },
    "3231": {
      "op": "ISZERO"
    },
    "3232": {
      "op": "ISZERO"
    },
    "3233": {
      "op": "DUP2"
    },
    "3234": {
      "op": "EQ"
    },
    "3235": {
      "op": "PUSH2",
      "value": "0xCAA"
    },
    "3238": {
      "op": "JUMPI"
    },
    "3239": {
      "op": "DUP2"
    },
    "3240": {
      "op": "DUP3"
    },
    "3241": {
      "op": "REVERT"
    },
    "3242": {
      "op": "JUMPDEST"
    },
    "3243": {
      "op": "DUP1"
    },
    "3244": {
      "op": "SWAP2"
    },
    "3245": {
      "op": "POP"
    },
    "3246": {
      "op": "POP"
    },
    "3247": {
      "op": "SWAP3"
    },
    "3248": {
      "op": "POP"
    },
    "3249": {
      "op": "SWAP3"
    },
    "3250": {
      "op": "SWAP1"
    },
    "3251": {
      "op": "POP"
    },
    "3252": {
      "jump": "o",
      "op": "JUMP"
    },
    "3253": {
      "op": "JUMPDEST"
    },
    "3254": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3256": {
      "op": "DUP1"
    },
    "3257": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3259": {
      "op": "DUP4"
    },
    "3260": {
      "op": "DUP6"
    },
    "3261": {
      "op": "SUB"
    },
    "3262": {
      "op": "SLT"
    },
    "3263": {
      "op": "ISZERO"
    },
    "3264": {
      "op": "PUSH2",
      "value": "0xCC7"
    },
    "3267": {
      "op": "JUMPI"
    },
    "3268": {
      "op": "DUP2"
    },
    "3269": {
      "op": "DUP3"
    },
    "3270": {
      "op": "REVERT"
    },
    "3271": {
      "op": "JUMPDEST"
    },
    "3272": {
      "op": "PUSH2",
      "value": "0xCD0"
    },
    "3275": {
      "op": "DUP4"
    },
    "3276": {
      "op": "PUSH2",
      "value": "0xB11"
    },
    "3279": {
      "jump": "i",
      "op": "JUMP"
    },
    "3280": {
      "op": "JUMPDEST"
    },
    "3281": {
      "op": "SWAP5"
    },
    "3282": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3284": {
      "op": "SWAP4"
    },
    "3285": {
      "op": "SWAP1"
    },
    "3286": {
      "op": "SWAP4"
    },
    "3287": {
      "op": "ADD"
    },
    "3288": {
      "op": "CALLDATALOAD"
    },
    "3289": {
      "op": "SWAP4"
    },
    "3290": {
      "op": "POP"
    },
    "3291": {
      "op": "POP"
    },
    "3292": {
      "op": "POP"
    },
    "3293": {
      "jump": "o",
      "op": "JUMP"
    },
    "3294": {
      "op": "JUMPDEST"
    },
    "3295": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3297": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3299": {
      "op": "DUP3"
    },
    "3300": {
      "op": "DUP5"
    },
    "3301": {
      "op": "SUB"
    },
    "3302": {
      "op": "SLT"
    },
    "3303": {
      "op": "ISZERO"
    },
    "3304": {
      "op": "PUSH2",
      "value": "0xCEF"
    },
    "3307": {
      "op": "JUMPI"
    },
    "3308": {
      "op": "DUP1"
    },
    "3309": {
      "op": "DUP2"
    },
    "3310": {
      "op": "REVERT"
    },
    "3311": {
      "op": "JUMPDEST"
    },
    "3312": {
      "op": "DUP2"
    },
    "3313": {
      "op": "CALLDATALOAD"
    },
    "3314": {
      "op": "PUSH2",
      "value": "0x55E"
    },
    "3317": {
      "op": "DUP2"
    },
    "3318": {
      "op": "PUSH2",
      "value": "0x129B"
    },
    "3321": {
      "jump": "i",
      "op": "JUMP"
    },
    "3322": {
      "op": "JUMPDEST"
    },
    "3323": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3325": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3327": {
      "op": "DUP3"
    },
    "3328": {
      "op": "DUP5"
    },
    "3329": {
      "op": "SUB"
    },
    "3330": {
      "op": "SLT"
    },
    "3331": {
      "op": "ISZERO"
    },
    "3332": {
      "op": "PUSH2",
      "value": "0xD0B"
    },
    "3335": {
      "op": "JUMPI"
    },
    "3336": {
      "op": "DUP1"
    },
    "3337": {
      "op": "DUP2"
    },
    "3338": {
      "op": "REVERT"
    },
    "3339": {
      "op": "JUMPDEST"
    },
    "3340": {
      "op": "DUP2"
    },
    "3341": {
      "op": "MLOAD"
    },
    "3342": {
      "op": "PUSH2",
      "value": "0x55E"
    },
    "3345": {
      "op": "DUP2"
    },
    "3346": {
      "op": "PUSH2",
      "value": "0x129B"
    },
    "3349": {
      "jump": "i",
      "op": "JUMP"
    },
    "3350": {
      "op": "JUMPDEST"
    },
    "3351": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3353": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3355": {
      "op": "DUP3"
    },
    "3356": {
      "op": "DUP5"
    },
    "3357": {
      "op": "SUB"
    },
    "3358": {
      "op": "SLT"
    },
    "3359": {
      "op": "ISZERO"
    },
    "3360": {
      "op": "PUSH2",
      "value": "0xD27"
    },
    "3363": {
      "op": "JUMPI"
    },
    "3364": {
      "op": "DUP1"
    },
    "3365": {
      "op": "DUP2"
    },
    "3366": {
      "op": "REVERT"
    },
    "3367": {
      "op": "JUMPDEST"
    },
    "3368": {
      "op": "POP"
    },
    "3369": {
      "op": "CALLDATALOAD"
    },
    "3370": {
      "op": "SWAP2"
    },
    "3371": {
      "op": "SWAP1"
    },
    "3372": {
      "op": "POP"
    },
    "3373": {
      "jump": "o",
      "op": "JUMP"
    },
    "3374": {
      "op": "JUMPDEST"
    },
    "3375": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3377": {
      "op": "DUP2"
    },
    "3378": {
      "op": "MLOAD"
    },
    "3379": {
      "op": "DUP1"
    },
    "3380": {
      "op": "DUP5"
    },
    "3381": {
      "op": "MSTORE"
    },
    "3382": {
      "op": "PUSH2",
      "value": "0xD46"
    },
    "3385": {
      "op": "DUP2"
    },
    "3386": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3388": {
      "op": "DUP7"
    },
    "3389": {
      "op": "ADD"
    },
    "3390": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3392": {
      "op": "DUP7"
    },
    "3393": {
      "op": "ADD"
    },
    "3394": {
      "op": "PUSH2",
      "value": "0x11C3"
    },
    "3397": {
      "jump": "i",
      "op": "JUMP"
    },
    "3398": {
      "op": "JUMPDEST"
    },
    "3399": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3401": {
      "op": "ADD"
    },
    "3402": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3404": {
      "op": "NOT"
    },
    "3405": {
      "op": "AND"
    },
    "3406": {
      "op": "SWAP3"
    },
    "3407": {
      "op": "SWAP1"
    },
    "3408": {
      "op": "SWAP3"
    },
    "3409": {
      "op": "ADD"
    },
    "3410": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3412": {
      "op": "ADD"
    },
    "3413": {
      "op": "SWAP3"
    },
    "3414": {
      "op": "SWAP2"
    },
    "3415": {
      "op": "POP"
    },
    "3416": {
      "op": "POP"
    },
    "3417": {
      "jump": "o",
      "op": "JUMP"
    },
    "3418": {
      "op": "JUMPDEST"
    },
    "3419": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3421": {
      "op": "DUP4"
    },
    "3422": {
      "op": "MLOAD"
    },
    "3423": {
      "op": "PUSH2",
      "value": "0xD6C"
    },
    "3426": {
      "op": "DUP2"
    },
    "3427": {
      "op": "DUP5"
    },
    "3428": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3430": {
      "op": "DUP9"
    },
    "3431": {
      "op": "ADD"
    },
    "3432": {
      "op": "PUSH2",
      "value": "0x11C3"
    },
    "3435": {
      "jump": "i",
      "op": "JUMP"
    },
    "3436": {
      "op": "JUMPDEST"
    },
    "3437": {
      "op": "DUP4"
    },
    "3438": {
      "op": "MLOAD"
    },
    "3439": {
      "op": "SWAP1"
    },
    "3440": {
      "op": "DUP4"
    },
    "3441": {
      "op": "ADD"
    },
    "3442": {
      "op": "SWAP1"
    },
    "3443": {
      "op": "PUSH2",
      "value": "0xD80"
    },
    "3446": {
      "op": "DUP2"
    },
    "3447": {
      "op": "DUP4"
    },
    "3448": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3450": {
      "op": "DUP9"
    },
    "3451": {
      "op": "ADD"
    },
    "3452": {
      "op": "PUSH2",
      "value": "0x11C3"
    },
    "3455": {
      "jump": "i",
      "op": "JUMP"
    },
    "3456": {
      "op": "JUMPDEST"
    },
    "3457": {
      "op": "ADD"
    },
    "3458": {
      "op": "SWAP5"
    },
    "3459": {
      "op": "SWAP4"
    },
    "3460": {
      "op": "POP"
    },
    "3461": {
      "op": "POP"
    },
    "3462": {
      "op": "POP"
    },
    "3463": {
      "op": "POP"
    },
    "3464": {
      "jump": "o",
      "op": "JUMP"
    },
    "3465": {
      "op": "JUMPDEST"
    },
    "3466": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3468": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3470": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3472": {
      "op": "SHL"
    },
    "3473": {
      "op": "SUB"
    },
    "3474": {
      "op": "SWAP2"
    },
    "3475": {
      "op": "SWAP1"
    },
    "3476": {
      "op": "SWAP2"
    },
    "3477": {
      "op": "AND"
    },
    "3478": {
      "op": "DUP2"
    },
    "3479": {
      "op": "MSTORE"
    },
    "3480": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3482": {
      "op": "ADD"
    },
    "3483": {
      "op": "SWAP1"
    },
    "3484": {
      "jump": "o",
      "op": "JUMP"
    },
    "3485": {
      "op": "JUMPDEST"
    },
    "3486": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3488": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3490": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3492": {
      "op": "SHL"
    },
    "3493": {
      "op": "SUB"
    },
    "3494": {
      "op": "DUP6"
    },
    "3495": {
      "op": "DUP2"
    },
    "3496": {
      "op": "AND"
    },
    "3497": {
      "op": "DUP3"
    },
    "3498": {
      "op": "MSTORE"
    },
    "3499": {
      "op": "DUP5"
    },
    "3500": {
      "op": "AND"
    },
    "3501": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3503": {
      "op": "DUP3"
    },
    "3504": {
      "op": "ADD"
    },
    "3505": {
      "op": "MSTORE"
    },
    "3506": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3508": {
      "op": "DUP2"
    },
    "3509": {
      "op": "ADD"
    },
    "3510": {
      "op": "DUP4"
    },
    "3511": {
      "op": "SWAP1"
    },
    "3512": {
      "op": "MSTORE"
    },
    "3513": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3515": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3517": {
      "op": "DUP3"
    },
    "3518": {
      "op": "ADD"
    },
    "3519": {
      "op": "DUP2"
    },
    "3520": {
      "op": "SWAP1"
    },
    "3521": {
      "op": "MSTORE"
    },
    "3522": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3524": {
      "op": "SWAP1"
    },
    "3525": {
      "op": "PUSH2",
      "value": "0xDD0"
    },
    "3528": {
      "op": "SWAP1"
    },
    "3529": {
      "op": "DUP4"
    },
    "3530": {
      "op": "ADD"
    },
    "3531": {
      "op": "DUP5"
    },
    "3532": {
      "op": "PUSH2",
      "value": "0xD2E"
    },
    "3535": {
      "jump": "i",
      "op": "JUMP"
    },
    "3536": {
      "op": "JUMPDEST"
    },
    "3537": {
      "op": "SWAP7"
    },
    "3538": {
      "op": "SWAP6"
    },
    "3539": {
      "op": "POP"
    },
    "3540": {
      "op": "POP"
    },
    "3541": {
      "op": "POP"
    },
    "3542": {
      "op": "POP"
    },
    "3543": {
      "op": "POP"
    },
    "3544": {
      "op": "POP"
    },
    "3545": {
      "jump": "o",
      "op": "JUMP"
    },
    "3546": {
      "op": "JUMPDEST"
    },
    "3547": {
      "op": "SWAP1"
    },
    "3548": {
      "op": "ISZERO"
    },
    "3549": {
      "op": "ISZERO"
    },
    "3550": {
      "op": "DUP2"
    },
    "3551": {
      "op": "MSTORE"
    },
    "3552": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3554": {
      "op": "ADD"
    },
    "3555": {
      "op": "SWAP1"
    },
    "3556": {
      "jump": "o",
      "op": "JUMP"
    },
    "3557": {
      "op": "JUMPDEST"
    },
    "3558": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3560": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3562": {
      "op": "DUP3"
    },
    "3563": {
      "op": "MSTORE"
    },
    "3564": {
      "op": "PUSH2",
      "value": "0x55E"
    },
    "3567": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3569": {
      "op": "DUP4"
    },
    "3570": {
      "op": "ADD"
    },
    "3571": {
      "op": "DUP5"
    },
    "3572": {
      "op": "PUSH2",
      "value": "0xD2E"
    },
    "3575": {
      "jump": "i",
      "op": "JUMP"
    },
    "3576": {
      "op": "JUMPDEST"
    },
    "3577": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3579": {
      "op": "DUP1"
    },
    "3580": {
      "op": "DUP3"
    },
    "3581": {
      "op": "MSTORE"
    },
    "3582": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "3584": {
      "op": "SWAP1"
    },
    "3585": {
      "op": "DUP3"
    },
    "3586": {
      "op": "ADD"
    },
    "3587": {
      "op": "MSTORE"
    },
    "3588": {
      "op": "PUSH32",
      "value": "0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265"
    },
    "3621": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3623": {
      "op": "DUP3"
    },
    "3624": {
      "op": "ADD"
    },
    "3625": {
      "op": "MSTORE"
    },
    "3626": {
      "op": "PUSH18",
      "value": "0x31B2B4BB32B91034B6B83632B6B2B73A32B9"
    },
    "3645": {
      "op": "PUSH1",
      "value": "0x71"
    },
    "3647": {
      "op": "SHL"
    },
    "3648": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3650": {
      "op": "DUP3"
    },
    "3651": {
      "op": "ADD"
    },
    "3652": {
      "op": "MSTORE"
    },
    "3653": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3655": {
      "op": "ADD"
    },
    "3656": {
      "op": "SWAP1"
    },
    "3657": {
      "jump": "o",
      "op": "JUMP"
    },
    "3658": {
      "op": "JUMPDEST"
    },
    "3659": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3661": {
      "op": "DUP1"
    },
    "3662": {
      "op": "DUP3"
    },
    "3663": {
      "op": "MSTORE"
    },
    "3664": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3666": {
      "op": "SWAP1"
    },
    "3667": {
      "op": "DUP3"
    },
    "3668": {
      "op": "ADD"
    },
    "3669": {
      "op": "MSTORE"
    },
    "3670": {
      "op": "PUSH32",
      "value": "0x4552433732313A207472616E7366657220746F20746865207A65726F20616464"
    },
    "3703": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3705": {
      "op": "DUP3"
    },
    "3706": {
      "op": "ADD"
    },
    "3707": {
      "op": "MSTORE"
    },
    "3708": {
      "op": "PUSH4",
      "value": "0x72657373"
    },
    "3713": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3715": {
      "op": "SHL"
    },
    "3716": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3718": {
      "op": "DUP3"
    },
    "3719": {
      "op": "ADD"
    },
    "3720": {
      "op": "MSTORE"
    },
    "3721": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3723": {
      "op": "ADD"
    },
    "3724": {
      "op": "SWAP1"
    },
    "3725": {
      "jump": "o",
      "op": "JUMP"
    },
    "3726": {
      "op": "JUMPDEST"
    },
    "3727": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3729": {
      "op": "DUP1"
    },
    "3730": {
      "op": "DUP3"
    },
    "3731": {
      "op": "MSTORE"
    },
    "3732": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "3734": {
      "op": "SWAP1"
    },
    "3735": {
      "op": "DUP3"
    },
    "3736": {
      "op": "ADD"
    },
    "3737": {
      "op": "MSTORE"
    },
    "3738": {
      "op": "PUSH32",
      "value": "0x4552433732313A20617070726F766520746F2063616C6C657200000000000000"
    },
    "3771": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3773": {
      "op": "DUP3"
    },
    "3774": {
      "op": "ADD"
    },
    "3775": {
      "op": "MSTORE"
    },
    "3776": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3778": {
      "op": "ADD"
    },
    "3779": {
      "op": "SWAP1"
    },
    "3780": {
      "jump": "o",
      "op": "JUMP"
    },
    "3781": {
      "op": "JUMPDEST"
    },
    "3782": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3784": {
      "op": "DUP1"
    },
    "3785": {
      "op": "DUP3"
    },
    "3786": {
      "op": "MSTORE"
    },
    "3787": {
      "op": "PUSH1",
      "value": "0x2C"
    },
    "3789": {
      "op": "SWAP1"
    },
    "3790": {
      "op": "DUP3"
    },
    "3791": {
      "op": "ADD"
    },
    "3792": {
      "op": "MSTORE"
    },
    "3793": {
      "op": "PUSH32",
      "value": "0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578"
    },
    "3826": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3828": {
      "op": "DUP3"
    },
    "3829": {
      "op": "ADD"
    },
    "3830": {
      "op": "MSTORE"
    },
    "3831": {
      "op": "PUSH12",
      "value": "0x34B9BA32B73A103A37B5B2B7"
    },
    "3844": {
      "op": "PUSH1",
      "value": "0xA1"
    },
    "3846": {
      "op": "SHL"
    },
    "3847": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3849": {
      "op": "DUP3"
    },
    "3850": {
      "op": "ADD"
    },
    "3851": {
      "op": "MSTORE"
    },
    "3852": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3854": {
      "op": "ADD"
    },
    "3855": {
      "op": "SWAP1"
    },
    "3856": {
      "jump": "o",
      "op": "JUMP"
    },
    "3857": {
      "op": "JUMPDEST"
    },
    "3858": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3860": {
      "op": "DUP1"
    },
    "3861": {
      "op": "DUP3"
    },
    "3862": {
      "op": "MSTORE"
    },
    "3863": {
      "op": "PUSH1",
      "value": "0x38"
    },
    "3865": {
      "op": "SWAP1"
    },
    "3866": {
      "op": "DUP3"
    },
    "3867": {
      "op": "ADD"
    },
    "3868": {
      "op": "MSTORE"
    },
    "3869": {
      "op": "PUSH32",
      "value": "0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77"
    },
    "3902": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3904": {
      "op": "DUP3"
    },
    "3905": {
      "op": "ADD"
    },
    "3906": {
      "op": "MSTORE"
    },
    "3907": {
      "op": "PUSH32",
      "value": "0x6E6572206E6F7220617070726F76656420666F7220616C6C0000000000000000"
    },
    "3940": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3942": {
      "op": "DUP3"
    },
    "3943": {
      "op": "ADD"
    },
    "3944": {
      "op": "MSTORE"
    },
    "3945": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3947": {
      "op": "ADD"
    },
    "3948": {
      "op": "SWAP1"
    },
    "3949": {
      "jump": "o",
      "op": "JUMP"
    },
    "3950": {
      "op": "JUMPDEST"
    },
    "3951": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3953": {
      "op": "DUP1"
    },
    "3954": {
      "op": "DUP3"
    },
    "3955": {
      "op": "MSTORE"
    },
    "3956": {
      "op": "PUSH1",
      "value": "0x2A"
    },
    "3958": {
      "op": "SWAP1"
    },
    "3959": {
      "op": "DUP3"
    },
    "3960": {
      "op": "ADD"
    },
    "3961": {
      "op": "MSTORE"
    },
    "3962": {
      "op": "PUSH32",
      "value": "0x4552433732313A2062616C616E636520717565727920666F7220746865207A65"
    },
    "3995": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3997": {
      "op": "DUP3"
    },
    "3998": {
      "op": "ADD"
    },
    "3999": {
      "op": "MSTORE"
    },
    "4000": {
      "op": "PUSH10",
      "value": "0x726F2061646472657373"
    },
    "4011": {
      "op": "PUSH1",
      "value": "0xB0"
    },
    "4013": {
      "op": "SHL"
    },
    "4014": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4016": {
      "op": "DUP3"
    },
    "4017": {
      "op": "ADD"
    },
    "4018": {
      "op": "MSTORE"
    },
    "4019": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4021": {
      "op": "ADD"
    },
    "4022": {
      "op": "SWAP1"
    },
    "4023": {
      "jump": "o",
      "op": "JUMP"
    },
    "4024": {
      "op": "JUMPDEST"
    },
    "4025": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4027": {
      "op": "DUP1"
    },
    "4028": {
      "op": "DUP3"
    },
    "4029": {
      "op": "MSTORE"
    },
    "4030": {
      "op": "PUSH1",
      "value": "0x29"
    },
    "4032": {
      "op": "SWAP1"
    },
    "4033": {
      "op": "DUP3"
    },
    "4034": {
      "op": "ADD"
    },
    "4035": {
      "op": "MSTORE"
    },
    "4036": {
      "op": "PUSH32",
      "value": "0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374"
    },
    "4069": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4071": {
      "op": "DUP3"
    },
    "4072": {
      "op": "ADD"
    },
    "4073": {
      "op": "MSTORE"
    },
    "4074": {
      "op": "PUSH9",
      "value": "0x32B73A103A37B5B2B7"
    },
    "4084": {
      "op": "PUSH1",
      "value": "0xB9"
    },
    "4086": {
      "op": "SHL"
    },
    "4087": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4089": {
      "op": "DUP3"
    },
    "4090": {
      "op": "ADD"
    },
    "4091": {
      "op": "MSTORE"
    },
    "4092": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4094": {
      "op": "ADD"
    },
    "4095": {
      "op": "SWAP1"
    },
    "4096": {
      "jump": "o",
      "op": "JUMP"
    },
    "4097": {
      "op": "JUMPDEST"
    },
    "4098": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4100": {
      "op": "DUP1"
    },
    "4101": {
      "op": "DUP3"
    },
    "4102": {
      "op": "MSTORE"
    },
    "4103": {
      "op": "PUSH1",
      "value": "0x2C"
    },
    "4105": {
      "op": "SWAP1"
    },
    "4106": {
      "op": "DUP3"
    },
    "4107": {
      "op": "ADD"
    },
    "4108": {
      "op": "MSTORE"
    },
    "4109": {
      "op": "PUSH32",
      "value": "0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578"
    },
    "4142": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4144": {
      "op": "DUP3"
    },
    "4145": {
      "op": "ADD"
    },
    "4146": {
      "op": "MSTORE"
    },
    "4147": {
      "op": "PUSH12",
      "value": "0x34B9BA32B73A103A37B5B2B7"
    },
    "4160": {
      "op": "PUSH1",
      "value": "0xA1"
    },
    "4162": {
      "op": "SHL"
    },
    "4163": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4165": {
      "op": "DUP3"
    },
    "4166": {
      "op": "ADD"
    },
    "4167": {
      "op": "MSTORE"
    },
    "4168": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4170": {
      "op": "ADD"
    },
    "4171": {
      "op": "SWAP1"
    },
    "4172": {
      "jump": "o",
      "op": "JUMP"
    },
    "4173": {
      "op": "JUMPDEST"
    },
    "4174": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4176": {
      "op": "DUP1"
    },
    "4177": {
      "op": "DUP3"
    },
    "4178": {
      "op": "MSTORE"
    },
    "4179": {
      "op": "PUSH1",
      "value": "0x29"
    },
    "4181": {
      "op": "SWAP1"
    },
    "4182": {
      "op": "DUP3"
    },
    "4183": {
      "op": "ADD"
    },
    "4184": {
      "op": "MSTORE"
    },
    "4185": {
      "op": "PUSH32",
      "value": "0x4552433732313A207472616E73666572206F6620746F6B656E20746861742069"
    },
    "4218": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4220": {
      "op": "DUP3"
    },
    "4221": {
      "op": "ADD"
    },
    "4222": {
      "op": "MSTORE"
    },
    "4223": {
      "op": "PUSH9",
      "value": "0x39903737BA1037BBB7"
    },
    "4233": {
      "op": "PUSH1",
      "value": "0xB9"
    },
    "4235": {
      "op": "SHL"
    },
    "4236": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4238": {
      "op": "DUP3"
    },
    "4239": {
      "op": "ADD"
    },
    "4240": {
      "op": "MSTORE"
    },
    "4241": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4243": {
      "op": "ADD"
    },
    "4244": {
      "op": "SWAP1"
    },
    "4245": {
      "jump": "o",
      "op": "JUMP"
    },
    "4246": {
      "op": "JUMPDEST"
    },
    "4247": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4249": {
      "op": "DUP1"
    },
    "4250": {
      "op": "DUP3"
    },
    "4251": {
      "op": "MSTORE"
    },
    "4252": {
      "op": "PUSH1",
      "value": "0x2F"
    },
    "4254": {
      "op": "SWAP1"
    },
    "4255": {
      "op": "DUP3"
    },
    "4256": {
      "op": "ADD"
    },
    "4257": {
      "op": "MSTORE"
    },
    "4258": {
      "op": "PUSH32",
      "value": "0x4552433732314D657461646174613A2055524920717565727920666F72206E6F"
    },
    "4291": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4293": {
      "op": "DUP3"
    },
    "4294": {
      "op": "ADD"
    },
    "4295": {
      "op": "MSTORE"
    },
    "4296": {
      "op": "PUSH15",
      "value": "0x3732BC34B9BA32B73A103A37B5B2B7"
    },
    "4312": {
      "op": "PUSH1",
      "value": "0x89"
    },
    "4314": {
      "op": "SHL"
    },
    "4315": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4317": {
      "op": "DUP3"
    },
    "4318": {
      "op": "ADD"
    },
    "4319": {
      "op": "MSTORE"
    },
    "4320": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4322": {
      "op": "ADD"
    },
    "4323": {
      "op": "SWAP1"
    },
    "4324": {
      "jump": "o",
      "op": "JUMP"
    },
    "4325": {
      "op": "JUMPDEST"
    },
    "4326": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4328": {
      "op": "DUP1"
    },
    "4329": {
      "op": "DUP3"
    },
    "4330": {
      "op": "MSTORE"
    },
    "4331": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "4333": {
      "op": "SWAP1"
    },
    "4334": {
      "op": "DUP3"
    },
    "4335": {
      "op": "ADD"
    },
    "4336": {
      "op": "MSTORE"
    },
    "4337": {
      "op": "PUSH32",
      "value": "0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65"
    },
    "4370": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4372": {
      "op": "DUP3"
    },
    "4373": {
      "op": "ADD"
    },
    "4374": {
      "op": "MSTORE"
    },
    "4375": {
      "op": "PUSH1",
      "value": "0x39"
    },
    "4377": {
      "op": "PUSH1",
      "value": "0xF9"
    },
    "4379": {
      "op": "SHL"
    },
    "4380": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4382": {
      "op": "DUP3"
    },
    "4383": {
      "op": "ADD"
    },
    "4384": {
      "op": "MSTORE"
    },
    "4385": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4387": {
      "op": "ADD"
    },
    "4388": {
      "op": "SWAP1"
    },
    "4389": {
      "jump": "o",
      "op": "JUMP"
    },
    "4390": {
      "op": "JUMPDEST"
    },
    "4391": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4393": {
      "op": "DUP1"
    },
    "4394": {
      "op": "DUP3"
    },
    "4395": {
      "op": "MSTORE"
    },
    "4396": {
      "op": "PUSH1",
      "value": "0x31"
    },
    "4398": {
      "op": "SWAP1"
    },
    "4399": {
      "op": "DUP3"
    },
    "4400": {
      "op": "ADD"
    },
    "4401": {
      "op": "MSTORE"
    },
    "4402": {
      "op": "PUSH32",
      "value": "0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F"
    },
    "4435": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4437": {
      "op": "DUP3"
    },
    "4438": {
      "op": "ADD"
    },
    "4439": {
      "op": "MSTORE"
    },
    "4440": {
      "op": "PUSH17",
      "value": "0x1DDB995C881B9BDC88185C1C1C9BDD9959"
    },
    "4458": {
      "op": "PUSH1",
      "value": "0x7A"
    },
    "4460": {
      "op": "SHL"
    },
    "4461": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4463": {
      "op": "DUP3"
    },
    "4464": {
      "op": "ADD"
    },
    "4465": {
      "op": "MSTORE"
    },
    "4466": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4468": {
      "op": "ADD"
    },
    "4469": {
      "op": "SWAP1"
    },
    "4470": {
      "jump": "o",
      "op": "JUMP"
    },
    "4471": {
      "op": "JUMPDEST"
    },
    "4472": {
      "op": "SWAP1"
    },
    "4473": {
      "op": "DUP2"
    },
    "4474": {
      "op": "MSTORE"
    },
    "4475": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4477": {
      "op": "ADD"
    },
    "4478": {
      "op": "SWAP1"
    },
    "4479": {
      "jump": "o",
      "op": "JUMP"
    },
    "4480": {
      "op": "JUMPDEST"
    },
    "4481": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4483": {
      "op": "DUP3"
    },
    "4484": {
      "op": "NOT"
    },
    "4485": {
      "op": "DUP3"
    },
    "4486": {
      "op": "GT"
    },
    "4487": {
      "op": "ISZERO"
    },
    "4488": {
      "op": "PUSH2",
      "value": "0x1193"
    },
    "4491": {
      "op": "JUMPI"
    },
    "4492": {
      "op": "PUSH2",
      "value": "0x1193"
    },
    "4495": {
      "op": "PUSH2",
      "value": "0x1259"
    },
    "4498": {
      "jump": "i",
      "op": "JUMP"
    },
    "4499": {
      "op": "JUMPDEST"
    },
    "4500": {
      "op": "POP"
    },
    "4501": {
      "op": "ADD"
    },
    "4502": {
      "op": "SWAP1"
    },
    "4503": {
      "jump": "o",
      "op": "JUMP"
    },
    "4504": {
      "op": "JUMPDEST"
    },
    "4505": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4507": {
      "op": "DUP3"
    },
    "4508": {
      "op": "PUSH2",
      "value": "0x11A7"
    },
    "4511": {
      "op": "JUMPI"
    },
    "4512": {
      "op": "PUSH2",
      "value": "0x11A7"
    },
    "4515": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "4518": {
      "jump": "i",
      "op": "JUMP"
    },
    "4519": {
      "op": "JUMPDEST"
    },
    "4520": {
      "op": "POP"
    },
    "4521": {
      "op": "DIV"
    },
    "4522": {
      "op": "SWAP1"
    },
    "4523": {
      "jump": "o",
      "op": "JUMP"
    },
    "4524": {
      "op": "JUMPDEST"
    },
    "4525": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4527": {
      "op": "DUP3"
    },
    "4528": {
      "op": "DUP3"
    },
    "4529": {
      "op": "LT"
    },
    "4530": {
      "op": "ISZERO"
    },
    "4531": {
      "op": "PUSH2",
      "value": "0x11BE"
    },
    "4534": {
      "op": "JUMPI"
    },
    "4535": {
      "op": "PUSH2",
      "value": "0x11BE"
    },
    "4538": {
      "op": "PUSH2",
      "value": "0x1259"
    },
    "4541": {
      "jump": "i",
      "op": "JUMP"
    },
    "4542": {
      "op": "JUMPDEST"
    },
    "4543": {
      "op": "POP"
    },
    "4544": {
      "op": "SUB"
    },
    "4545": {
      "op": "SWAP1"
    },
    "4546": {
      "jump": "o",
      "op": "JUMP"
    },
    "4547": {
      "op": "JUMPDEST"
    },
    "4548": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4550": {
      "op": "JUMPDEST"
    },
    "4551": {
      "op": "DUP4"
    },
    "4552": {
      "op": "DUP2"
    },
    "4553": {
      "op": "LT"
    },
    "4554": {
      "op": "ISZERO"
    },
    "4555": {
      "op": "PUSH2",
      "value": "0x11DE"
    },
    "4558": {
      "op": "JUMPI"
    },
    "4559": {
      "op": "DUP2"
    },
    "4560": {
      "op": "DUP2"
    },
    "4561": {
      "op": "ADD"
    },
    "4562": {
      "op": "MLOAD"
    },
    "4563": {
      "op": "DUP4"
    },
    "4564": {
      "op": "DUP3"
    },
    "4565": {
      "op": "ADD"
    },
    "4566": {
      "op": "MSTORE"
    },
    "4567": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4569": {
      "op": "ADD"
    },
    "4570": {
      "op": "PUSH2",
      "value": "0x11C6"
    },
    "4573": {
      "op": "JUMP"
    },
    "4574": {
      "op": "JUMPDEST"
    },
    "4575": {
      "op": "DUP4"
    },
    "4576": {
      "op": "DUP2"
    },
    "4577": {
      "op": "GT"
    },
    "4578": {
      "op": "ISZERO"
    },
    "4579": {
      "op": "PUSH2",
      "value": "0x4DC"
    },
    "4582": {
      "op": "JUMPI"
    },
    "4583": {
      "op": "POP"
    },
    "4584": {
      "op": "POP"
    },
    "4585": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4587": {
      "op": "SWAP2"
    },
    "4588": {
      "op": "ADD"
    },
    "4589": {
      "op": "MSTORE"
    },
    "4590": {
      "jump": "o",
      "op": "JUMP"
    },
    "4591": {
      "op": "JUMPDEST"
    },
    "4592": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "4594": {
      "op": "DUP2"
    },
    "4595": {
      "op": "DIV"
    },
    "4596": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4598": {
      "op": "DUP3"
    },
    "4599": {
      "op": "AND"
    },
    "4600": {
      "op": "DUP1"
    },
    "4601": {
      "op": "PUSH2",
      "value": "0x1203"
    },
    "4604": {
      "op": "JUMPI"
    },
    "4605": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "4607": {
      "op": "DUP3"
    },
    "4608": {
      "op": "AND"
    },
    "4609": {
      "op": "SWAP2"
    },
    "4610": {
      "op": "POP"
    },
    "4611": {
      "op": "JUMPDEST"
    },
    "4612": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4614": {
      "op": "DUP3"
    },
    "4615": {
      "op": "LT"
    },
    "4616": {
      "op": "DUP2"
    },
    "4617": {
      "op": "EQ"
    },
    "4618": {
      "op": "ISZERO"
    },
    "4619": {
      "op": "PUSH2",
      "value": "0x1224"
    },
    "4622": {
      "op": "JUMPI"
    },
    "4623": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4628": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4630": {
      "op": "SHL"
    },
    "4631": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4633": {
      "op": "MSTORE"
    },
    "4634": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "4636": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4638": {
      "op": "MSTORE"
    },
    "4639": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4641": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4643": {
      "op": "REVERT"
    },
    "4644": {
      "op": "JUMPDEST"
    },
    "4645": {
      "op": "POP"
    },
    "4646": {
      "op": "SWAP2"
    },
    "4647": {
      "op": "SWAP1"
    },
    "4648": {
      "op": "POP"
    },
    "4649": {
      "jump": "o",
      "op": "JUMP"
    },
    "4650": {
      "op": "JUMPDEST"
    },
    "4651": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4653": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4655": {
      "op": "NOT"
    },
    "4656": {
      "op": "DUP3"
    },
    "4657": {
      "op": "EQ"
    },
    "4658": {
      "op": "ISZERO"
    },
    "4659": {
      "op": "PUSH2",
      "value": "0x123E"
    },
    "4662": {
      "op": "JUMPI"
    },
    "4663": {
      "op": "PUSH2",
      "value": "0x123E"
    },
    "4666": {
      "op": "PUSH2",
      "value": "0x1259"
    },
    "4669": {
      "jump": "i",
      "op": "JUMP"
    },
    "4670": {
      "op": "JUMPDEST"
    },
    "4671": {
      "op": "POP"
    },
    "4672": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4674": {
      "op": "ADD"
    },
    "4675": {
      "op": "SWAP1"
    },
    "4676": {
      "jump": "o",
      "op": "JUMP"
    },
    "4677": {
      "op": "JUMPDEST"
    },
    "4678": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4680": {
      "op": "DUP3"
    },
    "4681": {
      "op": "PUSH2",
      "value": "0x1254"
    },
    "4684": {
      "op": "JUMPI"
    },
    "4685": {
      "op": "PUSH2",
      "value": "0x1254"
    },
    "4688": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "4691": {
      "jump": "i",
      "op": "JUMP"
    },
    "4692": {
      "op": "JUMPDEST"
    },
    "4693": {
      "op": "POP"
    },
    "4694": {
      "op": "MOD"
    },
    "4695": {
      "op": "SWAP1"
    },
    "4696": {
      "jump": "o",
      "op": "JUMP"
    },
    "4697": {
      "op": "JUMPDEST"
    },
    "4698": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4703": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4705": {
      "op": "SHL"
    },
    "4706": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4708": {
      "op": "MSTORE"
    },
    "4709": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4711": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4713": {
      "op": "MSTORE"
    },
    "4714": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4716": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4718": {
      "op": "REVERT"
    },
    "4719": {
      "op": "JUMPDEST"
    },
    "4720": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4725": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4727": {
      "op": "SHL"
    },
    "4728": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4730": {
      "op": "MSTORE"
    },
    "4731": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "4733": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4735": {
      "op": "MSTORE"
    },
    "4736": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4738": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4740": {
      "op": "REVERT"
    },
    "4741": {
      "op": "JUMPDEST"
    },
    "4742": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4747": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4749": {
      "op": "SHL"
    },
    "4750": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4752": {
      "op": "MSTORE"
    },
    "4753": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "4755": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4757": {
      "op": "MSTORE"
    },
    "4758": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4760": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4762": {
      "op": "REVERT"
    },
    "4763": {
      "op": "JUMPDEST"
    },
    "4764": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4766": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4768": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4770": {
      "op": "SHL"
    },
    "4771": {
      "op": "SUB"
    },
    "4772": {
      "op": "NOT"
    },
    "4773": {
      "op": "DUP2"
    },
    "4774": {
      "op": "AND"
    },
    "4775": {
      "op": "DUP2"
    },
    "4776": {
      "op": "EQ"
    },
    "4777": {
      "op": "PUSH2",
      "value": "0x12B1"
    },
    "4780": {
      "op": "JUMPI"
    },
    "4781": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4783": {
      "op": "DUP1"
    },
    "4784": {
      "op": "REVERT"
    },
    "4785": {
      "op": "JUMPDEST"
    },
    "4786": {
      "op": "POP"
    },
    "4787": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "534b80059b04c27528032eaf10c5e52a7e3594b1",
  "source": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string internal _name;\n\n    // Token symbol\n    string internal _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) internal _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) internal _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) internal _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}",
  "sourceMap": "790:13013:10:-:0;;;1558:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1624:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1647:17:10;;;;:7;;:17;;;;;:::i;:::-;;1558:113;;790:13013;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;790:13013:10;;;-1:-1:-1;790:13013:10;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:881:13;;123:3;116:4;108:6;104:17;100:27;90:2;;145:5;138;131:20;90:2;172:13;;-1:-1:-1;;;;;234:10:13;;;231:2;;;247:18;;:::i;:::-;296:2;290:9;318:4;388:2;369:13;;-1:-1:-1;;365:27:13;353:40;;349:49;;413:18;;;433:22;;;410:46;407:2;;;459:18;;:::i;:::-;495:2;488:22;519:18;;;556:15;;;552:24;;549:33;-1:-1:-1;546:2:13;;;599:5;592;585:20;546:2;625:5;616:14;;639:133;653:2;650:1;647:9;639:133;;;741:14;;;737:23;;731:30;710:14;;;706:23;;699:63;664:10;;;;639:133;;;790:2;787:1;784:9;781:2;;;849:5;844:2;839;831:6;827:15;823:24;816:39;781:2;-1:-1:-1;883:6:13;80:815;-1:-1:-1;;;;;80:815:13:o;900:596::-;;;1060:2;1048:9;1039:7;1035:23;1031:32;1028:2;;;1081:6;1073;1066:22;1028:2;1113:16;;-1:-1:-1;;;;;1178:14:13;;;1175:2;;;1210:6;1202;1195:22;1175:2;1238:63;1293:7;1284:6;1273:9;1269:22;1238:63;:::i;:::-;1228:73;;1347:2;1336:9;1332:18;1326:25;1310:41;;1376:2;1366:8;1363:16;1360:2;;;1397:6;1389;1382:22;1360:2;;1425:65;1482:7;1471:8;1460:9;1456:24;1425:65;:::i;:::-;1415:75;;;1018:478;;;;;:::o;1501:380::-;1586:1;1576:12;;1633:1;1623:12;;;1644:2;;1698:4;1690:6;1686:17;1676:27;;1644:2;1751;1743:6;1740:14;1720:18;1717:38;1714:2;;;1797:10;1792:3;1788:20;1785:1;1778:31;1832:4;1829:1;1822:15;1860:4;1857:1;1850:15;1714:2;;1556:325;;;:::o;1886:127::-;1947:10;1942:3;1938:20;1935:1;1928:31;1978:4;1975:1;1968:15;2002:4;1999:1;1992:15;1918:95;790:13013:10;;;;;;",
  "sourcePath": "contracts/ERC721.sol",
  "type": "contract"
}